/*
 * app.c
 *
 *  Created on: Jul 27, 2024
 *      Author: Ayuba Tahiru
 */


#include "app.h"


void UART2_Init(void );
void Error_handler(void );
void SystemClock_Config(uint8_t freq);
void SystemClock_Config_HSE(uint8_t freq);
void Timer2_Init(void);
void GPIO_Init(void);
void UART2_Init();



TIM_HandleTypeDef htimer2;
UART_HandleTypeDef huart2;
GPIO_InitTypeDef led;

uint8_t capture_done = FALSE;
uint32_t input_capture[2] = {0};
uint16_t led_brightness = 0;

int main(void){


 	HAL_Init();

 	SystemClock_Config_HSE(HCLK_50MHZ);

 	GPIO_Init();

 	UART2_Init();

 	Timer2_Init();


 	// Start timer Interrupt

	if(HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_1) != HAL_OK){
		Error_handler();
	}
    while (1) {
        // Increase brightness
        while (led_brightness < htimer2.Init.Period) {
            led_brightness ++; // Adjust the step for smoothness
            __HAL_TIM_SET_COMPARE(&htimer2, TIM_CHANNEL_1, led_brightness);
            HAL_Delay(1); // Adjust the delay for speed of fade
        }

        // Decrease brightness
        while (led_brightness > 0) {
            led_brightness --; // Adjust the step for smoothness
            __HAL_TIM_SET_COMPARE(&htimer2, TIM_CHANNEL_1, led_brightness);
            HAL_Delay(1); // Adjust the delay for speed of fade
        }
    }







	return 0;

}


void SystemClock_Config(uint8_t freq){
	uint8_t FLatency = 0;
	// Variable to select RCC Internal/External Oscillator (HSE, HSI, LSE and LSI) types
	RCC_OscInitTypeDef osc_init;

	// Variable to configure RCC System, AHB and APB busses
	RCC_ClkInitTypeDef clk_init;


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI  | RCC_OSCILLATORTYPE_HSE; // Clock source selected
	osc_init.HSIState = RCC_HSI_ON; // HSI is ON by default, you can ignore this step
	osc_init.LSIState = RCC_LSI_ON; // LSI is ON
//	osc_init.LSIState = RCC_LSE_ON; // LSE is ON
	osc_init.HSEState = RCC_HSE_BYPASS; // HSE is ON
	osc_init.HSICalibrationValue = 16; //HSI calibration trimming value
	osc_init.PLL.PLLState = RCC_PLL_ON; // Turn PLL ON
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI; // PLL Clock source


	switch(freq){
		case HCLK_50MHZ :{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 100;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;

			// Clock speed Initialization
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_1WS;
			break;
		}
		case HCLK_84MHZ:{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 168;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;

			// Clock speed Initialization
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_2WS;
			break;
		}
		case HCLK_120MHZ:{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 240;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;

			// Clock speed Initialization
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:{
			return;
		}
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_handler();
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
		Error_handler();
	}

	// Systick Configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}

void SystemClock_Config_HSE(uint8_t freq){
	uint8_t FLatency = 0;
	// Variable to select RCC Internal/External Oscillator (HSE, HSI, LSE and LSI) types
	RCC_OscInitTypeDef osc_init;

	// Variable to configure RCC System, AHB and APB busses
	RCC_ClkInitTypeDef clk_init;


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE; // Clock source selected
	osc_init.HSEState = RCC_HSE_BYPASS; // HSI is ON by default, you can ignore this step
	osc_init.PLL.PLLState = RCC_PLL_ON; // Turn PLL ON
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE; // PLL Clock source

	switch(freq){
		case HCLK_50MHZ :{
			osc_init.PLL.PLLM = 8;
			osc_init.PLL.PLLN = 100;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;

			// Clock speed Initialization
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_1WS;
			break;
		}
		case HCLK_84MHZ:{
			osc_init.PLL.PLLM = 8;
			osc_init.PLL.PLLN = 168;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;

			// Clock speed Initialization
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_2WS;
			break;
		}
		case HCLK_120MHZ:{
			osc_init.PLL.PLLM = 8;
			osc_init.PLL.PLLN = 240;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;

			// Clock speed Initialization
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:{
			return;
		}
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_handler();
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
		Error_handler();
	}

	// Systick Configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}



void Timer2_Init(void){
/********************* a) INITIALIZE HIGH LEVEL INITS FOR TIMER2 PERIPHERAL AND CHANNEL CONFIGURATION, PARAMETER INITIALIZATION *******************/

	// Initialize the Timer Output Compare Time Base
	htimer2.Instance = TIM2;
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htimer2.Init.Prescaler = 4999; //
	htimer2.Init.Period = 10000 - 1; // 32-bit
	if(HAL_TIM_PWM_Init(&htimer2) != HAL_OK){
		Error_handler();
	}



	// Configure Output Channel of the timer
	TIM_OC_InitTypeDef timer2_Config;

	memset(&timer2_Config,0, sizeof(timer2_Config));

	timer2_Config.OCMode= TIM_OCMODE_PWM1;
	timer2_Config.OCPolarity= TIM_OCPOLARITY_HIGH;


	// Channel 1
	timer2_Config.Pulse=0;
	if(HAL_TIM_PWM_ConfigChannel(&htimer2, &timer2_Config, TIM_CHANNEL_1) != HAL_OK){
		Error_handler();
	}


}


void GPIO_Init(void){
	__HAL_RCC_GPIOD_CLK_ENABLE();
	led.Pin = GPIO_PIN_12;
	led.Mode = GPIO_MODE_OUTPUT_PP;
	led.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOD, &led);
}

void UART2_Init(){
/********************* a) INITIALIZE HIGH LEVEL INITS FOR USART2 PERIPHERAL, PARAMETER INITIALIZATION *******************/
	// Handle variable linked with USART2
	huart2.Instance = USART2;

	//Parameter Initialization
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl =  UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;

	//Initialize UART with HAL API
	if(HAL_UART_Init(&huart2) != HAL_OK){
		// Something went wrong!
		Error_handler();
	}
}


void Error_handler(void){
	while(1);
}
