/*
 * app.c
 *
 *  Created on: July 6, 2024
 *      Author: Ayuba Tahiru
 */


#include "app.h"



void UART2_Init(void );
void Error_handler(void );
void SystemClock_Config(uint8_t freq);


// Handle Global Variable for UART
UART_HandleTypeDef huart2;


int main(void){
	uint8_t msg[100];

 	HAL_Init();

	UART2_Init();

	SystemClock_Config();

	while(1);

	return 0;

}



void UART2_Init(void){
/********************* a) INITIALIZE HIGH LEVEL INITS FOR USART2 PERIPHERAL, PARAMETER INITIALIZATION *******************/
	// Handle variable linked with USART2
	huart2.Instance = USART2;

	//Parameter Initialization
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl =  UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;

	//Initialize UART with HAL API
	if(HAL_UART_Init(&huart2) != HAL_OK){
		// Something went wrong!
		Error_handler();
	}
}


void SystemClock_Config(uint8_t freq){
	// Variable to select RCC Internal/External Oscillator (HSE, HSI, LSE and LSI) types
	RCC_OscInitTypeDef osc_init;

	// Variable to configure RCC System, AHB and APB busses
	RCC_ClkInitTypeDef clk_init;


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI; // Clock source selected
	osc_init.HSIState = RCC_HSI_ON; // HSI is ON by default, you can ignore this step
	osc_init.HSICalibrationValue = 16; //HSI calibration trimming value
	osc_init.PLL.PLLState = RCC_PLL_ON; // Turn PLL ON
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI; // PLL Clock source

	switch(freq){
		case HCLK_50MHZ :{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 100;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;
			break;
		}
		case HCLK_84MHZ:{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 168;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;
			break;
		}
		case HCLK_120MHZ:{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 240;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;
			break;
		}
		default:{
			return;
		}
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_handler();
	}


}

void Error_handler(void){
	while(1);
}
