/*
 * app.c
 *
 *  Created on: Jul 12, 2024
 *      Author: Ayuba Tahiru
 */



#include "app.h"



void UART2_Init(void );
void Error_handler(void );
void SystemClock_Config(uint8_t freq);
void Timer2_Init(void);
void GPIO_Init(void);
void LSE_Configuration(void);


TIM_HandleTypeDef htimer2;
GPIO_InitTypeDef led;


int main(void){

 	HAL_Init();

 	SystemClock_Config(HCLK_50MHZ);

 	GPIO_Init();

 	Timer2_Init();

 	LSE_Configuration();

 	// Start timer Interrupt
// 	HAL_TIM_Base_Start_IT(&htimer2);

 	while(1);





	return 0;

}


void SystemClock_Config(uint8_t freq){
	uint8_t FLatency = 0;
	// Variable to select RCC Internal/External Oscillator (HSE, HSI, LSE and LSI) types
	RCC_OscInitTypeDef osc_init;

	// Variable to configure RCC System, AHB and APB busses
	RCC_ClkInitTypeDef clk_init;


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI ; // Clock source selected
	osc_init.HSIState = RCC_HSI_ON; // HSI is ON by default, you can ignore this step
//	osc_init.LSEState = RCC_LSE_ON; // LSE is ON
	osc_init.HSICalibrationValue = 16; //HSI calibration trimming value
	osc_init.PLL.PLLState = RCC_PLL_ON; // Turn PLL ON
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI; // PLL Clock source

	switch(freq){
		case HCLK_50MHZ :{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 100;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;

			// Clock speed Initialization
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_1WS;
			break;
		}
		case HCLK_84MHZ:{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 168;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;

			// Clock speed Initialization
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_2WS;
			break;
		}
		case HCLK_120MHZ:{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 240;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;

			// Clock speed Initialization
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:{
			return;
		}
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_handler();
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
		Error_handler();
	}

	// Systick Configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}


void LSE_Configuration(void){
	// Variable to select RCC Internal/External Oscillator (HSE, HSI, LSE and LSI) types
#if 0
	RCC_OscInitTypeDef osc_init;

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_LSE; // Clock source selected
	osc_init.LSEState = RCC_LSE_ON; // LSE is ON

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_handler();
	}

#endif
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
}



void Timer2_Init(void){
/********************* a) INITIALIZE HIGH LEVEL INITS FOR TIMER2 PERIPHERAL AND CHANNEL CONFIGURATION, PARAMETER INITIALIZATION *******************/
	TIM_IC_InitTypeDef timer2_Config;

	htimer2.Instance = TIM2;
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htimer2.Init.Prescaler = 1;
	htimer2.Init.Period = 0xFFFFFFFF; // 32-bit
	if(HAL_TIM_IC_Init(&htimer2) != HAL_OK){
		Error_handler();
	}

	timer2_Config.ICFilter = 0;
	timer2_Config.ICPolarity = TIM_ICPOLARITY_RISING;
	timer2_Config.ICPrescaler = TIM_ICPSC_DIV1;
	timer2_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
	if(HAL_TIM_IC_ConfigChannel(&htimer2, &timer2_Config, TIM_CHANNEL_1) != HAL_OK){
		Error_handler();
	}
}


void GPIO_Init(void){
	__HAL_RCC_GPIOD_CLK_ENABLE();
	led.Pin = GPIO_PIN_12;
	led.Mode = GPIO_MODE_OUTPUT_PP;
	led.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOD, &led);
}


void Error_handler(void){
	while(1);
}
