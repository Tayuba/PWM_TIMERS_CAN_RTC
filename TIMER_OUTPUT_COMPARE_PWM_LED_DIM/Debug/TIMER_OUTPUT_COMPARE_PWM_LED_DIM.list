
TIMER_OUTPUT_COMPARE_PWM_LED_DIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002920  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002aa8  08002aa8  00003aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac0  08002ac0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ac0  08002ac0  00003ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ac8  08002ac8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac8  08002ac8  00003ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002acc  08002acc  00003acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ad0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000c8  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0cc  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001918  00000000  00000000  00010108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  00011a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d0  00000000  00000000  00012550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020cda  00000000  00000000  00012e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d13a  00000000  00000000  00033afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caa2d  00000000  00000000  00040c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b661  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f8c  00000000  00000000  0010b6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0010e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a90 	.word	0x08002a90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002a90 	.word	0x08002a90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:

uint8_t capture_done = FALSE;
uint32_t input_capture[2] = {0};
uint16_t led_brightness = 0;

int main(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0


 	HAL_Init();
 80004bc:	f000 fa60 	bl	8000980 <HAL_Init>

 	SystemClock_Config_HSE(HCLK_50MHZ);
 80004c0:	2032      	movs	r0, #50	@ 0x32
 80004c2:	f000 f83d 	bl	8000540 <SystemClock_Config_HSE>

 	GPIO_Init();
 80004c6:	f000 f901 	bl	80006cc <GPIO_Init>

 	UART2_Init();
 80004ca:	f000 f929 	bl	8000720 <UART2_Init>

 	Timer2_Init();
 80004ce:	f000 f8c7 	bl	8000660 <Timer2_Init>


 	// Start timer Interrupt

	if(HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_1) != HAL_OK){
 80004d2:	2100      	movs	r1, #0
 80004d4:	4818      	ldr	r0, [pc, #96]	@ (8000538 <main+0x80>)
 80004d6:	f001 faa9 	bl	8001a2c <HAL_TIM_PWM_Start>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d010      	beq.n	8000502 <main+0x4a>
		Error_handler();
 80004e0:	f000 f944 	bl	800076c <Error_handler>
	}
    while (1) {
        // Increase brightness
        while (led_brightness < htimer2.Init.Period) {
 80004e4:	e00d      	b.n	8000502 <main+0x4a>
            led_brightness ++; // Adjust the step for smoothness
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <main+0x84>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	4b13      	ldr	r3, [pc, #76]	@ (800053c <main+0x84>)
 80004f0:	801a      	strh	r2, [r3, #0]
            __HAL_TIM_SET_COMPARE(&htimer2, TIM_CHANNEL_1, led_brightness);
 80004f2:	4b12      	ldr	r3, [pc, #72]	@ (800053c <main+0x84>)
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <main+0x80>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_Delay(1); // Adjust the delay for speed of fade
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 fab1 	bl	8000a64 <HAL_Delay>
        while (led_brightness < htimer2.Init.Period) {
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <main+0x84>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
 8000508:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <main+0x80>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	429a      	cmp	r2, r3
 800050e:	d3ea      	bcc.n	80004e6 <main+0x2e>
        }

        // Decrease brightness
        while (led_brightness > 0) {
 8000510:	e00d      	b.n	800052e <main+0x76>
            led_brightness --; // Adjust the step for smoothness
 8000512:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <main+0x84>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	3b01      	subs	r3, #1
 8000518:	b29a      	uxth	r2, r3
 800051a:	4b08      	ldr	r3, [pc, #32]	@ (800053c <main+0x84>)
 800051c:	801a      	strh	r2, [r3, #0]
            __HAL_TIM_SET_COMPARE(&htimer2, TIM_CHANNEL_1, led_brightness);
 800051e:	4b07      	ldr	r3, [pc, #28]	@ (800053c <main+0x84>)
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <main+0x80>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_Delay(1); // Adjust the delay for speed of fade
 8000528:	2001      	movs	r0, #1
 800052a:	f000 fa9b 	bl	8000a64 <HAL_Delay>
        while (led_brightness > 0) {
 800052e:	4b03      	ldr	r3, [pc, #12]	@ (800053c <main+0x84>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d1ed      	bne.n	8000512 <main+0x5a>
        while (led_brightness < htimer2.Init.Period) {
 8000536:	e7e4      	b.n	8000502 <main+0x4a>
 8000538:	20000028 	.word	0x20000028
 800053c:	200000cc 	.word	0x200000cc

08000540 <SystemClock_Config_HSE>:
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}

void SystemClock_Config_HSE(uint8_t freq){
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	uint8_t FLatency = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	// Variable to configure RCC System, AHB and APB busses
	RCC_ClkInitTypeDef clk_init;


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE; // Clock source selected
 8000550:	2301      	movs	r3, #1
 8000552:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_BYPASS; // HSI is ON by default, you can ignore this step
 8000554:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000558:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON; // Turn PLL ON
 800055a:	2302      	movs	r3, #2
 800055c:	637b      	str	r3, [r7, #52]	@ 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE; // PLL Clock source
 800055e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000562:	63bb      	str	r3, [r7, #56]	@ 0x38

	switch(freq){
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b78      	cmp	r3, #120	@ 0x78
 8000568:	d036      	beq.n	80005d8 <SystemClock_Config_HSE+0x98>
 800056a:	2b78      	cmp	r3, #120	@ 0x78
 800056c:	dc71      	bgt.n	8000652 <SystemClock_Config_HSE+0x112>
 800056e:	2b32      	cmp	r3, #50	@ 0x32
 8000570:	d002      	beq.n	8000578 <SystemClock_Config_HSE+0x38>
 8000572:	2b54      	cmp	r3, #84	@ 0x54
 8000574:	d018      	beq.n	80005a8 <SystemClock_Config_HSE+0x68>

			FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:{
			return;
 8000576:	e06c      	b.n	8000652 <SystemClock_Config_HSE+0x112>
			osc_init.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 100;
 800057c:	2364      	movs	r3, #100	@ 0x64
 800057e:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLP = 2;
 8000580:	2302      	movs	r3, #2
 8000582:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLQ = 2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	@ 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000588:	230f      	movs	r3, #15
 800058a:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000598:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059e:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_1WS;
 80005a0:	2301      	movs	r3, #1
 80005a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 80005a6:	e02f      	b.n	8000608 <SystemClock_Config_HSE+0xc8>
			osc_init.PLL.PLLM = 8;
 80005a8:	2308      	movs	r3, #8
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 168;
 80005ac:	23a8      	movs	r3, #168	@ 0xa8
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLP = 2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLQ = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005b8:	230f      	movs	r3, #15
 80005ba:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c8:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ce:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_2WS;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 80005d6:	e017      	b.n	8000608 <SystemClock_Config_HSE+0xc8>
			osc_init.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 240;
 80005dc:	23f0      	movs	r3, #240	@ 0xf0
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLP = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLQ = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64bb      	str	r3, [r7, #72]	@ 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005e8:	230f      	movs	r3, #15
 80005ea:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f8:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fe:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_3WS;
 8000600:	2303      	movs	r3, #3
 8000602:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 8000606:	bf00      	nop
		}
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fd25 	bl	800105c <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config_HSE+0xdc>
		Error_handler();
 8000618:	f000 f8a8 	bl	800076c <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 800061c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 ff90 	bl	800154c <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config_HSE+0xf6>
		Error_handler();
 8000632:	f000 f89b 	bl	800076c <Error_handler>
	}

	// Systick Configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000636:	f001 f975 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 800063a:	4603      	mov	r3, r0
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <SystemClock_Config_HSE+0x11c>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	099b      	lsrs	r3, r3, #6
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fb36 	bl	8000cb6 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800064a:	2004      	movs	r0, #4
 800064c:	f000 fb40 	bl	8000cd0 <HAL_SYSTICK_CLKSourceConfig>
 8000650:	e000      	b.n	8000654 <SystemClock_Config_HSE+0x114>
			return;
 8000652:	bf00      	nop

}
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	10624dd3 	.word	0x10624dd3

08000660 <Timer2_Init>:



void Timer2_Init(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
/********************* a) INITIALIZE HIGH LEVEL INITS FOR TIMER2 PERIPHERAL AND CHANNEL CONFIGURATION, PARAMETER INITIALIZATION *******************/

	// Initialize the Timer Output Compare Time Base
	htimer2.Instance = TIM2;
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <Timer2_Init+0x68>)
 8000668:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800066c:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <Timer2_Init+0x68>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	htimer2.Init.Prescaler = 49; //
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <Timer2_Init+0x68>)
 8000676:	2231      	movs	r2, #49	@ 0x31
 8000678:	605a      	str	r2, [r3, #4]
	htimer2.Init.Period = 1000 - 1; // 32-bit
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <Timer2_Init+0x68>)
 800067c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000680:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_PWM_Init(&htimer2) != HAL_OK){
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <Timer2_Init+0x68>)
 8000684:	f001 f982 	bl	800198c <HAL_TIM_PWM_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <Timer2_Init+0x32>
		Error_handler();
 800068e:	f000 f86d 	bl	800076c <Error_handler>


	// Configure Output Channel of the timer
	TIM_OC_InitTypeDef timer2_Config;

	memset(&timer2_Config,0, sizeof(timer2_Config));
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	221c      	movs	r2, #28
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f002 f9cd 	bl	8002a38 <memset>

	timer2_Config.OCMode= TIM_OCMODE_PWM1;
 800069e:	2360      	movs	r3, #96	@ 0x60
 80006a0:	607b      	str	r3, [r7, #4]
	timer2_Config.OCPolarity= TIM_OCPOLARITY_HIGH;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]


	// Channel 1
	timer2_Config.Pulse=0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htimer2, &timer2_Config, TIM_CHANNEL_1) != HAL_OK){
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <Timer2_Init+0x68>)
 80006b2:	f001 fb73 	bl	8001d9c <HAL_TIM_PWM_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <Timer2_Init+0x60>
		Error_handler();
 80006bc:	f000 f856 	bl	800076c <Error_handler>
	}


}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000028 	.word	0x20000028

080006cc <GPIO_Init>:


void GPIO_Init(void){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <GPIO_Init+0x48>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a0e      	ldr	r2, [pc, #56]	@ (8000714 <GPIO_Init+0x48>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <GPIO_Init+0x48>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
	led.Pin = GPIO_PIN_12;
 80006ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <GPIO_Init+0x4c>)
 80006f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006f4:	601a      	str	r2, [r3, #0]
	led.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <GPIO_Init+0x4c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	605a      	str	r2, [r3, #4]
	led.Pull = GPIO_NOPULL;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <GPIO_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &led);
 8000702:	4905      	ldr	r1, [pc, #20]	@ (8000718 <GPIO_Init+0x4c>)
 8000704:	4805      	ldr	r0, [pc, #20]	@ (800071c <GPIO_Init+0x50>)
 8000706:	f000 fb0d 	bl	8000d24 <HAL_GPIO_Init>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	200000b8 	.word	0x200000b8
 800071c:	40020c00 	.word	0x40020c00

08000720 <UART2_Init>:

void UART2_Init(){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
/********************* a) INITIALIZE HIGH LEVEL INITS FOR USART2 PERIPHERAL, PARAMETER INITIALIZATION *******************/
	// Handle variable linked with USART2
	huart2.Instance = USART2;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <UART2_Init+0x44>)
 8000726:	4a10      	ldr	r2, [pc, #64]	@ (8000768 <UART2_Init+0x48>)
 8000728:	601a      	str	r2, [r3, #0]

	//Parameter Initialization
	huart2.Init.BaudRate = 115200;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <UART2_Init+0x44>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <UART2_Init+0x44>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <UART2_Init+0x44>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <UART2_Init+0x44>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl =  UART_HWCONTROL_NONE;
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <UART2_Init+0x44>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <UART2_Init+0x44>)
 800074c:	220c      	movs	r2, #12
 800074e:	615a      	str	r2, [r3, #20]

	//Initialize UART with HAL API
	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000750:	4804      	ldr	r0, [pc, #16]	@ (8000764 <UART2_Init+0x44>)
 8000752:	f001 feac 	bl	80024ae <HAL_UART_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <UART2_Init+0x40>
		// Something went wrong!
		Error_handler();
 800075c:	f000 f806 	bl	800076c <Error_handler>
	}
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000070 	.word	0x20000070
 8000768:	40004400 	.word	0x40004400

0800076c <Error_handler>:


void Error_handler(void){
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
	while(1);
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_handler+0x4>

08000774 <SysTick_Handler>:



extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000778:	f000 f954 	bl	8000a24 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800077c:	f000 fac4 	bl	8000d08 <HAL_SYSTICK_IRQHandler>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	// First call Interrupt Processing API
	HAL_TIM_IRQHandler(&htimer2);
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <TIM2_IRQHandler+0x10>)
 800078a:	f001 fa17 	bl	8001bbc <HAL_TIM_IRQHandler>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000028 	.word	0x20000028

08000798 <HAL_MspInit>:

#include "app.h"



void HAL_MspInit(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
   * 1. Setup grouping of ARM-CORTEX Mx Processor
   * 2. Enable required system exceptions of the ARM-CORTEX Mx Processor
   * 3.	Configure priority for system exceptions*/

	// 1. Setup grouping
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f000 fa55 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable required system exceptions
	SCB->SHCSR |= 0x7 << 16; // usage fault, memory fault and bus fault
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <HAL_MspInit+0x40>)
 80007a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a6:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <HAL_MspInit+0x40>)
 80007a8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80007ac:	6253      	str	r3, [r2, #36]	@ 0x24

	// 3. Configure priority for system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	f06f 000b 	mvn.w	r0, #11
 80007b6:	f000 fa54 	bl	8000c62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	f06f 000a 	mvn.w	r0, #10
 80007c2:	f000 fa4e 	bl	8000c62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	f06f 0009 	mvn.w	r0, #9
 80007ce:	f000 fa48 	bl	8000c62 <HAL_NVIC_SetPriority>

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <HAL_UART_MspInit>:
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
}



void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	 * 1. Enable USART2 Peripheral clock
	 * 2. Do Pin Muxing Configuration
	 * 3. Enable IRQ and setup interrupt (NVIC Settings)*/

	// 1. Enable USART2 and GPIOA Peripheral clock
	__HAL_RCC_USART2_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <HAL_UART_MspInit+0x88>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000864 <HAL_UART_MspInit+0x88>)
 80007ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <HAL_UART_MspInit+0x88>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <HAL_UART_MspInit+0x88>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000808:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <HAL_UART_MspInit+0x88>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000810:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <HAL_UART_MspInit+0x88>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]

	// 2. Pin Muxing Configuration
	gpio_uart.Pin = GPIO_PIN_2; // UART2 Tx
 800081c:	2304      	movs	r3, #4
 800081e:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 800082c:	2307      	movs	r3, #7
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <HAL_UART_MspInit+0x8c>)
 8000838:	f000 fa74 	bl	8000d24 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; // UART2 Rx
 800083c:	2308      	movs	r3, #8
 800083e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4808      	ldr	r0, [pc, #32]	@ (8000868 <HAL_UART_MspInit+0x8c>)
 8000848:	f000 fa6c 	bl	8000d24 <HAL_GPIO_Init>

	// 3. Enable IRQ and setup interrupt (NVIC Settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800084c:	2026      	movs	r0, #38	@ 0x26
 800084e:	f000 fa24 	bl	8000c9a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	210f      	movs	r1, #15
 8000856:	2026      	movs	r0, #38	@ 0x26
 8000858:	f000 fa03 	bl	8000c62 <HAL_NVIC_SetPriority>

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim){
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
		   * 1. Enable Timer2 Clock
		   * 2. Configuring a GPIO to behave as Timer2 Channel 1
		   * 3.	NVIC Settings*/
		GPIO_InitTypeDef timer2_Channel1;
		// 1. Enable Timer2 Clock
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <HAL_TIM_PWM_MspInit+0x94>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a20      	ldr	r2, [pc, #128]	@ (8000900 <HAL_TIM_PWM_MspInit+0x94>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <HAL_TIM_PWM_MspInit+0x94>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <HAL_TIM_PWM_MspInit+0x94>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	4a19      	ldr	r2, [pc, #100]	@ (8000900 <HAL_TIM_PWM_MspInit+0x94>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <HAL_TIM_PWM_MspInit+0x94>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HAL_TIM_PWM_MspInit+0x94>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b4:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <HAL_TIM_PWM_MspInit+0x94>)
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80008bc:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <HAL_TIM_PWM_MspInit+0x94>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
		 * PA1---> TIM_CHANNEL2
		 * PB10---> TIM_CHANNEL3
		 * PB11---> TIM_CHANNEL4*/

		// PA0---> TIM_CHANNEL1 and PA1---> TIM_CHANNEL2
		timer2_Channel1.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80008c8:	2303      	movs	r3, #3
 80008ca:	617b      	str	r3, [r7, #20]
		timer2_Channel1.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61bb      	str	r3, [r7, #24]
		timer2_Channel1.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
		timer2_Channel1.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
		timer2_Channel1.Alternate = GPIO_AF1_TIM2;
 80008d8:	2301      	movs	r3, #1
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &timer2_Channel1);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4808      	ldr	r0, [pc, #32]	@ (8000904 <HAL_TIM_PWM_MspInit+0x98>)
 80008e4:	f000 fa1e 	bl	8000d24 <HAL_GPIO_Init>


		// NVIC Settings
		HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	210f      	movs	r1, #15
 80008ec:	201c      	movs	r0, #28
 80008ee:	f000 f9b8 	bl	8000c62 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008f2:	201c      	movs	r0, #28
 80008f4:	f000 f9d1 	bl	8000c9a <HAL_NVIC_EnableIRQ>
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	@ 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000930:	f7ff ffea 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	@ (800096c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	@ (8000978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f002 f875 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fdab 	bl	80004b8 <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000970:	08002ad0 	.word	0x08002ad0
  ldr r2, =_sbss
 8000974:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000978:	200000d4 	.word	0x200000d4

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <HAL_Init+0x40>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800098e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <HAL_Init+0x40>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_Init+0x40>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f94f 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fef0 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f967 	bl	8000cb6 <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f92f 	bl	8000c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	@ (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	@ (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	200000d0 	.word	0x200000d0

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200000d0 	.word	0x200000d0

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff ffee 	bl	8000a4c <HAL_GetTick>
 8000a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d005      	beq.n	8000a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <HAL_Delay+0x44>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a8a:	bf00      	nop
 8000a8c:	f7ff ffde 	bl	8000a4c <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8f7      	bhi.n	8000a8c <HAL_Delay+0x28>
  {
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	@ (8000b48 <__NVIC_EnableIRQ+0x38>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	@ (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	@ (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	@ 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	@ 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c18:	d301      	bcc.n	8000c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <SysTick_Config+0x40>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c26:	210f      	movs	r1, #15
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f7ff ff8e 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <SysTick_Config+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <SysTick_Config+0x40>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff29 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff3e 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff8e 	bl	8000ba0 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff31 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa2 	bl	8000c08 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d106      	bne.n	8000cec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000cea:	e005      	b.n	8000cf8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cf2:	f023 0304 	bic.w	r3, r3, #4
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d0c:	f000 f802 	bl	8000d14 <HAL_SYSTICK_Callback>
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e16b      	b.n	8001018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 815a 	bne.w	8001012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d005      	beq.n	8000d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d130      	bne.n	8000dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d017      	beq.n	8000e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d123      	bne.n	8000e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	69b9      	ldr	r1, [r7, #24]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80b4 	beq.w	8001012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b60      	ldr	r3, [pc, #384]	@ (8001030 <HAL_GPIO_Init+0x30c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001030 <HAL_GPIO_Init+0x30c>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b5d      	ldr	r3, [pc, #372]	@ (8001030 <HAL_GPIO_Init+0x30c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec6:	4a5b      	ldr	r2, [pc, #364]	@ (8001034 <HAL_GPIO_Init+0x310>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a52      	ldr	r2, [pc, #328]	@ (8001038 <HAL_GPIO_Init+0x314>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d02b      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a51      	ldr	r2, [pc, #324]	@ (800103c <HAL_GPIO_Init+0x318>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x222>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a50      	ldr	r2, [pc, #320]	@ (8001040 <HAL_GPIO_Init+0x31c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x21e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4f      	ldr	r2, [pc, #316]	@ (8001044 <HAL_GPIO_Init+0x320>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x21a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001048 <HAL_GPIO_Init+0x324>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x216>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4d      	ldr	r2, [pc, #308]	@ (800104c <HAL_GPIO_Init+0x328>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x212>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001050 <HAL_GPIO_Init+0x32c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x20e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4b      	ldr	r2, [pc, #300]	@ (8001054 <HAL_GPIO_Init+0x330>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x20a>
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	e00e      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f2e:	2308      	movs	r3, #8
 8000f30:	e00c      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e00a      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4935      	ldr	r1, [pc, #212]	@ (8001034 <HAL_GPIO_Init+0x310>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001058 <HAL_GPIO_Init+0x334>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8e:	4a32      	ldr	r2, [pc, #200]	@ (8001058 <HAL_GPIO_Init+0x334>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f94:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <HAL_GPIO_Init+0x334>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb8:	4a27      	ldr	r2, [pc, #156]	@ (8001058 <HAL_GPIO_Init+0x334>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <HAL_GPIO_Init+0x334>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8001058 <HAL_GPIO_Init+0x334>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <HAL_GPIO_Init+0x334>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800100c:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <HAL_GPIO_Init+0x334>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f ae90 	bls.w	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40013800 	.word	0x40013800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40021000 	.word	0x40021000
 800104c:	40021400 	.word	0x40021400
 8001050:	40021800 	.word	0x40021800
 8001054:	40021c00 	.word	0x40021c00
 8001058:	40013c00 	.word	0x40013c00

0800105c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e267      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d075      	beq.n	8001166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107a:	4b88      	ldr	r3, [pc, #544]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b04      	cmp	r3, #4
 8001084:	d00c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001086:	4b85      	ldr	r3, [pc, #532]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	2b08      	cmp	r3, #8
 8001090:	d112      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b82      	ldr	r3, [pc, #520]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800109a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800109e:	d10b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4b7e      	ldr	r3, [pc, #504]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d05b      	beq.n	8001164 <HAL_RCC_OscConfig+0x108>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d157      	bne.n	8001164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e242      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x74>
 80010c2:	4b76      	ldr	r3, [pc, #472]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a75      	ldr	r2, [pc, #468]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e01d      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x98>
 80010da:	4b70      	ldr	r3, [pc, #448]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6f      	ldr	r2, [pc, #444]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b6d      	ldr	r3, [pc, #436]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6c      	ldr	r2, [pc, #432]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010f4:	4b69      	ldr	r3, [pc, #420]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a68      	ldr	r2, [pc, #416]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b66      	ldr	r3, [pc, #408]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a65      	ldr	r2, [pc, #404]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800110a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fc9a 	bl	8000a4c <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fc96 	bl	8000a4c <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	@ 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e207      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0xc0>
 800113a:	e014      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fc86 	bl	8000a4c <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fc82 	bl	8000a4c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	@ 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1f3      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	4b51      	ldr	r3, [pc, #324]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0xe8>
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d063      	beq.n	800123a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001172:	4b4a      	ldr	r3, [pc, #296]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117e:	4b47      	ldr	r3, [pc, #284]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	2b08      	cmp	r3, #8
 8001188:	d11c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b44      	ldr	r3, [pc, #272]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d116      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	4b41      	ldr	r3, [pc, #260]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e1c7      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b3b      	ldr	r3, [pc, #236]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4937      	ldr	r1, [pc, #220]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	e03a      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011cc:	4b34      	ldr	r3, [pc, #208]	@ (80012a0 <HAL_RCC_OscConfig+0x244>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff fc3b 	bl	8000a4c <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fc37 	bl	8000a4c <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e1a8      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b28      	ldr	r3, [pc, #160]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4925      	ldr	r1, [pc, #148]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_RCC_OscConfig+0x244>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fc1a 	bl	8000a4c <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fc16 	bl	8000a4c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e187      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d036      	beq.n	80012b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_RCC_OscConfig+0x248>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fbfa 	bl	8000a4c <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fbf6 	bl	8000a4c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e167      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x200>
 800127a:	e01b      	b.n	80012b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_RCC_OscConfig+0x248>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fbe3 	bl	8000a4c <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e00e      	b.n	80012a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fbdf 	bl	8000a4c <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d907      	bls.n	80012a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e150      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
 800129c:	40023800 	.word	0x40023800
 80012a0:	42470000 	.word	0x42470000
 80012a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a8:	4b88      	ldr	r3, [pc, #544]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1ea      	bne.n	800128a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8097 	beq.w	80013f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c6:	4b81      	ldr	r3, [pc, #516]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10f      	bne.n	80012f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b7d      	ldr	r3, [pc, #500]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a7c      	ldr	r2, [pc, #496]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b7a      	ldr	r3, [pc, #488]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ee:	2301      	movs	r3, #1
 80012f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f2:	4b77      	ldr	r3, [pc, #476]	@ (80014d0 <HAL_RCC_OscConfig+0x474>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d118      	bne.n	8001330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fe:	4b74      	ldr	r3, [pc, #464]	@ (80014d0 <HAL_RCC_OscConfig+0x474>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a73      	ldr	r2, [pc, #460]	@ (80014d0 <HAL_RCC_OscConfig+0x474>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130a:	f7ff fb9f 	bl	8000a4c <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001312:	f7ff fb9b 	bl	8000a4c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e10c      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	4b6a      	ldr	r3, [pc, #424]	@ (80014d0 <HAL_RCC_OscConfig+0x474>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x2ea>
 8001338:	4b64      	ldr	r3, [pc, #400]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800133a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800133c:	4a63      	ldr	r2, [pc, #396]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6713      	str	r3, [r2, #112]	@ 0x70
 8001344:	e01c      	b.n	8001380 <HAL_RCC_OscConfig+0x324>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x30c>
 800134e:	4b5f      	ldr	r3, [pc, #380]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001352:	4a5e      	ldr	r2, [pc, #376]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6713      	str	r3, [r2, #112]	@ 0x70
 800135a:	4b5c      	ldr	r3, [pc, #368]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135e:	4a5b      	ldr	r2, [pc, #364]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6713      	str	r3, [r2, #112]	@ 0x70
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0x324>
 8001368:	4b58      	ldr	r3, [pc, #352]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136c:	4a57      	ldr	r2, [pc, #348]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6713      	str	r3, [r2, #112]	@ 0x70
 8001374:	4b55      	ldr	r3, [pc, #340]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001378:	4a54      	ldr	r2, [pc, #336]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800137a:	f023 0304 	bic.w	r3, r3, #4
 800137e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d015      	beq.n	80013b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001388:	f7ff fb60 	bl	8000a4c <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001390:	f7ff fb5c 	bl	8000a4c <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e0cb      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a6:	4b49      	ldr	r3, [pc, #292]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0ee      	beq.n	8001390 <HAL_RCC_OscConfig+0x334>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7ff fb4a 	bl	8000a4c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb46 	bl	8000a4c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e0b5      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d2:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1ee      	bne.n	80013bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e4:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	4a38      	ldr	r2, [pc, #224]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80a1 	beq.w	800153c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b08      	cmp	r3, #8
 8001404:	d05c      	beq.n	80014c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d141      	bne.n	8001492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <HAL_RCC_OscConfig+0x478>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fb1a 	bl	8000a4c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff fb16 	bl	8000a4c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e087      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69da      	ldr	r2, [r3, #28]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	3b01      	subs	r3, #1
 8001454:	041b      	lsls	r3, r3, #16
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145c:	061b      	lsls	r3, r3, #24
 800145e:	491b      	ldr	r1, [pc, #108]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <HAL_RCC_OscConfig+0x478>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff faef 	bl	8000a4c <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff faeb 	bl	8000a4c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e05c      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x416>
 8001490:	e054      	b.n	800153c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_RCC_OscConfig+0x478>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fad8 	bl	8000a4c <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fad4 	bl	8000a4c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e045      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x444>
 80014be:	e03d      	b.n	800153c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d107      	bne.n	80014d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e038      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000
 80014d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_RCC_OscConfig+0x4ec>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d028      	beq.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d121      	bne.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d11a      	bne.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001508:	4013      	ands	r3, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800150e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001510:	4293      	cmp	r3, r2
 8001512:	d111      	bne.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	3b01      	subs	r3, #1
 8001522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001524:	429a      	cmp	r2, r3
 8001526:	d107      	bne.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0cc      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b68      	ldr	r3, [pc, #416]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d90c      	bls.n	8001588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b65      	ldr	r3, [pc, #404]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b63      	ldr	r3, [pc, #396]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0b8      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a0:	4b59      	ldr	r3, [pc, #356]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a58      	ldr	r2, [pc, #352]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b8:	4b53      	ldr	r3, [pc, #332]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a52      	ldr	r2, [pc, #328]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	494d      	ldr	r1, [pc, #308]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d044      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b47      	ldr	r3, [pc, #284]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d119      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e07f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d003      	beq.n	800160a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	2b03      	cmp	r3, #3
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e067      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4934      	ldr	r1, [pc, #208]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff fa06 	bl	8000a4c <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff fa02 	bl	8000a4c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e04f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d20c      	bcs.n	8001694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e032      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4916      	ldr	r1, [pc, #88]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	490e      	ldr	r1, [pc, #56]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d2:	f000 f821 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	490a      	ldr	r1, [pc, #40]	@ (800170c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	5ccb      	ldrb	r3, [r1, r3]
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f966 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00
 8001708:	40023800 	.word	0x40023800
 800170c:	08002aa8 	.word	0x08002aa8
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b094      	sub	sp, #80	@ 0x50
 800171e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	647b      	str	r3, [r7, #68]	@ 0x44
 8001724:	2300      	movs	r3, #0
 8001726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001728:	2300      	movs	r3, #0
 800172a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001730:	4b79      	ldr	r3, [pc, #484]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d00d      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x40>
 800173c:	2b08      	cmp	r3, #8
 800173e:	f200 80e1 	bhi.w	8001904 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x34>
 8001746:	2b04      	cmp	r3, #4
 8001748:	d003      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x3a>
 800174a:	e0db      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b73      	ldr	r3, [pc, #460]	@ (800191c <HAL_RCC_GetSysClockFreq+0x204>)
 800174e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001750:	e0db      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001752:	4b73      	ldr	r3, [pc, #460]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x208>)
 8001754:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001756:	e0d8      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001758:	4b6f      	ldr	r3, [pc, #444]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001760:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001762:	4b6d      	ldr	r3, [pc, #436]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d063      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176e:	4b6a      	ldr	r3, [pc, #424]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	099b      	lsrs	r3, r3, #6
 8001774:	2200      	movs	r2, #0
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001778:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800177a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800177c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001780:	633b      	str	r3, [r7, #48]	@ 0x30
 8001782:	2300      	movs	r3, #0
 8001784:	637b      	str	r3, [r7, #52]	@ 0x34
 8001786:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800178a:	4622      	mov	r2, r4
 800178c:	462b      	mov	r3, r5
 800178e:	f04f 0000 	mov.w	r0, #0
 8001792:	f04f 0100 	mov.w	r1, #0
 8001796:	0159      	lsls	r1, r3, #5
 8001798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800179c:	0150      	lsls	r0, r2, #5
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4621      	mov	r1, r4
 80017a4:	1a51      	subs	r1, r2, r1
 80017a6:	6139      	str	r1, [r7, #16]
 80017a8:	4629      	mov	r1, r5
 80017aa:	eb63 0301 	sbc.w	r3, r3, r1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017bc:	4659      	mov	r1, fp
 80017be:	018b      	lsls	r3, r1, #6
 80017c0:	4651      	mov	r1, sl
 80017c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017c6:	4651      	mov	r1, sl
 80017c8:	018a      	lsls	r2, r1, #6
 80017ca:	4651      	mov	r1, sl
 80017cc:	ebb2 0801 	subs.w	r8, r2, r1
 80017d0:	4659      	mov	r1, fp
 80017d2:	eb63 0901 	sbc.w	r9, r3, r1
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ea:	4690      	mov	r8, r2
 80017ec:	4699      	mov	r9, r3
 80017ee:	4623      	mov	r3, r4
 80017f0:	eb18 0303 	adds.w	r3, r8, r3
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	462b      	mov	r3, r5
 80017f8:	eb49 0303 	adc.w	r3, r9, r3
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800180a:	4629      	mov	r1, r5
 800180c:	024b      	lsls	r3, r1, #9
 800180e:	4621      	mov	r1, r4
 8001810:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001814:	4621      	mov	r1, r4
 8001816:	024a      	lsls	r2, r1, #9
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800181e:	2200      	movs	r2, #0
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001828:	f7fe fcce 	bl	80001c8 <__aeabi_uldivmod>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4613      	mov	r3, r2
 8001832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001834:	e058      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001836:	4b38      	ldr	r3, [pc, #224]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	2200      	movs	r2, #0
 800183e:	4618      	mov	r0, r3
 8001840:	4611      	mov	r1, r2
 8001842:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
 800184c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001850:	4642      	mov	r2, r8
 8001852:	464b      	mov	r3, r9
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	0159      	lsls	r1, r3, #5
 800185e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001862:	0150      	lsls	r0, r2, #5
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4641      	mov	r1, r8
 800186a:	ebb2 0a01 	subs.w	sl, r2, r1
 800186e:	4649      	mov	r1, r9
 8001870:	eb63 0b01 	sbc.w	fp, r3, r1
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001888:	ebb2 040a 	subs.w	r4, r2, sl
 800188c:	eb63 050b 	sbc.w	r5, r3, fp
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	00eb      	lsls	r3, r5, #3
 800189a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800189e:	00e2      	lsls	r2, r4, #3
 80018a0:	4614      	mov	r4, r2
 80018a2:	461d      	mov	r5, r3
 80018a4:	4643      	mov	r3, r8
 80018a6:	18e3      	adds	r3, r4, r3
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	464b      	mov	r3, r9
 80018ac:	eb45 0303 	adc.w	r3, r5, r3
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018be:	4629      	mov	r1, r5
 80018c0:	028b      	lsls	r3, r1, #10
 80018c2:	4621      	mov	r1, r4
 80018c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c8:	4621      	mov	r1, r4
 80018ca:	028a      	lsls	r2, r1, #10
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018d2:	2200      	movs	r2, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	61fa      	str	r2, [r7, #28]
 80018d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018dc:	f7fe fc74 	bl	80001c8 <__aeabi_uldivmod>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4613      	mov	r3, r2
 80018e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	3301      	adds	r3, #1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80018f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001902:	e002      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_RCC_GetSysClockFreq+0x204>)
 8001906:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800190c:	4618      	mov	r0, r3
 800190e:	3750      	adds	r7, #80	@ 0x50
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	00f42400 	.word	0x00f42400
 8001920:	007a1200 	.word	0x007a1200

08001924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <HAL_RCC_GetHCLKFreq+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000

0800193c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001940:	f7ff fff0 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	0a9b      	lsrs	r3, r3, #10
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	4903      	ldr	r1, [pc, #12]	@ (8001960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001952:	5ccb      	ldrb	r3, [r1, r3]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	08002ab8 	.word	0x08002ab8

08001964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001968:	f7ff ffdc 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0b5b      	lsrs	r3, r3, #13
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4903      	ldr	r1, [pc, #12]	@ (8001988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	08002ab8 	.word	0x08002ab8

0800198c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e041      	b.n	8001a22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe ff5a 	bl	800086c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f000 fada 	bl	8001f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_TIM_PWM_Start+0x24>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	e022      	b.n	8001a96 <HAL_TIM_PWM_Start+0x6a>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d109      	bne.n	8001a6a <HAL_TIM_PWM_Start+0x3e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	bf14      	ite	ne
 8001a62:	2301      	movne	r3, #1
 8001a64:	2300      	moveq	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	e015      	b.n	8001a96 <HAL_TIM_PWM_Start+0x6a>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d109      	bne.n	8001a84 <HAL_TIM_PWM_Start+0x58>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	bf14      	ite	ne
 8001a7c:	2301      	movne	r3, #1
 8001a7e:	2300      	moveq	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e008      	b.n	8001a96 <HAL_TIM_PWM_Start+0x6a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07c      	b.n	8001b98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d104      	bne.n	8001aae <HAL_TIM_PWM_Start+0x82>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aac:	e013      	b.n	8001ad6 <HAL_TIM_PWM_Start+0xaa>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d104      	bne.n	8001abe <HAL_TIM_PWM_Start+0x92>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001abc:	e00b      	b.n	8001ad6 <HAL_TIM_PWM_Start+0xaa>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d104      	bne.n	8001ace <HAL_TIM_PWM_Start+0xa2>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001acc:	e003      	b.n	8001ad6 <HAL_TIM_PWM_Start+0xaa>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2201      	movs	r2, #1
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fcac 	bl	800243c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba0 <HAL_TIM_PWM_Start+0x174>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_TIM_PWM_Start+0xcc>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a2c      	ldr	r2, [pc, #176]	@ (8001ba4 <HAL_TIM_PWM_Start+0x178>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_TIM_PWM_Start+0xd0>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_TIM_PWM_Start+0xd2>
 8001afc:	2300      	movs	r3, #0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a22      	ldr	r2, [pc, #136]	@ (8001ba0 <HAL_TIM_PWM_Start+0x174>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d022      	beq.n	8001b62 <HAL_TIM_PWM_Start+0x136>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b24:	d01d      	beq.n	8001b62 <HAL_TIM_PWM_Start+0x136>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba8 <HAL_TIM_PWM_Start+0x17c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d018      	beq.n	8001b62 <HAL_TIM_PWM_Start+0x136>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	@ (8001bac <HAL_TIM_PWM_Start+0x180>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_TIM_PWM_Start+0x136>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb0 <HAL_TIM_PWM_Start+0x184>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00e      	beq.n	8001b62 <HAL_TIM_PWM_Start+0x136>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a16      	ldr	r2, [pc, #88]	@ (8001ba4 <HAL_TIM_PWM_Start+0x178>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d009      	beq.n	8001b62 <HAL_TIM_PWM_Start+0x136>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <HAL_TIM_PWM_Start+0x188>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d004      	beq.n	8001b62 <HAL_TIM_PWM_Start+0x136>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a16      	ldr	r2, [pc, #88]	@ (8001bb8 <HAL_TIM_PWM_Start+0x18c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d111      	bne.n	8001b86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b06      	cmp	r3, #6
 8001b72:	d010      	beq.n	8001b96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b84:	e007      	b.n	8001b96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40010400 	.word	0x40010400
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40000800 	.word	0x40000800
 8001bb0:	40000c00 	.word	0x40000c00
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40001800 	.word	0x40001800

08001bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d020      	beq.n	8001c20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0202 	mvn.w	r2, #2
 8001bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f99e 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f990 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f9a1 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d020      	beq.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01b      	beq.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0204 	mvn.w	r2, #4
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f978 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f96a 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f97b 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d020      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01b      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0208 	mvn.w	r2, #8
 8001c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f952 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f944 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f955 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d020      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01b      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0210 	mvn.w	r2, #16
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2208      	movs	r2, #8
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f92c 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f91e 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f92f 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0201 	mvn.w	r2, #1
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8fc 	bl	8001f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fba7 	bl	800249a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f900 	bl	8001f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00c      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0220 	mvn.w	r2, #32
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fb79 	bl	8002486 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e0ae      	b.n	8001f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	f200 809f 	bhi.w	8001f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001dca:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001e05 	.word	0x08001e05
 8001dd4:	08001f09 	.word	0x08001f09
 8001dd8:	08001f09 	.word	0x08001f09
 8001ddc:	08001f09 	.word	0x08001f09
 8001de0:	08001e45 	.word	0x08001e45
 8001de4:	08001f09 	.word	0x08001f09
 8001de8:	08001f09 	.word	0x08001f09
 8001dec:	08001f09 	.word	0x08001f09
 8001df0:	08001e87 	.word	0x08001e87
 8001df4:	08001f09 	.word	0x08001f09
 8001df8:	08001f09 	.word	0x08001f09
 8001dfc:	08001f09 	.word	0x08001f09
 8001e00:	08001ec7 	.word	0x08001ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f966 	bl	80020dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0208 	orr.w	r2, r2, #8
 8001e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0204 	bic.w	r2, r2, #4
 8001e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6999      	ldr	r1, [r3, #24]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	619a      	str	r2, [r3, #24]
      break;
 8001e42:	e064      	b.n	8001f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f9b6 	bl	80021bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6999      	ldr	r1, [r3, #24]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	021a      	lsls	r2, r3, #8
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	619a      	str	r2, [r3, #24]
      break;
 8001e84:	e043      	b.n	8001f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fa0b 	bl	80022a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0208 	orr.w	r2, r2, #8
 8001ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0204 	bic.w	r2, r2, #4
 8001eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69d9      	ldr	r1, [r3, #28]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	61da      	str	r2, [r3, #28]
      break;
 8001ec4:	e023      	b.n	8001f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fa5f 	bl	8002390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69d9      	ldr	r1, [r3, #28]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	021a      	lsls	r2, r3, #8
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	61da      	str	r2, [r3, #28]
      break;
 8001f06:	e002      	b.n	8001f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8001f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a46      	ldr	r2, [pc, #280]	@ (80020b0 <TIM_Base_SetConfig+0x12c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa2:	d00f      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a43      	ldr	r2, [pc, #268]	@ (80020b4 <TIM_Base_SetConfig+0x130>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00b      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a42      	ldr	r2, [pc, #264]	@ (80020b8 <TIM_Base_SetConfig+0x134>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a41      	ldr	r2, [pc, #260]	@ (80020bc <TIM_Base_SetConfig+0x138>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	@ (80020c0 <TIM_Base_SetConfig+0x13c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d108      	bne.n	8001fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a35      	ldr	r2, [pc, #212]	@ (80020b0 <TIM_Base_SetConfig+0x12c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe4:	d027      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a32      	ldr	r2, [pc, #200]	@ (80020b4 <TIM_Base_SetConfig+0x130>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d023      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a31      	ldr	r2, [pc, #196]	@ (80020b8 <TIM_Base_SetConfig+0x134>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a30      	ldr	r2, [pc, #192]	@ (80020bc <TIM_Base_SetConfig+0x138>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2f      	ldr	r2, [pc, #188]	@ (80020c0 <TIM_Base_SetConfig+0x13c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d017      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a2e      	ldr	r2, [pc, #184]	@ (80020c4 <TIM_Base_SetConfig+0x140>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2d      	ldr	r2, [pc, #180]	@ (80020c8 <TIM_Base_SetConfig+0x144>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2c      	ldr	r2, [pc, #176]	@ (80020cc <TIM_Base_SetConfig+0x148>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2b      	ldr	r2, [pc, #172]	@ (80020d0 <TIM_Base_SetConfig+0x14c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2a      	ldr	r2, [pc, #168]	@ (80020d4 <TIM_Base_SetConfig+0x150>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a29      	ldr	r2, [pc, #164]	@ (80020d8 <TIM_Base_SetConfig+0x154>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d108      	bne.n	8002048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800203c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a10      	ldr	r2, [pc, #64]	@ (80020b0 <TIM_Base_SetConfig+0x12c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0xf8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <TIM_Base_SetConfig+0x13c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d103      	bne.n	8002084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f023 0201 	bic.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]
  }
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40010400 	.word	0x40010400
 80020c4:	40014000 	.word	0x40014000
 80020c8:	40014400 	.word	0x40014400
 80020cc:	40014800 	.word	0x40014800
 80020d0:	40001800 	.word	0x40001800
 80020d4:	40001c00 	.word	0x40001c00
 80020d8:	40002000 	.word	0x40002000

080020dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f023 0201 	bic.w	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800210a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f023 0302 	bic.w	r3, r3, #2
 8002124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a20      	ldr	r2, [pc, #128]	@ (80021b4 <TIM_OC1_SetConfig+0xd8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_OC1_SetConfig+0x64>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <TIM_OC1_SetConfig+0xdc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10c      	bne.n	800215a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0308 	bic.w	r3, r3, #8
 8002146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a15      	ldr	r2, [pc, #84]	@ (80021b4 <TIM_OC1_SetConfig+0xd8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d003      	beq.n	800216a <TIM_OC1_SetConfig+0x8e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <TIM_OC1_SetConfig+0xdc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d111      	bne.n	800218e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	621a      	str	r2, [r3, #32]
}
 80021a8:	bf00      	nop
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40010400 	.word	0x40010400

080021bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f023 0210 	bic.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f023 0320 	bic.w	r3, r3, #32
 8002206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a22      	ldr	r2, [pc, #136]	@ (80022a0 <TIM_OC2_SetConfig+0xe4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_OC2_SetConfig+0x68>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a21      	ldr	r2, [pc, #132]	@ (80022a4 <TIM_OC2_SetConfig+0xe8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10d      	bne.n	8002240 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800222a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800223e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <TIM_OC2_SetConfig+0xe4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_OC2_SetConfig+0x94>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a16      	ldr	r2, [pc, #88]	@ (80022a4 <TIM_OC2_SetConfig+0xe8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d113      	bne.n	8002278 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800225e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	621a      	str	r2, [r3, #32]
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40010400 	.word	0x40010400

080022a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a21      	ldr	r2, [pc, #132]	@ (8002388 <TIM_OC3_SetConfig+0xe0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d003      	beq.n	800230e <TIM_OC3_SetConfig+0x66>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a20      	ldr	r2, [pc, #128]	@ (800238c <TIM_OC3_SetConfig+0xe4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10d      	bne.n	800232a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a16      	ldr	r2, [pc, #88]	@ (8002388 <TIM_OC3_SetConfig+0xe0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d003      	beq.n	800233a <TIM_OC3_SetConfig+0x92>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a15      	ldr	r2, [pc, #84]	@ (800238c <TIM_OC3_SetConfig+0xe4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d113      	bne.n	8002362 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	621a      	str	r2, [r3, #32]
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40010000 	.word	0x40010000
 800238c:	40010400 	.word	0x40010400

08002390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	031b      	lsls	r3, r3, #12
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a12      	ldr	r2, [pc, #72]	@ (8002434 <TIM_OC4_SetConfig+0xa4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d003      	beq.n	80023f8 <TIM_OC4_SetConfig+0x68>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <TIM_OC4_SetConfig+0xa8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d109      	bne.n	800240c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	621a      	str	r2, [r3, #32]
}
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40010000 	.word	0x40010000
 8002438:	40010400 	.word	0x40010400

0800243c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2201      	movs	r2, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	431a      	orrs	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	621a      	str	r2, [r3, #32]
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e042      	b.n	8002546 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7fe f981 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2224      	movs	r2, #36	@ 0x24
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f82c 	bl	8002550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002506:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002516:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002526:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002554:	b0c0      	sub	sp, #256	@ 0x100
 8002556:	af00      	add	r7, sp, #0
 8002558:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256c:	68d9      	ldr	r1, [r3, #12]
 800256e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	ea40 0301 	orr.w	r3, r0, r1
 8002578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800257a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	431a      	orrs	r2, r3
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	431a      	orrs	r2, r3
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025a8:	f021 010c 	bic.w	r1, r1, #12
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025b6:	430b      	orrs	r3, r1
 80025b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ca:	6999      	ldr	r1, [r3, #24]
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	ea40 0301 	orr.w	r3, r0, r1
 80025d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b8f      	ldr	r3, [pc, #572]	@ (800281c <UART_SetConfig+0x2cc>)
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d005      	beq.n	80025f0 <UART_SetConfig+0xa0>
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002820 <UART_SetConfig+0x2d0>)
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d104      	bne.n	80025fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025f0:	f7ff f9b8 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 80025f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80025f8:	e003      	b.n	8002602 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025fa:	f7ff f99f 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 80025fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800260c:	f040 810c 	bne.w	8002828 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002614:	2200      	movs	r2, #0
 8002616:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800261a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800261e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002622:	4622      	mov	r2, r4
 8002624:	462b      	mov	r3, r5
 8002626:	1891      	adds	r1, r2, r2
 8002628:	65b9      	str	r1, [r7, #88]	@ 0x58
 800262a:	415b      	adcs	r3, r3
 800262c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800262e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002632:	4621      	mov	r1, r4
 8002634:	eb12 0801 	adds.w	r8, r2, r1
 8002638:	4629      	mov	r1, r5
 800263a:	eb43 0901 	adc.w	r9, r3, r1
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800264a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002652:	4690      	mov	r8, r2
 8002654:	4699      	mov	r9, r3
 8002656:	4623      	mov	r3, r4
 8002658:	eb18 0303 	adds.w	r3, r8, r3
 800265c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002660:	462b      	mov	r3, r5
 8002662:	eb49 0303 	adc.w	r3, r9, r3
 8002666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002676:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800267a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800267e:	460b      	mov	r3, r1
 8002680:	18db      	adds	r3, r3, r3
 8002682:	653b      	str	r3, [r7, #80]	@ 0x50
 8002684:	4613      	mov	r3, r2
 8002686:	eb42 0303 	adc.w	r3, r2, r3
 800268a:	657b      	str	r3, [r7, #84]	@ 0x54
 800268c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002690:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002694:	f7fd fd98 	bl	80001c8 <__aeabi_uldivmod>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4b61      	ldr	r3, [pc, #388]	@ (8002824 <UART_SetConfig+0x2d4>)
 800269e:	fba3 2302 	umull	r2, r3, r3, r2
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	011c      	lsls	r4, r3, #4
 80026a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026b8:	4642      	mov	r2, r8
 80026ba:	464b      	mov	r3, r9
 80026bc:	1891      	adds	r1, r2, r2
 80026be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026c0:	415b      	adcs	r3, r3
 80026c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026c8:	4641      	mov	r1, r8
 80026ca:	eb12 0a01 	adds.w	sl, r2, r1
 80026ce:	4649      	mov	r1, r9
 80026d0:	eb43 0b01 	adc.w	fp, r3, r1
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e8:	4692      	mov	sl, r2
 80026ea:	469b      	mov	fp, r3
 80026ec:	4643      	mov	r3, r8
 80026ee:	eb1a 0303 	adds.w	r3, sl, r3
 80026f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026f6:	464b      	mov	r3, r9
 80026f8:	eb4b 0303 	adc.w	r3, fp, r3
 80026fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800270c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002710:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002714:	460b      	mov	r3, r1
 8002716:	18db      	adds	r3, r3, r3
 8002718:	643b      	str	r3, [r7, #64]	@ 0x40
 800271a:	4613      	mov	r3, r2
 800271c:	eb42 0303 	adc.w	r3, r2, r3
 8002720:	647b      	str	r3, [r7, #68]	@ 0x44
 8002722:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800272a:	f7fd fd4d 	bl	80001c8 <__aeabi_uldivmod>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4611      	mov	r1, r2
 8002734:	4b3b      	ldr	r3, [pc, #236]	@ (8002824 <UART_SetConfig+0x2d4>)
 8002736:	fba3 2301 	umull	r2, r3, r3, r1
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2264      	movs	r2, #100	@ 0x64
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	1acb      	subs	r3, r1, r3
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800274a:	4b36      	ldr	r3, [pc, #216]	@ (8002824 <UART_SetConfig+0x2d4>)
 800274c:	fba3 2302 	umull	r2, r3, r3, r2
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002758:	441c      	add	r4, r3
 800275a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002764:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002768:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800276c:	4642      	mov	r2, r8
 800276e:	464b      	mov	r3, r9
 8002770:	1891      	adds	r1, r2, r2
 8002772:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002774:	415b      	adcs	r3, r3
 8002776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800277c:	4641      	mov	r1, r8
 800277e:	1851      	adds	r1, r2, r1
 8002780:	6339      	str	r1, [r7, #48]	@ 0x30
 8002782:	4649      	mov	r1, r9
 8002784:	414b      	adcs	r3, r1
 8002786:	637b      	str	r3, [r7, #52]	@ 0x34
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002794:	4659      	mov	r1, fp
 8002796:	00cb      	lsls	r3, r1, #3
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279e:	4651      	mov	r1, sl
 80027a0:	00ca      	lsls	r2, r1, #3
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	4642      	mov	r2, r8
 80027aa:	189b      	adds	r3, r3, r2
 80027ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027b0:	464b      	mov	r3, r9
 80027b2:	460a      	mov	r2, r1
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80027c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80027cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80027d0:	460b      	mov	r3, r1
 80027d2:	18db      	adds	r3, r3, r3
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027d6:	4613      	mov	r3, r2
 80027d8:	eb42 0303 	adc.w	r3, r2, r3
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027e6:	f7fd fcef 	bl	80001c8 <__aeabi_uldivmod>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <UART_SetConfig+0x2d4>)
 80027f0:	fba3 1302 	umull	r1, r3, r3, r2
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	2164      	movs	r1, #100	@ 0x64
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	3332      	adds	r3, #50	@ 0x32
 8002802:	4a08      	ldr	r2, [pc, #32]	@ (8002824 <UART_SetConfig+0x2d4>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	f003 0207 	and.w	r2, r3, #7
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4422      	add	r2, r4
 8002816:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002818:	e106      	b.n	8002a28 <UART_SetConfig+0x4d8>
 800281a:	bf00      	nop
 800281c:	40011000 	.word	0x40011000
 8002820:	40011400 	.word	0x40011400
 8002824:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800282c:	2200      	movs	r2, #0
 800282e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002832:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002836:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800283a:	4642      	mov	r2, r8
 800283c:	464b      	mov	r3, r9
 800283e:	1891      	adds	r1, r2, r2
 8002840:	6239      	str	r1, [r7, #32]
 8002842:	415b      	adcs	r3, r3
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
 8002846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800284a:	4641      	mov	r1, r8
 800284c:	1854      	adds	r4, r2, r1
 800284e:	4649      	mov	r1, r9
 8002850:	eb43 0501 	adc.w	r5, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	00eb      	lsls	r3, r5, #3
 800285e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002862:	00e2      	lsls	r2, r4, #3
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4643      	mov	r3, r8
 800286a:	18e3      	adds	r3, r4, r3
 800286c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002870:	464b      	mov	r3, r9
 8002872:	eb45 0303 	adc.w	r3, r5, r3
 8002876:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800287a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002886:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002896:	4629      	mov	r1, r5
 8002898:	008b      	lsls	r3, r1, #2
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028a0:	4621      	mov	r1, r4
 80028a2:	008a      	lsls	r2, r1, #2
 80028a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028a8:	f7fd fc8e 	bl	80001c8 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4b60      	ldr	r3, [pc, #384]	@ (8002a34 <UART_SetConfig+0x4e4>)
 80028b2:	fba3 2302 	umull	r2, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	011c      	lsls	r4, r3, #4
 80028ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80028cc:	4642      	mov	r2, r8
 80028ce:	464b      	mov	r3, r9
 80028d0:	1891      	adds	r1, r2, r2
 80028d2:	61b9      	str	r1, [r7, #24]
 80028d4:	415b      	adcs	r3, r3
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028dc:	4641      	mov	r1, r8
 80028de:	1851      	adds	r1, r2, r1
 80028e0:	6139      	str	r1, [r7, #16]
 80028e2:	4649      	mov	r1, r9
 80028e4:	414b      	adcs	r3, r1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f4:	4659      	mov	r1, fp
 80028f6:	00cb      	lsls	r3, r1, #3
 80028f8:	4651      	mov	r1, sl
 80028fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fe:	4651      	mov	r1, sl
 8002900:	00ca      	lsls	r2, r1, #3
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	4603      	mov	r3, r0
 8002908:	4642      	mov	r2, r8
 800290a:	189b      	adds	r3, r3, r2
 800290c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002910:	464b      	mov	r3, r9
 8002912:	460a      	mov	r2, r1
 8002914:	eb42 0303 	adc.w	r3, r2, r3
 8002918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002926:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002934:	4649      	mov	r1, r9
 8002936:	008b      	lsls	r3, r1, #2
 8002938:	4641      	mov	r1, r8
 800293a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800293e:	4641      	mov	r1, r8
 8002940:	008a      	lsls	r2, r1, #2
 8002942:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002946:	f7fd fc3f 	bl	80001c8 <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4611      	mov	r1, r2
 8002950:	4b38      	ldr	r3, [pc, #224]	@ (8002a34 <UART_SetConfig+0x4e4>)
 8002952:	fba3 2301 	umull	r2, r3, r3, r1
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2264      	movs	r2, #100	@ 0x64
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	1acb      	subs	r3, r1, r3
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	3332      	adds	r3, #50	@ 0x32
 8002964:	4a33      	ldr	r2, [pc, #204]	@ (8002a34 <UART_SetConfig+0x4e4>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002970:	441c      	add	r4, r3
 8002972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002976:	2200      	movs	r2, #0
 8002978:	673b      	str	r3, [r7, #112]	@ 0x70
 800297a:	677a      	str	r2, [r7, #116]	@ 0x74
 800297c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	1891      	adds	r1, r2, r2
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	415b      	adcs	r3, r3
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002990:	4641      	mov	r1, r8
 8002992:	1851      	adds	r1, r2, r1
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	4649      	mov	r1, r9
 8002998:	414b      	adcs	r3, r1
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029a8:	4659      	mov	r1, fp
 80029aa:	00cb      	lsls	r3, r1, #3
 80029ac:	4651      	mov	r1, sl
 80029ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b2:	4651      	mov	r1, sl
 80029b4:	00ca      	lsls	r2, r1, #3
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	4642      	mov	r2, r8
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029c2:	464b      	mov	r3, r9
 80029c4:	460a      	mov	r2, r1
 80029c6:	eb42 0303 	adc.w	r3, r2, r3
 80029ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80029d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029e4:	4649      	mov	r1, r9
 80029e6:	008b      	lsls	r3, r1, #2
 80029e8:	4641      	mov	r1, r8
 80029ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ee:	4641      	mov	r1, r8
 80029f0:	008a      	lsls	r2, r1, #2
 80029f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029f6:	f7fd fbe7 	bl	80001c8 <__aeabi_uldivmod>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002a34 <UART_SetConfig+0x4e4>)
 8002a00:	fba3 1302 	umull	r1, r3, r3, r2
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	2164      	movs	r1, #100	@ 0x64
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	3332      	adds	r3, #50	@ 0x32
 8002a12:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <UART_SetConfig+0x4e4>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4422      	add	r2, r4
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a34:	51eb851f 	.word	0x51eb851f

08002a38 <memset>:
 8002a38:	4402      	add	r2, r0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	f803 1b01 	strb.w	r1, [r3], #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002a80 <__libc_init_array+0x38>)
 8002a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002a84 <__libc_init_array+0x3c>)
 8002a4e:	1b64      	subs	r4, r4, r5
 8002a50:	10a4      	asrs	r4, r4, #2
 8002a52:	2600      	movs	r6, #0
 8002a54:	42a6      	cmp	r6, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	4d0b      	ldr	r5, [pc, #44]	@ (8002a88 <__libc_init_array+0x40>)
 8002a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002a8c <__libc_init_array+0x44>)
 8002a5c:	f000 f818 	bl	8002a90 <_init>
 8002a60:	1b64      	subs	r4, r4, r5
 8002a62:	10a4      	asrs	r4, r4, #2
 8002a64:	2600      	movs	r6, #0
 8002a66:	42a6      	cmp	r6, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a70:	4798      	blx	r3
 8002a72:	3601      	adds	r6, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7a:	4798      	blx	r3
 8002a7c:	3601      	adds	r6, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	08002ac8 	.word	0x08002ac8
 8002a84:	08002ac8 	.word	0x08002ac8
 8002a88:	08002ac8 	.word	0x08002ac8
 8002a8c:	08002acc 	.word	0x08002acc

08002a90 <_init>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	bf00      	nop
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr

08002a9c <_fini>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr
