
TIMER_OUTPUT_CAPTURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006568  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080066f8  080066f8  000076f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ab0  08006ab0  000081e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006ab0  08006ab0  00007ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab8  08006ab8  000081e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab8  08006ab8  00007ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08006ac0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081e4  2**0
                  CONTENTS
 10 .bss          00000224  200001e4  200001e4  000081e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000408  20000408  000081e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca19  00000000  00000000  00008214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bca  00000000  00000000  00014c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  000167f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000969  00000000  00000000  00017400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ccb  00000000  00000000  00017d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e02b  00000000  00000000  00039a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccbd2  00000000  00000000  00047a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114631  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004418  00000000  00000000  00114674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00118a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066e0 	.word	0x080066e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080066e0 	.word	0x080066e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
uint32_t pulse2_value = 12500; // 1000Hz
uint32_t pulse3_value = 6250;  // 2000Hz
uint32_t pulse4_value = 3125;  // 4000Hz


int main(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0a4      	sub	sp, #144	@ 0x90
 8000e9c:	af00      	add	r7, sp, #0

	uint32_t capture_difference = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	double timer2_cnt_freq = 0;
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double timer2_cnt_res  = 0;
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	double user_signal_time_period  = 0;
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	double user_signal_freq  = 0;
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	char user_msg[100];

 	HAL_Init();
 8000ed4:	f000 fbe8 	bl	80016a8 <HAL_Init>

 	SystemClock_Config_HSE(HCLK_50MHZ);
 8000ed8:	2032      	movs	r0, #50	@ 0x32
 8000eda:	f000 f87d 	bl	8000fd8 <SystemClock_Config_HSE>

 	GPIO_Init();
 8000ede:	f000 f9af 	bl	8001240 <GPIO_Init>

 	UART2_Init();
 8000ee2:	f000 f9d7 	bl	8001294 <UART2_Init>

 	Timer2_Init();
 8000ee6:	f000 f947 	bl	8001178 <Timer2_Init>

 	LSE_Configuration();
 8000eea:	f000 f905 	bl	80010f8 <LSE_Configuration>



 	// Start timer Interrupt
 	HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_1);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4833      	ldr	r0, [pc, #204]	@ (8000fc0 <main+0x128>)
 8000ef2:	f001 fc73 	bl	80027dc <HAL_TIM_IC_Start_IT>

 	while(1){
 		if (capture_done) {
 8000ef6:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <main+0x12c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0fb      	beq.n	8000ef6 <main+0x5e>
 			if (input_capture[1] > input_capture[0]) {
 8000efe:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <main+0x130>)
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <main+0x130>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d907      	bls.n	8000f1a <main+0x82>
 				capture_difference = input_capture[1] - input_capture[0];
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <main+0x130>)
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <main+0x130>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f18:	e007      	b.n	8000f2a <main+0x92>
			}
 			else {
 				capture_difference = (0xFFFFFFFF - input_capture[0]) - input_capture[1];
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <main+0x130>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <main+0x130>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			}
 			timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2) / htimer2.Init.Prescaler + 1;
 8000f2a:	f001 fbdf 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	005a      	lsls	r2, r3, #1
 8000f32:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <main+0x128>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fae1 	bl	8000504 <__aeabi_ui2d>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 			timer2_cnt_res = 1 / timer2_cnt_freq;
 8000f4a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000f4e:	f04f 0000 	mov.w	r0, #0
 8000f52:	491e      	ldr	r1, [pc, #120]	@ (8000fcc <main+0x134>)
 8000f54:	f7ff fc7a 	bl	800084c <__aeabi_ddiv>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 			user_signal_time_period = capture_difference * timer2_cnt_res;
 8000f60:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000f64:	f7ff face 	bl	8000504 <__aeabi_ui2d>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000f70:	f7ff fb42 	bl	80005f8 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 			user_signal_freq = 1 / user_signal_time_period;
 8000f7c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000f80:	f04f 0000 	mov.w	r0, #0
 8000f84:	4911      	ldr	r1, [pc, #68]	@ (8000fcc <main+0x134>)
 8000f86:	f7ff fc61 	bl	800084c <__aeabi_ddiv>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

 			sprintf(user_msg, "Frequency of the signal applied = %f Hz\r\n", user_signal_freq);
 8000f92:	1d38      	adds	r0, r7, #4
 8000f94:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000f98:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <main+0x138>)
 8000f9a:	f003 fa75 	bl	8004488 <siprintf>
 			HAL_UART_Transmit(&huart2, (uint8_t*)user_msg, strlen(user_msg), HAL_MAX_DELAY);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f965 	bl	8000270 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	1d39      	adds	r1, r7, #4
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <main+0x13c>)
 8000fb2:	f002 f994 	bl	80032de <HAL_UART_Transmit>

 			capture_done = FALSE;
 8000fb6:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <main+0x12c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
 		if (capture_done) {
 8000fbc:	e79b      	b.n	8000ef6 <main+0x5e>
 8000fbe:	bf00      	nop
 8000fc0:	20000204 	.word	0x20000204
 8000fc4:	20000200 	.word	0x20000200
 8000fc8:	200002a8 	.word	0x200002a8
 8000fcc:	3ff00000 	.word	0x3ff00000
 8000fd0:	080066f8 	.word	0x080066f8
 8000fd4:	2000024c 	.word	0x2000024c

08000fd8 <SystemClock_Config_HSE>:
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}

void SystemClock_Config_HSE(uint8_t freq){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	@ 0x50
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	uint8_t FLatency = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	// Variable to configure RCC System, AHB and APB busses
	RCC_ClkInitTypeDef clk_init;


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE; // Clock source selected
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_BYPASS; // HSI is ON by default, you can ignore this step
 8000fec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ff0:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON; // Turn PLL ON
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	637b      	str	r3, [r7, #52]	@ 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE; // PLL Clock source
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38

	switch(freq){
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b78      	cmp	r3, #120	@ 0x78
 8001000:	d036      	beq.n	8001070 <SystemClock_Config_HSE+0x98>
 8001002:	2b78      	cmp	r3, #120	@ 0x78
 8001004:	dc71      	bgt.n	80010ea <SystemClock_Config_HSE+0x112>
 8001006:	2b32      	cmp	r3, #50	@ 0x32
 8001008:	d002      	beq.n	8001010 <SystemClock_Config_HSE+0x38>
 800100a:	2b54      	cmp	r3, #84	@ 0x54
 800100c:	d018      	beq.n	8001040 <SystemClock_Config_HSE+0x68>

			FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:{
			return;
 800100e:	e06c      	b.n	80010ea <SystemClock_Config_HSE+0x112>
			osc_init.PLL.PLLM = 8;
 8001010:	2308      	movs	r3, #8
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 100;
 8001014:	2364      	movs	r3, #100	@ 0x64
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLP = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLQ = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	@ 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001020:	230f      	movs	r3, #15
 8001022:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2302      	movs	r3, #2
 8001026:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800102c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001030:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001036:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_1WS;
 8001038:	2301      	movs	r3, #1
 800103a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 800103e:	e02f      	b.n	80010a0 <SystemClock_Config_HSE+0xc8>
			osc_init.PLL.PLLM = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 168;
 8001044:	23a8      	movs	r3, #168	@ 0xa8
 8001046:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLP = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLQ = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	@ 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001050:	230f      	movs	r3, #15
 8001052:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2302      	movs	r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800105c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001060:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001066:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_2WS;
 8001068:	2302      	movs	r3, #2
 800106a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 800106e:	e017      	b.n	80010a0 <SystemClock_Config_HSE+0xc8>
			osc_init.PLL.PLLM = 8;
 8001070:	2308      	movs	r3, #8
 8001072:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 240;
 8001074:	23f0      	movs	r3, #240	@ 0xf0
 8001076:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLP = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLQ = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	64bb      	str	r3, [r7, #72]	@ 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001080:	230f      	movs	r3, #15
 8001082:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2302      	movs	r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800108c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001090:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_3WS;
 8001098:	2303      	movs	r3, #3
 800109a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 800109e:	bf00      	nop
		}
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fe49 	bl	8001d3c <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config_HSE+0xdc>
		Error_handler();
 80010b0:	f000 f916 	bl	80012e0 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 80010b4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f8b4 	bl	800222c <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config_HSE+0xf6>
		Error_handler();
 80010ca:	f000 f909 	bl	80012e0 <Error_handler>
	}

	// Systick Configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010ce:	f001 fb01 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <SystemClock_Config_HSE+0x11c>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	099b      	lsrs	r3, r3, #6
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fc5a 	bl	8001996 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010e2:	2004      	movs	r0, #4
 80010e4:	f000 fc64 	bl	80019b0 <HAL_SYSTICK_CLKSourceConfig>
 80010e8:	e000      	b.n	80010ec <SystemClock_Config_HSE+0x114>
			return;
 80010ea:	bf00      	nop

}
 80010ec:	3750      	adds	r7, #80	@ 0x50
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	10624dd3 	.word	0x10624dd3

080010f8 <LSE_Configuration>:


void LSE_Configuration(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_handler();
	}

#endif
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_4);
 80010fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001100:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001104:	2000      	movs	r0, #0
 8001106:	f001 f977 	bl	80023f8 <HAL_RCC_MCOConfig>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    if (!capture_done) {
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d11e      	bne.n	800115e <HAL_TIM_IC_CaptureCallback+0x4e>
        if (count == 0) {
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10b      	bne.n	8001140 <HAL_TIM_IC_CaptureCallback+0x30>
            input_capture[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112e:	4a11      	ldr	r2, [pc, #68]	@ (8001174 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001130:	6013      	str	r3, [r2, #0]
            count++;
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 800113c:	701a      	strb	r2, [r3, #0]
            input_capture[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
            count = 0;
            capture_done = TRUE;
        }
    }
}
 800113e:	e00e      	b.n	800115e <HAL_TIM_IC_CaptureCallback+0x4e>
        } else if (count == 1) {
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d10a      	bne.n	800115e <HAL_TIM_IC_CaptureCallback+0x4e>
            input_capture[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001150:	6053      	str	r3, [r2, #4]
            count = 0;
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
            capture_done = TRUE;
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000200 	.word	0x20000200
 8001170:	200002b0 	.word	0x200002b0
 8001174:	200002a8 	.word	0x200002a8

08001178 <Timer2_Init>:


void Timer2_Init(void){
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
/********************* a) INITIALIZE HIGH LEVEL INITS FOR TIMER2 PERIPHERAL AND CHANNEL CONFIGURATION, PARAMETER INITIALIZATION *******************/

	// Initialize the Timer Output Compare Time Base
	htimer2.Instance = TIM2;
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <Timer2_Init+0xb4>)
 8001180:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001184:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b29      	ldr	r3, [pc, #164]	@ (800122c <Timer2_Init+0xb4>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
	htimer2.Init.Prescaler = 1;
 800118c:	4b27      	ldr	r3, [pc, #156]	@ (800122c <Timer2_Init+0xb4>)
 800118e:	2201      	movs	r2, #1
 8001190:	605a      	str	r2, [r3, #4]
	htimer2.Init.Period = 0xFFFFFFFF; // 32-bit
 8001192:	4b26      	ldr	r3, [pc, #152]	@ (800122c <Timer2_Init+0xb4>)
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_OC_Init(&htimer2) != HAL_OK){
 800119a:	4824      	ldr	r0, [pc, #144]	@ (800122c <Timer2_Init+0xb4>)
 800119c:	f001 face 	bl	800273c <HAL_TIM_OC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <Timer2_Init+0x32>
		Error_handler();
 80011a6:	f000 f89b 	bl	80012e0 <Error_handler>
	}

	// Configure Output Channel of the timer
	TIM_OC_InitTypeDef timer2_Config;
	timer2_Config.OCMode= TIM_OCMODE_TOGGLE;
 80011aa:	2330      	movs	r3, #48	@ 0x30
 80011ac:	607b      	str	r3, [r7, #4]
	timer2_Config.OCPolarity= TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
	timer2_Config.Pulse= pulse1_value;
 80011b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <Timer2_Init+0xb8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60bb      	str	r3, [r7, #8]

	// Channel 1
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &timer2_Config, TIM_CHANNEL_1) != HAL_OK){
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	481b      	ldr	r0, [pc, #108]	@ (800122c <Timer2_Init+0xb4>)
 80011c0:	f001 fd24 	bl	8002c0c <HAL_TIM_OC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <Timer2_Init+0x56>
		Error_handler();
 80011ca:	f000 f889 	bl	80012e0 <Error_handler>
	}

	// Channel 2
	timer2_Config.Pulse= pulse2_value;
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <Timer2_Init+0xbc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &timer2_Config, TIM_CHANNEL_2) != HAL_OK){
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2204      	movs	r2, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4814      	ldr	r0, [pc, #80]	@ (800122c <Timer2_Init+0xb4>)
 80011dc:	f001 fd16 	bl	8002c0c <HAL_TIM_OC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <Timer2_Init+0x72>
		Error_handler();
 80011e6:	f000 f87b 	bl	80012e0 <Error_handler>
	}

	// Channel 3
	timer2_Config.Pulse= pulse3_value;
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <Timer2_Init+0xc0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &timer2_Config, TIM_CHANNEL_3) != HAL_OK){
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2208      	movs	r2, #8
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	@ (800122c <Timer2_Init+0xb4>)
 80011f8:	f001 fd08 	bl	8002c0c <HAL_TIM_OC_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <Timer2_Init+0x8e>
		Error_handler();
 8001202:	f000 f86d 	bl	80012e0 <Error_handler>
	}

	// Channel 4
	timer2_Config.Pulse= pulse4_value;
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <Timer2_Init+0xc4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &timer2_Config, TIM_CHANNEL_4) != HAL_OK){
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	220c      	movs	r2, #12
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <Timer2_Init+0xb4>)
 8001214:	f001 fcfa 	bl	8002c0c <HAL_TIM_OC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <Timer2_Init+0xaa>
		Error_handler();
 800121e:	f000 f85f 	bl	80012e0 <Error_handler>
	}

}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000204 	.word	0x20000204
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004
 8001238:	20000008 	.word	0x20000008
 800123c:	2000000c 	.word	0x2000000c

08001240 <GPIO_Init>:


void GPIO_Init(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <GPIO_Init+0x48>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <GPIO_Init+0x48>)
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <GPIO_Init+0x48>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
	led.Pin = GPIO_PIN_12;
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <GPIO_Init+0x4c>)
 8001264:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001268:	601a      	str	r2, [r3, #0]
	led.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <GPIO_Init+0x4c>)
 800126c:	2201      	movs	r2, #1
 800126e:	605a      	str	r2, [r3, #4]
	led.Pull = GPIO_NOPULL;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <GPIO_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &led);
 8001276:	4905      	ldr	r1, [pc, #20]	@ (800128c <GPIO_Init+0x4c>)
 8001278:	4805      	ldr	r0, [pc, #20]	@ (8001290 <GPIO_Init+0x50>)
 800127a:	f000 fbc3 	bl	8001a04 <HAL_GPIO_Init>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	20000294 	.word	0x20000294
 8001290:	40020c00 	.word	0x40020c00

08001294 <UART2_Init>:

void UART2_Init(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
/********************* a) INITIALIZE HIGH LEVEL INITS FOR USART2 PERIPHERAL, PARAMETER INITIALIZATION *******************/
	// Handle variable linked with USART2
	huart2.Instance = USART2;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <UART2_Init+0x44>)
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <UART2_Init+0x48>)
 800129c:	601a      	str	r2, [r3, #0]

	//Parameter Initialization
	huart2.Init.BaudRate = 115200;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <UART2_Init+0x44>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <UART2_Init+0x44>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <UART2_Init+0x44>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <UART2_Init+0x44>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl =  UART_HWCONTROL_NONE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <UART2_Init+0x44>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <UART2_Init+0x44>)
 80012c0:	220c      	movs	r2, #12
 80012c2:	615a      	str	r2, [r3, #20]

	//Initialize UART with HAL API
	if(HAL_UART_Init(&huart2) != HAL_OK){
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <UART2_Init+0x44>)
 80012c6:	f001 ffba 	bl	800323e <HAL_UART_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <UART2_Init+0x40>
		// Something went wrong!
		Error_handler();
 80012d0:	f000 f806 	bl	80012e0 <Error_handler>
	}
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000024c 	.word	0x2000024c
 80012dc:	40004400 	.word	0x40004400

080012e0 <Error_handler>:


void Error_handler(void){
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	while(1);
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <Error_handler+0x4>

080012e8 <SysTick_Handler>:



extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80012ec:	f000 fa2e 	bl	800174c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80012f0:	f000 fb7a 	bl	80019e8 <HAL_SYSTICK_IRQHandler>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	// First call Interrupt Processing API
	HAL_TIM_IRQHandler(&htimer2);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <TIM2_IRQHandler+0x10>)
 80012fe:	f001 fb95 	bl	8002a2c <HAL_TIM_IRQHandler>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000204 	.word	0x20000204

0800130c <HAL_MspInit>:

#include "app.h"



void HAL_MspInit(void){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
   * 1. Setup grouping of ARM-CORTEX Mx Processor
   * 2. Enable required system exceptions of the ARM-CORTEX Mx Processor
   * 3.	Configure priority for system exceptions*/

	// 1. Setup grouping
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 fb0b 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable required system exceptions
	SCB->SHCSR |= 0x7 << 16; // usage fault, memory fault and bus fault
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <HAL_MspInit+0x40>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131a:	4a0c      	ldr	r2, [pc, #48]	@ (800134c <HAL_MspInit+0x40>)
 800131c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8001320:	6253      	str	r3, [r2, #36]	@ 0x24

	// 3. Configure priority for system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	f06f 000b 	mvn.w	r0, #11
 800132a:	f000 fb0a 	bl	8001942 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	f06f 000a 	mvn.w	r0, #10
 8001336:	f000 fb04 	bl	8001942 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	f06f 0009 	mvn.w	r0, #9
 8001342:	f000 fafe 	bl	8001942 <HAL_NVIC_SetPriority>

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <HAL_UART_MspInit>:
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
}



void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	 * 1. Enable USART2 Peripheral clock
	 * 2. Do Pin Muxing Configuration
	 * 3. Enable IRQ and setup interrupt (NVIC Settings)*/

	// 1. Enable USART2 and GPIOA Peripheral clock
	__HAL_RCC_USART2_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <HAL_UART_MspInit+0x88>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <HAL_UART_MspInit+0x88>)
 8001362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001366:	6413      	str	r3, [r2, #64]	@ 0x40
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <HAL_UART_MspInit+0x88>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <HAL_UART_MspInit+0x88>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	4a16      	ldr	r2, [pc, #88]	@ (80013d8 <HAL_UART_MspInit+0x88>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6313      	str	r3, [r2, #48]	@ 0x30
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_UART_MspInit+0x88>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]

	// 2. Pin Muxing Configuration
	gpio_uart.Pin = GPIO_PIN_2; // UART2 Tx
 8001390:	2304      	movs	r3, #4
 8001392:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8001398:	2301      	movs	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80013a0:	2307      	movs	r3, #7
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	480c      	ldr	r0, [pc, #48]	@ (80013dc <HAL_UART_MspInit+0x8c>)
 80013ac:	f000 fb2a 	bl	8001a04 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; // UART2 Rx
 80013b0:	2308      	movs	r3, #8
 80013b2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4808      	ldr	r0, [pc, #32]	@ (80013dc <HAL_UART_MspInit+0x8c>)
 80013bc:	f000 fb22 	bl	8001a04 <HAL_GPIO_Init>

	// 3. Enable IRQ and setup interrupt (NVIC Settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c0:	2026      	movs	r0, #38	@ 0x26
 80013c2:	f000 fada 	bl	800197a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	210f      	movs	r1, #15
 80013ca:	2026      	movs	r0, #38	@ 0x26
 80013cc:	f000 fab9 	bl	8001942 <HAL_NVIC_SetPriority>

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	@ 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
		   * 1. Enable Timer2 Clock
		   * 2. Configuring a GPIO to behave as Timer2 Channel 1
		   * 3.	NVIC Settings*/
		GPIO_InitTypeDef timer2_Channel1;
		// 1. Enable Timer2 Clock
		__HAL_RCC_TIM2_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <HAL_TIM_OC_MspInit+0xb8>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	4a29      	ldr	r2, [pc, #164]	@ (8001498 <HAL_TIM_OC_MspInit+0xb8>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <HAL_TIM_OC_MspInit+0xb8>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <HAL_TIM_OC_MspInit+0xb8>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	4a22      	ldr	r2, [pc, #136]	@ (8001498 <HAL_TIM_OC_MspInit+0xb8>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6313      	str	r3, [r2, #48]	@ 0x30
 8001414:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_TIM_OC_MspInit+0xb8>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <HAL_TIM_OC_MspInit+0xb8>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <HAL_TIM_OC_MspInit+0xb8>)
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_TIM_OC_MspInit+0xb8>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
		 * PA1---> TIM_CHANNEL2
		 * PB10---> TIM_CHANNEL3
		 * PB11---> TIM_CHANNEL4*/

		// PA0---> TIM_CHANNEL1 and PA1---> TIM_CHANNEL2
		timer2_Channel1.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800143c:	2303      	movs	r3, #3
 800143e:	617b      	str	r3, [r7, #20]
		timer2_Channel1.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
		timer2_Channel1.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
		timer2_Channel1.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
		timer2_Channel1.Alternate = GPIO_AF1_TIM2;
 800144c:	2301      	movs	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &timer2_Channel1);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4811      	ldr	r0, [pc, #68]	@ (800149c <HAL_TIM_OC_MspInit+0xbc>)
 8001458:	f000 fad4 	bl	8001a04 <HAL_GPIO_Init>

		// PB10---> TIM_CHANNEL3 and PB11---> TIM_CHANNEL4
		timer2_Channel1.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 800145c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001460:	617b      	str	r3, [r7, #20]
		timer2_Channel1.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
		timer2_Channel1.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
		timer2_Channel1.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
		timer2_Channel1.Alternate = GPIO_AF1_TIM2;
 800146e:	2301      	movs	r3, #1
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOB, &timer2_Channel1);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <HAL_TIM_OC_MspInit+0xc0>)
 800147a:	f000 fac3 	bl	8001a04 <HAL_GPIO_Init>

		// NVIC Settings
		HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	210f      	movs	r1, #15
 8001482:	201c      	movs	r0, #28
 8001484:	f000 fa5d 	bl	8001942 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001488:	201c      	movs	r0, #28
 800148a:	f000 fa76 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	@ 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400

080014a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014be:	f003 f899 	bl	80045f4 <__errno>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2216      	movs	r2, #22
 80014c6:	601a      	str	r2, [r3, #0]
  return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_exit>:

void _exit (int status)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffe7 	bl	80014b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e6:	bf00      	nop
 80014e8:	e7fd      	b.n	80014e6 <_exit+0x12>

080014ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e00a      	b.n	8001512 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014fc:	f3af 8000 	nop.w
 8001500:	4601      	mov	r1, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	b2ca      	uxtb	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf0      	blt.n	80014fc <_read+0x12>
  }

  return len;
 800151a:	687b      	ldr	r3, [r7, #4]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e009      	b.n	800154a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	60ba      	str	r2, [r7, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbf1      	blt.n	8001536 <_write+0x12>
  }
  return len;
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_close>:

int _close(int file)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001584:	605a      	str	r2, [r3, #4]
  return 0;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_isatty>:

int _isatty(int file)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f002 fffe 	bl	80045f4 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00000400 	.word	0x00000400
 8001628:	200002b4 	.word	0x200002b4
 800162c:	20000408 	.word	0x20000408

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800168c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001658:	f7ff ffea 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	@ (80016a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f002 ffbd 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fc07 	bl	8000e98 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001698:	08006ac0 	.word	0x08006ac0
  ldr r2, =_sbss
 800169c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80016a0:	20000408 	.word	0x20000408

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f92b 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fe16 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f943 	bl	8001996 <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f90b 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000010 	.word	0x20000010
 8001744:	20000018 	.word	0x20000018
 8001748:	20000014 	.word	0x20000014

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000018 	.word	0x20000018
 8001770:	200002b8 	.word	0x200002b8

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200002b8 	.word	0x200002b8

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	@ (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	@ (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	@ (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	@ (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	@ 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d106      	bne.n	80019cc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80019ca:	e005      	b.n	80019d8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019d2:	f023 0304 	bic.w	r3, r3, #4
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80019ec:	f000 f802 	bl	80019f4 <HAL_SYSTICK_Callback>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	e16b      	b.n	8001cf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f040 815a 	bne.w	8001cf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d005      	beq.n	8001a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d130      	bne.n	8001ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 0201 	and.w	r2, r3, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d017      	beq.n	8001af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d123      	bne.n	8001b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3208      	adds	r2, #8
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80b4 	beq.w	8001cf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b60      	ldr	r3, [pc, #384]	@ (8001d10 <HAL_GPIO_Init+0x30c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a5f      	ldr	r2, [pc, #380]	@ (8001d10 <HAL_GPIO_Init+0x30c>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d10 <HAL_GPIO_Init+0x30c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d14 <HAL_GPIO_Init+0x310>)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	@ (8001d18 <HAL_GPIO_Init+0x314>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d02b      	beq.n	8001c2a <HAL_GPIO_Init+0x226>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a51      	ldr	r2, [pc, #324]	@ (8001d1c <HAL_GPIO_Init+0x318>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d025      	beq.n	8001c26 <HAL_GPIO_Init+0x222>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a50      	ldr	r2, [pc, #320]	@ (8001d20 <HAL_GPIO_Init+0x31c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01f      	beq.n	8001c22 <HAL_GPIO_Init+0x21e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4f      	ldr	r2, [pc, #316]	@ (8001d24 <HAL_GPIO_Init+0x320>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d019      	beq.n	8001c1e <HAL_GPIO_Init+0x21a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4e      	ldr	r2, [pc, #312]	@ (8001d28 <HAL_GPIO_Init+0x324>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x216>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8001d2c <HAL_GPIO_Init+0x328>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x212>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8001d30 <HAL_GPIO_Init+0x32c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x20e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4b      	ldr	r2, [pc, #300]	@ (8001d34 <HAL_GPIO_Init+0x330>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x20a>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e00e      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c0e:	2308      	movs	r3, #8
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	@ (8001d14 <HAL_GPIO_Init+0x310>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a32      	ldr	r2, [pc, #200]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a27      	ldr	r2, [pc, #156]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b26      	ldr	r3, [pc, #152]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae90 	bls.w	8001a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40021c00 	.word	0x40021c00
 8001d38:	40013c00 	.word	0x40013c00

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e267      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d075      	beq.n	8001e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5a:	4b88      	ldr	r3, [pc, #544]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d00c      	beq.n	8001d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d66:	4b85      	ldr	r3, [pc, #532]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d112      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d72:	4b82      	ldr	r3, [pc, #520]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d7e:	d10b      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	4b7e      	ldr	r3, [pc, #504]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d05b      	beq.n	8001e44 <HAL_RCC_OscConfig+0x108>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d157      	bne.n	8001e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e242      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da0:	d106      	bne.n	8001db0 <HAL_RCC_OscConfig+0x74>
 8001da2:	4b76      	ldr	r3, [pc, #472]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a75      	ldr	r2, [pc, #468]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xb0>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x98>
 8001dba:	4b70      	ldr	r3, [pc, #448]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6c      	ldr	r2, [pc, #432]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xb0>
 8001dd4:	4b69      	ldr	r3, [pc, #420]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a68      	ldr	r2, [pc, #416]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b66      	ldr	r3, [pc, #408]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a65      	ldr	r2, [pc, #404]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fcbe 	bl	8001774 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fcba 	bl	8001774 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	@ 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e207      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xc0>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fcaa 	bl	8001774 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fca6 	bl	8001774 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	@ 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1f3      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b51      	ldr	r3, [pc, #324]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0xe8>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e52:	4b4a      	ldr	r3, [pc, #296]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5e:	4b47      	ldr	r3, [pc, #284]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6a:	4b44      	ldr	r3, [pc, #272]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b41      	ldr	r3, [pc, #260]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x152>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1c7      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4937      	ldr	r1, [pc, #220]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <HAL_RCC_OscConfig+0x244>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fc5f 	bl	8001774 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff fc5b 	bl	8001774 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1a8      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4925      	ldr	r1, [pc, #148]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_RCC_OscConfig+0x244>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fc3e 	bl	8001774 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efc:	f7ff fc3a 	bl	8001774 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e187      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d036      	beq.n	8001f94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d016      	beq.n	8001f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <HAL_RCC_OscConfig+0x248>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7ff fc1e 	bl	8001774 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc1a 	bl	8001774 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e167      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x200>
 8001f5a:	e01b      	b.n	8001f94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_RCC_OscConfig+0x248>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fc07 	bl	8001774 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	e00e      	b.n	8001f88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fc03 	bl	8001774 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d907      	bls.n	8001f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e150      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	42470000 	.word	0x42470000
 8001f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	4b88      	ldr	r3, [pc, #544]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8001f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ea      	bne.n	8001f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8097 	beq.w	80020d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa6:	4b81      	ldr	r3, [pc, #516]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	4a7c      	ldr	r2, [pc, #496]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd2:	4b77      	ldr	r3, [pc, #476]	@ (80021b0 <HAL_RCC_OscConfig+0x474>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d118      	bne.n	8002010 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fde:	4b74      	ldr	r3, [pc, #464]	@ (80021b0 <HAL_RCC_OscConfig+0x474>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a73      	ldr	r2, [pc, #460]	@ (80021b0 <HAL_RCC_OscConfig+0x474>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fbc3 	bl	8001774 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff2:	f7ff fbbf 	bl	8001774 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e10c      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b6a      	ldr	r3, [pc, #424]	@ (80021b0 <HAL_RCC_OscConfig+0x474>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x2ea>
 8002018:	4b64      	ldr	r3, [pc, #400]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201c:	4a63      	ldr	r2, [pc, #396]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6713      	str	r3, [r2, #112]	@ 0x70
 8002024:	e01c      	b.n	8002060 <HAL_RCC_OscConfig+0x324>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b05      	cmp	r3, #5
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x30c>
 800202e:	4b5f      	ldr	r3, [pc, #380]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002032:	4a5e      	ldr	r2, [pc, #376]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6713      	str	r3, [r2, #112]	@ 0x70
 800203a:	4b5c      	ldr	r3, [pc, #368]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203e:	4a5b      	ldr	r2, [pc, #364]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6713      	str	r3, [r2, #112]	@ 0x70
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0x324>
 8002048:	4b58      	ldr	r3, [pc, #352]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204c:	4a57      	ldr	r2, [pc, #348]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6713      	str	r3, [r2, #112]	@ 0x70
 8002054:	4b55      	ldr	r3, [pc, #340]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002058:	4a54      	ldr	r2, [pc, #336]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 800205a:	f023 0304 	bic.w	r3, r3, #4
 800205e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d015      	beq.n	8002094 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff fb84 	bl	8001774 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff fb80 	bl	8001774 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e0cb      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002086:	4b49      	ldr	r3, [pc, #292]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0ee      	beq.n	8002070 <HAL_RCC_OscConfig+0x334>
 8002092:	e014      	b.n	80020be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff fb6e 	bl	8001774 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7ff fb6a 	bl	8001774 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0b5      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b2:	4b3e      	ldr	r3, [pc, #248]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1ee      	bne.n	800209c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	4b39      	ldr	r3, [pc, #228]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	4a38      	ldr	r2, [pc, #224]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a1 	beq.w	800221c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020da:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d05c      	beq.n	80021a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d141      	bne.n	8002172 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b31      	ldr	r3, [pc, #196]	@ (80021b4 <HAL_RCC_OscConfig+0x478>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fb3e 	bl	8001774 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fc:	f7ff fb3a 	bl	8001774 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e087      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210e:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69da      	ldr	r2, [r3, #28]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	019b      	lsls	r3, r3, #6
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	3b01      	subs	r3, #1
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	061b      	lsls	r3, r3, #24
 800213e:	491b      	ldr	r1, [pc, #108]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <HAL_RCC_OscConfig+0x478>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff fb13 	bl	8001774 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff fb0f 	bl	8001774 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e05c      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002164:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x416>
 8002170:	e054      	b.n	800221c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <HAL_RCC_OscConfig+0x478>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff fafc 	bl	8001774 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff faf8 	bl	8001774 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e045      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_RCC_OscConfig+0x470>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x444>
 800219e:	e03d      	b.n	800221c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e038      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40007000 	.word	0x40007000
 80021b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <HAL_RCC_OscConfig+0x4ec>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d028      	beq.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d121      	bne.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d11a      	bne.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d111      	bne.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	3b01      	subs	r3, #1
 8002202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0cc      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b68      	ldr	r3, [pc, #416]	@ (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d90c      	bls.n	8002268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b65      	ldr	r3, [pc, #404]	@ (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b63      	ldr	r3, [pc, #396]	@ (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0b8      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002280:	4b59      	ldr	r3, [pc, #356]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a58      	ldr	r2, [pc, #352]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800228a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002298:	4b53      	ldr	r3, [pc, #332]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4a52      	ldr	r2, [pc, #328]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b50      	ldr	r3, [pc, #320]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	494d      	ldr	r1, [pc, #308]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d044      	beq.n	800234c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b47      	ldr	r3, [pc, #284]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d119      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e07f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	4b3f      	ldr	r3, [pc, #252]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	4b3b      	ldr	r3, [pc, #236]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e067      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b37      	ldr	r3, [pc, #220]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4934      	ldr	r1, [pc, #208]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7ff fa2a 	bl	8001774 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7ff fa26 	bl	8001774 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e04f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b2b      	ldr	r3, [pc, #172]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d20c      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e032      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4916      	ldr	r1, [pc, #88]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	490e      	ldr	r1, [pc, #56]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023b2:	f000 f889 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	490a      	ldr	r1, [pc, #40]	@ (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a09      	ldr	r2, [pc, #36]	@ (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff f98a 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00
 80023e8:	40023800 	.word	0x40023800
 80023ec:	08006724 	.word	0x08006724
 80023f0:	20000010 	.word	0x20000010
 80023f4:	20000014 	.word	0x20000014

080023f8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08c      	sub	sp, #48	@ 0x30
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d129      	bne.n	800245e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a2a      	ldr	r2, [pc, #168]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002426:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002430:	2303      	movs	r3, #3
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	4619      	mov	r1, r3
 8002442:	481f      	ldr	r0, [pc, #124]	@ (80024c0 <HAL_RCC_MCOConfig+0xc8>)
 8002444:	f7ff fade 	bl	8001a04 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002448:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	430b      	orrs	r3, r1
 8002456:	4919      	ldr	r1, [pc, #100]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800245c:	e029      	b.n	80024b2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a15      	ldr	r2, [pc, #84]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 8002468:	f043 0304 	orr.w	r3, r3, #4
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800247a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800248c:	2300      	movs	r3, #0
 800248e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	480b      	ldr	r0, [pc, #44]	@ (80024c4 <HAL_RCC_MCOConfig+0xcc>)
 8002498:	f7ff fab4 	bl	8001a04 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800249c:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	00d9      	lsls	r1, r3, #3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	430b      	orrs	r3, r1
 80024ac:	4903      	ldr	r1, [pc, #12]	@ (80024bc <HAL_RCC_MCOConfig+0xc4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
}
 80024b2:	bf00      	nop
 80024b4:	3730      	adds	r7, #48	@ 0x30
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020800 	.word	0x40020800

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024cc:	b094      	sub	sp, #80	@ 0x50
 80024ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80024d4:	2300      	movs	r3, #0
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d8:	2300      	movs	r3, #0
 80024da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e0:	4b79      	ldr	r3, [pc, #484]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d00d      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x40>
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	f200 80e1 	bhi.w	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x34>
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fa:	e0db      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b73      	ldr	r3, [pc, #460]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80024fe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002500:	e0db      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002502:	4b73      	ldr	r3, [pc, #460]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002504:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002506:	e0d8      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002508:	4b6f      	ldr	r3, [pc, #444]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002510:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002512:	4b6d      	ldr	r3, [pc, #436]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	2200      	movs	r2, #0
 8002526:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002528:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	633b      	str	r3, [r7, #48]	@ 0x30
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	@ 0x34
 8002536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800253a:	4622      	mov	r2, r4
 800253c:	462b      	mov	r3, r5
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254c:	0150      	lsls	r0, r2, #5
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4621      	mov	r1, r4
 8002554:	1a51      	subs	r1, r2, r1
 8002556:	6139      	str	r1, [r7, #16]
 8002558:	4629      	mov	r1, r5
 800255a:	eb63 0301 	sbc.w	r3, r3, r1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800256c:	4659      	mov	r1, fp
 800256e:	018b      	lsls	r3, r1, #6
 8002570:	4651      	mov	r1, sl
 8002572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002576:	4651      	mov	r1, sl
 8002578:	018a      	lsls	r2, r1, #6
 800257a:	4651      	mov	r1, sl
 800257c:	ebb2 0801 	subs.w	r8, r2, r1
 8002580:	4659      	mov	r1, fp
 8002582:	eb63 0901 	sbc.w	r9, r3, r1
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259a:	4690      	mov	r8, r2
 800259c:	4699      	mov	r9, r3
 800259e:	4623      	mov	r3, r4
 80025a0:	eb18 0303 	adds.w	r3, r8, r3
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	462b      	mov	r3, r5
 80025a8:	eb49 0303 	adc.w	r3, r9, r3
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ba:	4629      	mov	r1, r5
 80025bc:	024b      	lsls	r3, r1, #9
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c4:	4621      	mov	r1, r4
 80025c6:	024a      	lsls	r2, r1, #9
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ce:	2200      	movs	r2, #0
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025d8:	f7fe fae6 	bl	8000ba8 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e4:	e058      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e6:	4b38      	ldr	r3, [pc, #224]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	2200      	movs	r2, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	4611      	mov	r1, r2
 80025f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002600:	4642      	mov	r2, r8
 8002602:	464b      	mov	r3, r9
 8002604:	f04f 0000 	mov.w	r0, #0
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	0159      	lsls	r1, r3, #5
 800260e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002612:	0150      	lsls	r0, r2, #5
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4641      	mov	r1, r8
 800261a:	ebb2 0a01 	subs.w	sl, r2, r1
 800261e:	4649      	mov	r1, r9
 8002620:	eb63 0b01 	sbc.w	fp, r3, r1
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002638:	ebb2 040a 	subs.w	r4, r2, sl
 800263c:	eb63 050b 	sbc.w	r5, r3, fp
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	00eb      	lsls	r3, r5, #3
 800264a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264e:	00e2      	lsls	r2, r4, #3
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
 8002654:	4643      	mov	r3, r8
 8002656:	18e3      	adds	r3, r4, r3
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	464b      	mov	r3, r9
 800265c:	eb45 0303 	adc.w	r3, r5, r3
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266e:	4629      	mov	r1, r5
 8002670:	028b      	lsls	r3, r1, #10
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002678:	4621      	mov	r1, r4
 800267a:	028a      	lsls	r2, r1, #10
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002682:	2200      	movs	r2, #0
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	61fa      	str	r2, [r7, #28]
 8002688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268c:	f7fe fa8c 	bl	8000ba8 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	3301      	adds	r3, #1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80026a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b2:	e002      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3750      	adds	r7, #80	@ 0x50
 80026c0:	46bd      	mov	sp, r7
 80026c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	00f42400 	.word	0x00f42400
 80026d0:	007a1200 	.word	0x007a1200

080026d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000010 	.word	0x20000010

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff0 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0a9b      	lsrs	r3, r3, #10
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	08006734 	.word	0x08006734

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002718:	f7ff ffdc 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0b5b      	lsrs	r3, r3, #13
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	08006734 	.word	0x08006734

0800273c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e041      	b.n	80027d2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fe3c 	bl	80013e0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 faca 	bl	8002d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <HAL_TIM_IC_Start_IT+0x1e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	e013      	b.n	8002822 <HAL_TIM_IC_Start_IT+0x46>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d104      	bne.n	800280a <HAL_TIM_IC_Start_IT+0x2e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002806:	b2db      	uxtb	r3, r3
 8002808:	e00b      	b.n	8002822 <HAL_TIM_IC_Start_IT+0x46>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b08      	cmp	r3, #8
 800280e:	d104      	bne.n	800281a <HAL_TIM_IC_Start_IT+0x3e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002816:	b2db      	uxtb	r3, r3
 8002818:	e003      	b.n	8002822 <HAL_TIM_IC_Start_IT+0x46>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002820:	b2db      	uxtb	r3, r3
 8002822:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <HAL_TIM_IC_Start_IT+0x58>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e013      	b.n	800285c <HAL_TIM_IC_Start_IT+0x80>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b04      	cmp	r3, #4
 8002838:	d104      	bne.n	8002844 <HAL_TIM_IC_Start_IT+0x68>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e00b      	b.n	800285c <HAL_TIM_IC_Start_IT+0x80>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b08      	cmp	r3, #8
 8002848:	d104      	bne.n	8002854 <HAL_TIM_IC_Start_IT+0x78>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e003      	b.n	800285c <HAL_TIM_IC_Start_IT+0x80>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800285a:	b2db      	uxtb	r3, r3
 800285c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800285e:	7bbb      	ldrb	r3, [r7, #14]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002864:	7b7b      	ldrb	r3, [r7, #13]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d001      	beq.n	800286e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0cc      	b.n	8002a08 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d104      	bne.n	800287e <HAL_TIM_IC_Start_IT+0xa2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800287c:	e013      	b.n	80028a6 <HAL_TIM_IC_Start_IT+0xca>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d104      	bne.n	800288e <HAL_TIM_IC_Start_IT+0xb2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800288c:	e00b      	b.n	80028a6 <HAL_TIM_IC_Start_IT+0xca>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d104      	bne.n	800289e <HAL_TIM_IC_Start_IT+0xc2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800289c:	e003      	b.n	80028a6 <HAL_TIM_IC_Start_IT+0xca>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_IC_Start_IT+0xda>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028b4:	e013      	b.n	80028de <HAL_TIM_IC_Start_IT+0x102>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d104      	bne.n	80028c6 <HAL_TIM_IC_Start_IT+0xea>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028c4:	e00b      	b.n	80028de <HAL_TIM_IC_Start_IT+0x102>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_IC_Start_IT+0xfa>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028d4:	e003      	b.n	80028de <HAL_TIM_IC_Start_IT+0x102>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d841      	bhi.n	8002968 <HAL_TIM_IC_Start_IT+0x18c>
 80028e4:	a201      	add	r2, pc, #4	@ (adr r2, 80028ec <HAL_TIM_IC_Start_IT+0x110>)
 80028e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	08002921 	.word	0x08002921
 80028f0:	08002969 	.word	0x08002969
 80028f4:	08002969 	.word	0x08002969
 80028f8:	08002969 	.word	0x08002969
 80028fc:	08002933 	.word	0x08002933
 8002900:	08002969 	.word	0x08002969
 8002904:	08002969 	.word	0x08002969
 8002908:	08002969 	.word	0x08002969
 800290c:	08002945 	.word	0x08002945
 8002910:	08002969 	.word	0x08002969
 8002914:	08002969 	.word	0x08002969
 8002918:	08002969 	.word	0x08002969
 800291c:	08002957 	.word	0x08002957
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0202 	orr.w	r2, r2, #2
 800292e:	60da      	str	r2, [r3, #12]
      break;
 8002930:	e01d      	b.n	800296e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0204 	orr.w	r2, r2, #4
 8002940:	60da      	str	r2, [r3, #12]
      break;
 8002942:	e014      	b.n	800296e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0208 	orr.w	r2, r2, #8
 8002952:	60da      	str	r2, [r3, #12]
      break;
 8002954:	e00b      	b.n	800296e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0210 	orr.w	r2, r2, #16
 8002964:	60da      	str	r2, [r3, #12]
      break;
 8002966:	e002      	b.n	800296e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      break;
 800296c:	bf00      	nop
  }

  if (status == HAL_OK)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d148      	bne.n	8002a06 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fc25 	bl	80031cc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a22      	ldr	r2, [pc, #136]	@ (8002a10 <HAL_TIM_IC_Start_IT+0x234>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <HAL_TIM_IC_Start_IT+0x1f6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002994:	d01d      	beq.n	80029d2 <HAL_TIM_IC_Start_IT+0x1f6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a14 <HAL_TIM_IC_Start_IT+0x238>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d018      	beq.n	80029d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a18 <HAL_TIM_IC_Start_IT+0x23c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1b      	ldr	r2, [pc, #108]	@ (8002a1c <HAL_TIM_IC_Start_IT+0x240>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00e      	beq.n	80029d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	@ (8002a20 <HAL_TIM_IC_Start_IT+0x244>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d009      	beq.n	80029d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a18      	ldr	r2, [pc, #96]	@ (8002a24 <HAL_TIM_IC_Start_IT+0x248>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d004      	beq.n	80029d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a16      	ldr	r2, [pc, #88]	@ (8002a28 <HAL_TIM_IC_Start_IT+0x24c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d111      	bne.n	80029f6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b06      	cmp	r3, #6
 80029e2:	d010      	beq.n	8002a06 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	e007      	b.n	8002a06 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	40000c00 	.word	0x40000c00
 8002a20:	40010400 	.word	0x40010400
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40001800 	.word	0x40001800

08002a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d020      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0202 	mvn.w	r2, #2
 8002a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe fb4a 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f92a 	bl	8002cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f931 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0204 	mvn.w	r2, #4
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe fb24 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f904 	bl	8002cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f90b 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d020      	beq.n	8002b28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0208 	mvn.w	r2, #8
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2204      	movs	r2, #4
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fafe 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8de 	bl	8002cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f8e5 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d020      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0210 	mvn.w	r2, #16
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe fad8 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8b8 	bl	8002cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f8bf 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0201 	mvn.w	r2, #1
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f896 	bl	8002cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fb37 	bl	800322a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00c      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f890 	bl	8002d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0220 	mvn.w	r2, #32
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fb09 	bl	8003216 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e048      	b.n	8002cbc <HAL_TIM_OC_ConfigChannel+0xb0>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b0c      	cmp	r3, #12
 8002c36:	d839      	bhi.n	8002cac <HAL_TIM_OC_ConfigChannel+0xa0>
 8002c38:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08002cad 	.word	0x08002cad
 8002c48:	08002cad 	.word	0x08002cad
 8002c4c:	08002cad 	.word	0x08002cad
 8002c50:	08002c83 	.word	0x08002c83
 8002c54:	08002cad 	.word	0x08002cad
 8002c58:	08002cad 	.word	0x08002cad
 8002c5c:	08002cad 	.word	0x08002cad
 8002c60:	08002c91 	.word	0x08002c91
 8002c64:	08002cad 	.word	0x08002cad
 8002c68:	08002cad 	.word	0x08002cad
 8002c6c:	08002cad 	.word	0x08002cad
 8002c70:	08002c9f 	.word	0x08002c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f8f6 	bl	8002e6c <TIM_OC1_SetConfig>
      break;
 8002c80:	e017      	b.n	8002cb2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f95f 	bl	8002f4c <TIM_OC2_SetConfig>
      break;
 8002c8e:	e010      	b.n	8002cb2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f9ce 	bl	8003038 <TIM_OC3_SetConfig>
      break;
 8002c9c:	e009      	b.n	8002cb2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fa3b 	bl	8003120 <TIM_OC4_SetConfig>
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	75fb      	strb	r3, [r7, #23]
      break;
 8002cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a46      	ldr	r2, [pc, #280]	@ (8002e40 <TIM_Base_SetConfig+0x12c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d32:	d00f      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a43      	ldr	r2, [pc, #268]	@ (8002e44 <TIM_Base_SetConfig+0x130>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00b      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a42      	ldr	r2, [pc, #264]	@ (8002e48 <TIM_Base_SetConfig+0x134>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d007      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a41      	ldr	r2, [pc, #260]	@ (8002e4c <TIM_Base_SetConfig+0x138>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a40      	ldr	r2, [pc, #256]	@ (8002e50 <TIM_Base_SetConfig+0x13c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d108      	bne.n	8002d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a35      	ldr	r2, [pc, #212]	@ (8002e40 <TIM_Base_SetConfig+0x12c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02b      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d74:	d027      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a32      	ldr	r2, [pc, #200]	@ (8002e44 <TIM_Base_SetConfig+0x130>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d023      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a31      	ldr	r2, [pc, #196]	@ (8002e48 <TIM_Base_SetConfig+0x134>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01f      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a30      	ldr	r2, [pc, #192]	@ (8002e4c <TIM_Base_SetConfig+0x138>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01b      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2f      	ldr	r2, [pc, #188]	@ (8002e50 <TIM_Base_SetConfig+0x13c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d017      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2e      	ldr	r2, [pc, #184]	@ (8002e54 <TIM_Base_SetConfig+0x140>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e58 <TIM_Base_SetConfig+0x144>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00f      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2c      	ldr	r2, [pc, #176]	@ (8002e5c <TIM_Base_SetConfig+0x148>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e60 <TIM_Base_SetConfig+0x14c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a2a      	ldr	r2, [pc, #168]	@ (8002e64 <TIM_Base_SetConfig+0x150>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a29      	ldr	r2, [pc, #164]	@ (8002e68 <TIM_Base_SetConfig+0x154>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a10      	ldr	r2, [pc, #64]	@ (8002e40 <TIM_Base_SetConfig+0x12c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_Base_SetConfig+0xf8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <TIM_Base_SetConfig+0x13c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d103      	bne.n	8002e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d105      	bne.n	8002e32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f023 0201 	bic.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]
  }
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40000c00 	.word	0x40000c00
 8002e50:	40010400 	.word	0x40010400
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800
 8002e60:	40001800 	.word	0x40001800
 8002e64:	40001c00 	.word	0x40001c00
 8002e68:	40002000 	.word	0x40002000

08002e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f023 0201 	bic.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f023 0302 	bic.w	r3, r3, #2
 8002eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a20      	ldr	r2, [pc, #128]	@ (8002f44 <TIM_OC1_SetConfig+0xd8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_OC1_SetConfig+0x64>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <TIM_OC1_SetConfig+0xdc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10c      	bne.n	8002eea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0308 	bic.w	r3, r3, #8
 8002ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a15      	ldr	r2, [pc, #84]	@ (8002f44 <TIM_OC1_SetConfig+0xd8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_OC1_SetConfig+0x8e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a14      	ldr	r2, [pc, #80]	@ (8002f48 <TIM_OC1_SetConfig+0xdc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d111      	bne.n	8002f1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	621a      	str	r2, [r3, #32]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40010400 	.word	0x40010400

08002f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 0210 	bic.w	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f023 0320 	bic.w	r3, r3, #32
 8002f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a22      	ldr	r2, [pc, #136]	@ (8003030 <TIM_OC2_SetConfig+0xe4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d003      	beq.n	8002fb4 <TIM_OC2_SetConfig+0x68>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a21      	ldr	r2, [pc, #132]	@ (8003034 <TIM_OC2_SetConfig+0xe8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10d      	bne.n	8002fd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <TIM_OC2_SetConfig+0xe4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_OC2_SetConfig+0x94>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a16      	ldr	r2, [pc, #88]	@ (8003034 <TIM_OC2_SetConfig+0xe8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d113      	bne.n	8003008 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	621a      	str	r2, [r3, #32]
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40010000 	.word	0x40010000
 8003034:	40010400 	.word	0x40010400

08003038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a21      	ldr	r2, [pc, #132]	@ (8003118 <TIM_OC3_SetConfig+0xe0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_OC3_SetConfig+0x66>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a20      	ldr	r2, [pc, #128]	@ (800311c <TIM_OC3_SetConfig+0xe4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10d      	bne.n	80030ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a16      	ldr	r2, [pc, #88]	@ (8003118 <TIM_OC3_SetConfig+0xe0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d003      	beq.n	80030ca <TIM_OC3_SetConfig+0x92>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a15      	ldr	r2, [pc, #84]	@ (800311c <TIM_OC3_SetConfig+0xe4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d113      	bne.n	80030f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	621a      	str	r2, [r3, #32]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40010000 	.word	0x40010000
 800311c:	40010400 	.word	0x40010400

08003120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800314e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800316a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	031b      	lsls	r3, r3, #12
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <TIM_OC4_SetConfig+0xa4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_OC4_SetConfig+0x68>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a11      	ldr	r2, [pc, #68]	@ (80031c8 <TIM_OC4_SetConfig+0xa8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d109      	bne.n	800319c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800318e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	019b      	lsls	r3, r3, #6
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40010400 	.word	0x40010400

080031cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	2201      	movs	r2, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a1a      	ldr	r2, [r3, #32]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	431a      	orrs	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e042      	b.n	80032d6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d106      	bne.n	800326a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fe f873 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2224      	movs	r2, #36	@ 0x24
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003280:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f972 	bl	800356c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003296:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b08a      	sub	sp, #40	@ 0x28
 80032e2:	af02      	add	r7, sp, #8
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d175      	bne.n	80033ea <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_UART_Transmit+0x2c>
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e06e      	b.n	80033ec <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2221      	movs	r2, #33	@ 0x21
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800331c:	f7fe fa2a 	bl	8001774 <HAL_GetTick>
 8003320:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003336:	d108      	bne.n	800334a <HAL_UART_Transmit+0x6c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d104      	bne.n	800334a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	e003      	b.n	8003352 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003352:	e02e      	b.n	80033b2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2200      	movs	r2, #0
 800335c:	2180      	movs	r1, #128	@ 0x80
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f848 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e03a      	b.n	80033ec <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800338a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	3302      	adds	r3, #2
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e007      	b.n	80033a4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3301      	adds	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1cb      	bne.n	8003354 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2200      	movs	r2, #0
 80033c4:	2140      	movs	r1, #64	@ 0x40
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f814 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e006      	b.n	80033ec <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	e03b      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d037      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe f9b1 	bl	8001774 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <UART_WaitOnFlagUntilTimeout+0x30>
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e03a      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d023      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b80      	cmp	r3, #128	@ 0x80
 800343a:	d020      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b40      	cmp	r3, #64	@ 0x40
 8003440:	d01d      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d116      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f81d 	bl	80034a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2208      	movs	r2, #8
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d0b4      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b095      	sub	sp, #84	@ 0x54
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	330c      	adds	r3, #12
 80034cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80034d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e5      	bne.n	80034ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3314      	adds	r3, #20
 80034e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e5      	bne.n	80034e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	2b01      	cmp	r3, #1
 800351c:	d119      	bne.n	8003552 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	60bb      	str	r3, [r7, #8]
   return(result);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f023 0310 	bic.w	r3, r3, #16
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800353e:	61ba      	str	r2, [r7, #24]
 8003540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6979      	ldr	r1, [r7, #20]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	613b      	str	r3, [r7, #16]
   return(result);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003560:	bf00      	nop
 8003562:	3754      	adds	r7, #84	@ 0x54
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800356c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003570:	b0c0      	sub	sp, #256	@ 0x100
 8003572:	af00      	add	r7, sp, #0
 8003574:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003588:	68d9      	ldr	r1, [r3, #12]
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	ea40 0301 	orr.w	r3, r0, r1
 8003594:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80035c4:	f021 010c 	bic.w	r1, r1, #12
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035d2:	430b      	orrs	r3, r1
 80035d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e6:	6999      	ldr	r1, [r3, #24]
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	ea40 0301 	orr.w	r3, r0, r1
 80035f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003838 <UART_SetConfig+0x2cc>)
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d005      	beq.n	800360c <UART_SetConfig+0xa0>
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b8d      	ldr	r3, [pc, #564]	@ (800383c <UART_SetConfig+0x2d0>)
 8003608:	429a      	cmp	r2, r3
 800360a:	d104      	bne.n	8003616 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7ff f882 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8003610:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003614:	e003      	b.n	800361e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003616:	f7ff f869 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 800361a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800361e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003628:	f040 810c 	bne.w	8003844 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800362c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003630:	2200      	movs	r2, #0
 8003632:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003636:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800363a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800363e:	4622      	mov	r2, r4
 8003640:	462b      	mov	r3, r5
 8003642:	1891      	adds	r1, r2, r2
 8003644:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003646:	415b      	adcs	r3, r3
 8003648:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800364a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800364e:	4621      	mov	r1, r4
 8003650:	eb12 0801 	adds.w	r8, r2, r1
 8003654:	4629      	mov	r1, r5
 8003656:	eb43 0901 	adc.w	r9, r3, r1
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800366e:	4690      	mov	r8, r2
 8003670:	4699      	mov	r9, r3
 8003672:	4623      	mov	r3, r4
 8003674:	eb18 0303 	adds.w	r3, r8, r3
 8003678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800367c:	462b      	mov	r3, r5
 800367e:	eb49 0303 	adc.w	r3, r9, r3
 8003682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003692:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003696:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800369a:	460b      	mov	r3, r1
 800369c:	18db      	adds	r3, r3, r3
 800369e:	653b      	str	r3, [r7, #80]	@ 0x50
 80036a0:	4613      	mov	r3, r2
 80036a2:	eb42 0303 	adc.w	r3, r2, r3
 80036a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80036a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80036ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80036b0:	f7fd fa7a 	bl	8000ba8 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4b61      	ldr	r3, [pc, #388]	@ (8003840 <UART_SetConfig+0x2d4>)
 80036ba:	fba3 2302 	umull	r2, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	011c      	lsls	r4, r3, #4
 80036c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80036d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	1891      	adds	r1, r2, r2
 80036da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80036dc:	415b      	adcs	r3, r3
 80036de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036e4:	4641      	mov	r1, r8
 80036e6:	eb12 0a01 	adds.w	sl, r2, r1
 80036ea:	4649      	mov	r1, r9
 80036ec:	eb43 0b01 	adc.w	fp, r3, r1
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003700:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003704:	4692      	mov	sl, r2
 8003706:	469b      	mov	fp, r3
 8003708:	4643      	mov	r3, r8
 800370a:	eb1a 0303 	adds.w	r3, sl, r3
 800370e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003712:	464b      	mov	r3, r9
 8003714:	eb4b 0303 	adc.w	r3, fp, r3
 8003718:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003728:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800372c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003730:	460b      	mov	r3, r1
 8003732:	18db      	adds	r3, r3, r3
 8003734:	643b      	str	r3, [r7, #64]	@ 0x40
 8003736:	4613      	mov	r3, r2
 8003738:	eb42 0303 	adc.w	r3, r2, r3
 800373c:	647b      	str	r3, [r7, #68]	@ 0x44
 800373e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003742:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003746:	f7fd fa2f 	bl	8000ba8 <__aeabi_uldivmod>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4611      	mov	r1, r2
 8003750:	4b3b      	ldr	r3, [pc, #236]	@ (8003840 <UART_SetConfig+0x2d4>)
 8003752:	fba3 2301 	umull	r2, r3, r3, r1
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2264      	movs	r2, #100	@ 0x64
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	1acb      	subs	r3, r1, r3
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003766:	4b36      	ldr	r3, [pc, #216]	@ (8003840 <UART_SetConfig+0x2d4>)
 8003768:	fba3 2302 	umull	r2, r3, r3, r2
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003774:	441c      	add	r4, r3
 8003776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003780:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003784:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	1891      	adds	r1, r2, r2
 800378e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003790:	415b      	adcs	r3, r3
 8003792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003794:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003798:	4641      	mov	r1, r8
 800379a:	1851      	adds	r1, r2, r1
 800379c:	6339      	str	r1, [r7, #48]	@ 0x30
 800379e:	4649      	mov	r1, r9
 80037a0:	414b      	adcs	r3, r1
 80037a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80037b0:	4659      	mov	r1, fp
 80037b2:	00cb      	lsls	r3, r1, #3
 80037b4:	4651      	mov	r1, sl
 80037b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ba:	4651      	mov	r1, sl
 80037bc:	00ca      	lsls	r2, r1, #3
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	4642      	mov	r2, r8
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037cc:	464b      	mov	r3, r9
 80037ce:	460a      	mov	r2, r1
 80037d0:	eb42 0303 	adc.w	r3, r2, r3
 80037d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037ec:	460b      	mov	r3, r1
 80037ee:	18db      	adds	r3, r3, r3
 80037f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037f2:	4613      	mov	r3, r2
 80037f4:	eb42 0303 	adc.w	r3, r2, r3
 80037f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003802:	f7fd f9d1 	bl	8000ba8 <__aeabi_uldivmod>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <UART_SetConfig+0x2d4>)
 800380c:	fba3 1302 	umull	r1, r3, r3, r2
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	2164      	movs	r1, #100	@ 0x64
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	3332      	adds	r3, #50	@ 0x32
 800381e:	4a08      	ldr	r2, [pc, #32]	@ (8003840 <UART_SetConfig+0x2d4>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	f003 0207 	and.w	r2, r3, #7
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4422      	add	r2, r4
 8003832:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003834:	e106      	b.n	8003a44 <UART_SetConfig+0x4d8>
 8003836:	bf00      	nop
 8003838:	40011000 	.word	0x40011000
 800383c:	40011400 	.word	0x40011400
 8003840:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003848:	2200      	movs	r2, #0
 800384a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800384e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003852:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003856:	4642      	mov	r2, r8
 8003858:	464b      	mov	r3, r9
 800385a:	1891      	adds	r1, r2, r2
 800385c:	6239      	str	r1, [r7, #32]
 800385e:	415b      	adcs	r3, r3
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
 8003862:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003866:	4641      	mov	r1, r8
 8003868:	1854      	adds	r4, r2, r1
 800386a:	4649      	mov	r1, r9
 800386c:	eb43 0501 	adc.w	r5, r3, r1
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	00eb      	lsls	r3, r5, #3
 800387a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800387e:	00e2      	lsls	r2, r4, #3
 8003880:	4614      	mov	r4, r2
 8003882:	461d      	mov	r5, r3
 8003884:	4643      	mov	r3, r8
 8003886:	18e3      	adds	r3, r4, r3
 8003888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800388c:	464b      	mov	r3, r9
 800388e:	eb45 0303 	adc.w	r3, r5, r3
 8003892:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80038b2:	4629      	mov	r1, r5
 80038b4:	008b      	lsls	r3, r1, #2
 80038b6:	4621      	mov	r1, r4
 80038b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038bc:	4621      	mov	r1, r4
 80038be:	008a      	lsls	r2, r1, #2
 80038c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80038c4:	f7fd f970 	bl	8000ba8 <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4b60      	ldr	r3, [pc, #384]	@ (8003a50 <UART_SetConfig+0x4e4>)
 80038ce:	fba3 2302 	umull	r2, r3, r3, r2
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	011c      	lsls	r4, r3, #4
 80038d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	61b9      	str	r1, [r7, #24]
 80038f0:	415b      	adcs	r3, r3
 80038f2:	61fb      	str	r3, [r7, #28]
 80038f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f8:	4641      	mov	r1, r8
 80038fa:	1851      	adds	r1, r2, r1
 80038fc:	6139      	str	r1, [r7, #16]
 80038fe:	4649      	mov	r1, r9
 8003900:	414b      	adcs	r3, r1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003910:	4659      	mov	r1, fp
 8003912:	00cb      	lsls	r3, r1, #3
 8003914:	4651      	mov	r1, sl
 8003916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391a:	4651      	mov	r1, sl
 800391c:	00ca      	lsls	r2, r1, #3
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	4603      	mov	r3, r0
 8003924:	4642      	mov	r2, r8
 8003926:	189b      	adds	r3, r3, r2
 8003928:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800392c:	464b      	mov	r3, r9
 800392e:	460a      	mov	r2, r1
 8003930:	eb42 0303 	adc.w	r3, r2, r3
 8003934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003942:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003950:	4649      	mov	r1, r9
 8003952:	008b      	lsls	r3, r1, #2
 8003954:	4641      	mov	r1, r8
 8003956:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800395a:	4641      	mov	r1, r8
 800395c:	008a      	lsls	r2, r1, #2
 800395e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003962:	f7fd f921 	bl	8000ba8 <__aeabi_uldivmod>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4611      	mov	r1, r2
 800396c:	4b38      	ldr	r3, [pc, #224]	@ (8003a50 <UART_SetConfig+0x4e4>)
 800396e:	fba3 2301 	umull	r2, r3, r3, r1
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2264      	movs	r2, #100	@ 0x64
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	1acb      	subs	r3, r1, r3
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	3332      	adds	r3, #50	@ 0x32
 8003980:	4a33      	ldr	r2, [pc, #204]	@ (8003a50 <UART_SetConfig+0x4e4>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800398c:	441c      	add	r4, r3
 800398e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003992:	2200      	movs	r2, #0
 8003994:	673b      	str	r3, [r7, #112]	@ 0x70
 8003996:	677a      	str	r2, [r7, #116]	@ 0x74
 8003998:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	1891      	adds	r1, r2, r2
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	415b      	adcs	r3, r3
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ac:	4641      	mov	r1, r8
 80039ae:	1851      	adds	r1, r2, r1
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	4649      	mov	r1, r9
 80039b4:	414b      	adcs	r3, r1
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039c4:	4659      	mov	r1, fp
 80039c6:	00cb      	lsls	r3, r1, #3
 80039c8:	4651      	mov	r1, sl
 80039ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ce:	4651      	mov	r1, sl
 80039d0:	00ca      	lsls	r2, r1, #3
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	4642      	mov	r2, r8
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039de:	464b      	mov	r3, r9
 80039e0:	460a      	mov	r2, r1
 80039e2:	eb42 0303 	adc.w	r3, r2, r3
 80039e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80039f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a00:	4649      	mov	r1, r9
 8003a02:	008b      	lsls	r3, r1, #2
 8003a04:	4641      	mov	r1, r8
 8003a06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a0a:	4641      	mov	r1, r8
 8003a0c:	008a      	lsls	r2, r1, #2
 8003a0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a12:	f7fd f8c9 	bl	8000ba8 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a50 <UART_SetConfig+0x4e4>)
 8003a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	2164      	movs	r1, #100	@ 0x64
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	3332      	adds	r3, #50	@ 0x32
 8003a2e:	4a08      	ldr	r2, [pc, #32]	@ (8003a50 <UART_SetConfig+0x4e4>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	f003 020f 	and.w	r2, r3, #15
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4422      	add	r2, r4
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	bf00      	nop
 8003a46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a50:	51eb851f 	.word	0x51eb851f

08003a54 <__cvt>:
 8003a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a58:	ec57 6b10 	vmov	r6, r7, d0
 8003a5c:	2f00      	cmp	r7, #0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	4619      	mov	r1, r3
 8003a62:	463b      	mov	r3, r7
 8003a64:	bfbb      	ittet	lt
 8003a66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003a6a:	461f      	movlt	r7, r3
 8003a6c:	2300      	movge	r3, #0
 8003a6e:	232d      	movlt	r3, #45	@ 0x2d
 8003a70:	700b      	strb	r3, [r1, #0]
 8003a72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003a78:	4691      	mov	r9, r2
 8003a7a:	f023 0820 	bic.w	r8, r3, #32
 8003a7e:	bfbc      	itt	lt
 8003a80:	4632      	movlt	r2, r6
 8003a82:	4616      	movlt	r6, r2
 8003a84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a88:	d005      	beq.n	8003a96 <__cvt+0x42>
 8003a8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a8e:	d100      	bne.n	8003a92 <__cvt+0x3e>
 8003a90:	3401      	adds	r4, #1
 8003a92:	2102      	movs	r1, #2
 8003a94:	e000      	b.n	8003a98 <__cvt+0x44>
 8003a96:	2103      	movs	r1, #3
 8003a98:	ab03      	add	r3, sp, #12
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	ab02      	add	r3, sp, #8
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	ec47 6b10 	vmov	d0, r6, r7
 8003aa4:	4653      	mov	r3, sl
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	f000 fe5a 	bl	8004760 <_dtoa_r>
 8003aac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	d119      	bne.n	8003ae8 <__cvt+0x94>
 8003ab4:	f019 0f01 	tst.w	r9, #1
 8003ab8:	d00e      	beq.n	8003ad8 <__cvt+0x84>
 8003aba:	eb00 0904 	add.w	r9, r0, r4
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	4639      	mov	r1, r7
 8003ac6:	f7fc ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8003aca:	b108      	cbz	r0, 8003ad0 <__cvt+0x7c>
 8003acc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003ad0:	2230      	movs	r2, #48	@ 0x30
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	454b      	cmp	r3, r9
 8003ad6:	d31e      	bcc.n	8003b16 <__cvt+0xc2>
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003adc:	1b5b      	subs	r3, r3, r5
 8003ade:	4628      	mov	r0, r5
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	b004      	add	sp, #16
 8003ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003aec:	eb00 0904 	add.w	r9, r0, r4
 8003af0:	d1e5      	bne.n	8003abe <__cvt+0x6a>
 8003af2:	7803      	ldrb	r3, [r0, #0]
 8003af4:	2b30      	cmp	r3, #48	@ 0x30
 8003af6:	d10a      	bne.n	8003b0e <__cvt+0xba>
 8003af8:	2200      	movs	r2, #0
 8003afa:	2300      	movs	r3, #0
 8003afc:	4630      	mov	r0, r6
 8003afe:	4639      	mov	r1, r7
 8003b00:	f7fc ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b04:	b918      	cbnz	r0, 8003b0e <__cvt+0xba>
 8003b06:	f1c4 0401 	rsb	r4, r4, #1
 8003b0a:	f8ca 4000 	str.w	r4, [sl]
 8003b0e:	f8da 3000 	ldr.w	r3, [sl]
 8003b12:	4499      	add	r9, r3
 8003b14:	e7d3      	b.n	8003abe <__cvt+0x6a>
 8003b16:	1c59      	adds	r1, r3, #1
 8003b18:	9103      	str	r1, [sp, #12]
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e7d9      	b.n	8003ad2 <__cvt+0x7e>

08003b1e <__exponent>:
 8003b1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b20:	2900      	cmp	r1, #0
 8003b22:	bfba      	itte	lt
 8003b24:	4249      	neglt	r1, r1
 8003b26:	232d      	movlt	r3, #45	@ 0x2d
 8003b28:	232b      	movge	r3, #43	@ 0x2b
 8003b2a:	2909      	cmp	r1, #9
 8003b2c:	7002      	strb	r2, [r0, #0]
 8003b2e:	7043      	strb	r3, [r0, #1]
 8003b30:	dd29      	ble.n	8003b86 <__exponent+0x68>
 8003b32:	f10d 0307 	add.w	r3, sp, #7
 8003b36:	461d      	mov	r5, r3
 8003b38:	270a      	movs	r7, #10
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b40:	fb07 1416 	mls	r4, r7, r6, r1
 8003b44:	3430      	adds	r4, #48	@ 0x30
 8003b46:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	2c63      	cmp	r4, #99	@ 0x63
 8003b4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b52:	4631      	mov	r1, r6
 8003b54:	dcf1      	bgt.n	8003b3a <__exponent+0x1c>
 8003b56:	3130      	adds	r1, #48	@ 0x30
 8003b58:	1e94      	subs	r4, r2, #2
 8003b5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b5e:	1c41      	adds	r1, r0, #1
 8003b60:	4623      	mov	r3, r4
 8003b62:	42ab      	cmp	r3, r5
 8003b64:	d30a      	bcc.n	8003b7c <__exponent+0x5e>
 8003b66:	f10d 0309 	add.w	r3, sp, #9
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	42ac      	cmp	r4, r5
 8003b6e:	bf88      	it	hi
 8003b70:	2300      	movhi	r3, #0
 8003b72:	3302      	adds	r3, #2
 8003b74:	4403      	add	r3, r0
 8003b76:	1a18      	subs	r0, r3, r0
 8003b78:	b003      	add	sp, #12
 8003b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b80:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b84:	e7ed      	b.n	8003b62 <__exponent+0x44>
 8003b86:	2330      	movs	r3, #48	@ 0x30
 8003b88:	3130      	adds	r1, #48	@ 0x30
 8003b8a:	7083      	strb	r3, [r0, #2]
 8003b8c:	70c1      	strb	r1, [r0, #3]
 8003b8e:	1d03      	adds	r3, r0, #4
 8003b90:	e7f1      	b.n	8003b76 <__exponent+0x58>
	...

08003b94 <_printf_float>:
 8003b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b98:	b08d      	sub	sp, #52	@ 0x34
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003ba0:	4616      	mov	r6, r2
 8003ba2:	461f      	mov	r7, r3
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	f000 fcdb 	bl	8004560 <_localeconv_r>
 8003baa:	6803      	ldr	r3, [r0, #0]
 8003bac:	9304      	str	r3, [sp, #16]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fb5e 	bl	8000270 <strlen>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8003bbc:	9005      	str	r0, [sp, #20]
 8003bbe:	3307      	adds	r3, #7
 8003bc0:	f023 0307 	bic.w	r3, r3, #7
 8003bc4:	f103 0208 	add.w	r2, r3, #8
 8003bc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003bcc:	f8d4 b000 	ldr.w	fp, [r4]
 8003bd0:	f8c8 2000 	str.w	r2, [r8]
 8003bd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003bd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003bdc:	9307      	str	r3, [sp, #28]
 8003bde:	f8cd 8018 	str.w	r8, [sp, #24]
 8003be2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bea:	4b9c      	ldr	r3, [pc, #624]	@ (8003e5c <_printf_float+0x2c8>)
 8003bec:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf0:	f7fc ff9c 	bl	8000b2c <__aeabi_dcmpun>
 8003bf4:	bb70      	cbnz	r0, 8003c54 <_printf_float+0xc0>
 8003bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bfa:	4b98      	ldr	r3, [pc, #608]	@ (8003e5c <_printf_float+0x2c8>)
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003c00:	f7fc ff76 	bl	8000af0 <__aeabi_dcmple>
 8003c04:	bb30      	cbnz	r0, 8003c54 <_printf_float+0xc0>
 8003c06:	2200      	movs	r2, #0
 8003c08:	2300      	movs	r3, #0
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	4649      	mov	r1, r9
 8003c0e:	f7fc ff65 	bl	8000adc <__aeabi_dcmplt>
 8003c12:	b110      	cbz	r0, 8003c1a <_printf_float+0x86>
 8003c14:	232d      	movs	r3, #45	@ 0x2d
 8003c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c1a:	4a91      	ldr	r2, [pc, #580]	@ (8003e60 <_printf_float+0x2cc>)
 8003c1c:	4b91      	ldr	r3, [pc, #580]	@ (8003e64 <_printf_float+0x2d0>)
 8003c1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c22:	bf94      	ite	ls
 8003c24:	4690      	movls	r8, r2
 8003c26:	4698      	movhi	r8, r3
 8003c28:	2303      	movs	r3, #3
 8003c2a:	6123      	str	r3, [r4, #16]
 8003c2c:	f02b 0304 	bic.w	r3, fp, #4
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	f04f 0900 	mov.w	r9, #0
 8003c36:	9700      	str	r7, [sp, #0]
 8003c38:	4633      	mov	r3, r6
 8003c3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f000 f9d2 	bl	8003fe8 <_printf_common>
 8003c44:	3001      	adds	r0, #1
 8003c46:	f040 808d 	bne.w	8003d64 <_printf_float+0x1d0>
 8003c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4e:	b00d      	add	sp, #52	@ 0x34
 8003c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	4640      	mov	r0, r8
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	f7fc ff66 	bl	8000b2c <__aeabi_dcmpun>
 8003c60:	b140      	cbz	r0, 8003c74 <_printf_float+0xe0>
 8003c62:	464b      	mov	r3, r9
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bfbc      	itt	lt
 8003c68:	232d      	movlt	r3, #45	@ 0x2d
 8003c6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e68 <_printf_float+0x2d4>)
 8003c70:	4b7e      	ldr	r3, [pc, #504]	@ (8003e6c <_printf_float+0x2d8>)
 8003c72:	e7d4      	b.n	8003c1e <_printf_float+0x8a>
 8003c74:	6863      	ldr	r3, [r4, #4]
 8003c76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003c7a:	9206      	str	r2, [sp, #24]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	d13b      	bne.n	8003cf8 <_printf_float+0x164>
 8003c80:	2306      	movs	r3, #6
 8003c82:	6063      	str	r3, [r4, #4]
 8003c84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003c88:	2300      	movs	r3, #0
 8003c8a:	6022      	str	r2, [r4, #0]
 8003c8c:	9303      	str	r3, [sp, #12]
 8003c8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003c90:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003c94:	ab09      	add	r3, sp, #36	@ 0x24
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	6861      	ldr	r1, [r4, #4]
 8003c9a:	ec49 8b10 	vmov	d0, r8, r9
 8003c9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f7ff fed6 	bl	8003a54 <__cvt>
 8003ca8:	9b06      	ldr	r3, [sp, #24]
 8003caa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003cac:	2b47      	cmp	r3, #71	@ 0x47
 8003cae:	4680      	mov	r8, r0
 8003cb0:	d129      	bne.n	8003d06 <_printf_float+0x172>
 8003cb2:	1cc8      	adds	r0, r1, #3
 8003cb4:	db02      	blt.n	8003cbc <_printf_float+0x128>
 8003cb6:	6863      	ldr	r3, [r4, #4]
 8003cb8:	4299      	cmp	r1, r3
 8003cba:	dd41      	ble.n	8003d40 <_printf_float+0x1ac>
 8003cbc:	f1aa 0a02 	sub.w	sl, sl, #2
 8003cc0:	fa5f fa8a 	uxtb.w	sl, sl
 8003cc4:	3901      	subs	r1, #1
 8003cc6:	4652      	mov	r2, sl
 8003cc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ccc:	9109      	str	r1, [sp, #36]	@ 0x24
 8003cce:	f7ff ff26 	bl	8003b1e <__exponent>
 8003cd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003cd4:	1813      	adds	r3, r2, r0
 8003cd6:	2a01      	cmp	r2, #1
 8003cd8:	4681      	mov	r9, r0
 8003cda:	6123      	str	r3, [r4, #16]
 8003cdc:	dc02      	bgt.n	8003ce4 <_printf_float+0x150>
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	07d2      	lsls	r2, r2, #31
 8003ce2:	d501      	bpl.n	8003ce8 <_printf_float+0x154>
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0a2      	beq.n	8003c36 <_printf_float+0xa2>
 8003cf0:	232d      	movs	r3, #45	@ 0x2d
 8003cf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cf6:	e79e      	b.n	8003c36 <_printf_float+0xa2>
 8003cf8:	9a06      	ldr	r2, [sp, #24]
 8003cfa:	2a47      	cmp	r2, #71	@ 0x47
 8003cfc:	d1c2      	bne.n	8003c84 <_printf_float+0xf0>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1c0      	bne.n	8003c84 <_printf_float+0xf0>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e7bd      	b.n	8003c82 <_printf_float+0xee>
 8003d06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d0a:	d9db      	bls.n	8003cc4 <_printf_float+0x130>
 8003d0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d10:	d118      	bne.n	8003d44 <_printf_float+0x1b0>
 8003d12:	2900      	cmp	r1, #0
 8003d14:	6863      	ldr	r3, [r4, #4]
 8003d16:	dd0b      	ble.n	8003d30 <_printf_float+0x19c>
 8003d18:	6121      	str	r1, [r4, #16]
 8003d1a:	b913      	cbnz	r3, 8003d22 <_printf_float+0x18e>
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	07d0      	lsls	r0, r2, #31
 8003d20:	d502      	bpl.n	8003d28 <_printf_float+0x194>
 8003d22:	3301      	adds	r3, #1
 8003d24:	440b      	add	r3, r1
 8003d26:	6123      	str	r3, [r4, #16]
 8003d28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003d2a:	f04f 0900 	mov.w	r9, #0
 8003d2e:	e7db      	b.n	8003ce8 <_printf_float+0x154>
 8003d30:	b913      	cbnz	r3, 8003d38 <_printf_float+0x1a4>
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	07d2      	lsls	r2, r2, #31
 8003d36:	d501      	bpl.n	8003d3c <_printf_float+0x1a8>
 8003d38:	3302      	adds	r3, #2
 8003d3a:	e7f4      	b.n	8003d26 <_printf_float+0x192>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e7f2      	b.n	8003d26 <_printf_float+0x192>
 8003d40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d46:	4299      	cmp	r1, r3
 8003d48:	db05      	blt.n	8003d56 <_printf_float+0x1c2>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	6121      	str	r1, [r4, #16]
 8003d4e:	07d8      	lsls	r0, r3, #31
 8003d50:	d5ea      	bpl.n	8003d28 <_printf_float+0x194>
 8003d52:	1c4b      	adds	r3, r1, #1
 8003d54:	e7e7      	b.n	8003d26 <_printf_float+0x192>
 8003d56:	2900      	cmp	r1, #0
 8003d58:	bfd4      	ite	le
 8003d5a:	f1c1 0202 	rsble	r2, r1, #2
 8003d5e:	2201      	movgt	r2, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	e7e0      	b.n	8003d26 <_printf_float+0x192>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	055a      	lsls	r2, r3, #21
 8003d68:	d407      	bmi.n	8003d7a <_printf_float+0x1e6>
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4628      	mov	r0, r5
 8003d72:	47b8      	blx	r7
 8003d74:	3001      	adds	r0, #1
 8003d76:	d12b      	bne.n	8003dd0 <_printf_float+0x23c>
 8003d78:	e767      	b.n	8003c4a <_printf_float+0xb6>
 8003d7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d7e:	f240 80dd 	bls.w	8003f3c <_printf_float+0x3a8>
 8003d82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d86:	2200      	movs	r2, #0
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f7fc fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d033      	beq.n	8003dfa <_printf_float+0x266>
 8003d92:	4a37      	ldr	r2, [pc, #220]	@ (8003e70 <_printf_float+0x2dc>)
 8003d94:	2301      	movs	r3, #1
 8003d96:	4631      	mov	r1, r6
 8003d98:	4628      	mov	r0, r5
 8003d9a:	47b8      	blx	r7
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	f43f af54 	beq.w	8003c4a <_printf_float+0xb6>
 8003da2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003da6:	4543      	cmp	r3, r8
 8003da8:	db02      	blt.n	8003db0 <_printf_float+0x21c>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	07d8      	lsls	r0, r3, #31
 8003dae:	d50f      	bpl.n	8003dd0 <_printf_float+0x23c>
 8003db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003db4:	4631      	mov	r1, r6
 8003db6:	4628      	mov	r0, r5
 8003db8:	47b8      	blx	r7
 8003dba:	3001      	adds	r0, #1
 8003dbc:	f43f af45 	beq.w	8003c4a <_printf_float+0xb6>
 8003dc0:	f04f 0900 	mov.w	r9, #0
 8003dc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003dc8:	f104 0a1a 	add.w	sl, r4, #26
 8003dcc:	45c8      	cmp	r8, r9
 8003dce:	dc09      	bgt.n	8003de4 <_printf_float+0x250>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	079b      	lsls	r3, r3, #30
 8003dd4:	f100 8103 	bmi.w	8003fde <_printf_float+0x44a>
 8003dd8:	68e0      	ldr	r0, [r4, #12]
 8003dda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ddc:	4298      	cmp	r0, r3
 8003dde:	bfb8      	it	lt
 8003de0:	4618      	movlt	r0, r3
 8003de2:	e734      	b.n	8003c4e <_printf_float+0xba>
 8003de4:	2301      	movs	r3, #1
 8003de6:	4652      	mov	r2, sl
 8003de8:	4631      	mov	r1, r6
 8003dea:	4628      	mov	r0, r5
 8003dec:	47b8      	blx	r7
 8003dee:	3001      	adds	r0, #1
 8003df0:	f43f af2b 	beq.w	8003c4a <_printf_float+0xb6>
 8003df4:	f109 0901 	add.w	r9, r9, #1
 8003df8:	e7e8      	b.n	8003dcc <_printf_float+0x238>
 8003dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	dc39      	bgt.n	8003e74 <_printf_float+0x2e0>
 8003e00:	4a1b      	ldr	r2, [pc, #108]	@ (8003e70 <_printf_float+0x2dc>)
 8003e02:	2301      	movs	r3, #1
 8003e04:	4631      	mov	r1, r6
 8003e06:	4628      	mov	r0, r5
 8003e08:	47b8      	blx	r7
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	f43f af1d 	beq.w	8003c4a <_printf_float+0xb6>
 8003e10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003e14:	ea59 0303 	orrs.w	r3, r9, r3
 8003e18:	d102      	bne.n	8003e20 <_printf_float+0x28c>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	07d9      	lsls	r1, r3, #31
 8003e1e:	d5d7      	bpl.n	8003dd0 <_printf_float+0x23c>
 8003e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e24:	4631      	mov	r1, r6
 8003e26:	4628      	mov	r0, r5
 8003e28:	47b8      	blx	r7
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	f43f af0d 	beq.w	8003c4a <_printf_float+0xb6>
 8003e30:	f04f 0a00 	mov.w	sl, #0
 8003e34:	f104 0b1a 	add.w	fp, r4, #26
 8003e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e3a:	425b      	negs	r3, r3
 8003e3c:	4553      	cmp	r3, sl
 8003e3e:	dc01      	bgt.n	8003e44 <_printf_float+0x2b0>
 8003e40:	464b      	mov	r3, r9
 8003e42:	e793      	b.n	8003d6c <_printf_float+0x1d8>
 8003e44:	2301      	movs	r3, #1
 8003e46:	465a      	mov	r2, fp
 8003e48:	4631      	mov	r1, r6
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	47b8      	blx	r7
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f43f aefb 	beq.w	8003c4a <_printf_float+0xb6>
 8003e54:	f10a 0a01 	add.w	sl, sl, #1
 8003e58:	e7ee      	b.n	8003e38 <_printf_float+0x2a4>
 8003e5a:	bf00      	nop
 8003e5c:	7fefffff 	.word	0x7fefffff
 8003e60:	0800673c 	.word	0x0800673c
 8003e64:	08006740 	.word	0x08006740
 8003e68:	08006744 	.word	0x08006744
 8003e6c:	08006748 	.word	0x08006748
 8003e70:	0800674c 	.word	0x0800674c
 8003e74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e7a:	4553      	cmp	r3, sl
 8003e7c:	bfa8      	it	ge
 8003e7e:	4653      	movge	r3, sl
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	4699      	mov	r9, r3
 8003e84:	dc36      	bgt.n	8003ef4 <_printf_float+0x360>
 8003e86:	f04f 0b00 	mov.w	fp, #0
 8003e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e8e:	f104 021a 	add.w	r2, r4, #26
 8003e92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e94:	9306      	str	r3, [sp, #24]
 8003e96:	eba3 0309 	sub.w	r3, r3, r9
 8003e9a:	455b      	cmp	r3, fp
 8003e9c:	dc31      	bgt.n	8003f02 <_printf_float+0x36e>
 8003e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ea0:	459a      	cmp	sl, r3
 8003ea2:	dc3a      	bgt.n	8003f1a <_printf_float+0x386>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	07da      	lsls	r2, r3, #31
 8003ea8:	d437      	bmi.n	8003f1a <_printf_float+0x386>
 8003eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eac:	ebaa 0903 	sub.w	r9, sl, r3
 8003eb0:	9b06      	ldr	r3, [sp, #24]
 8003eb2:	ebaa 0303 	sub.w	r3, sl, r3
 8003eb6:	4599      	cmp	r9, r3
 8003eb8:	bfa8      	it	ge
 8003eba:	4699      	movge	r9, r3
 8003ebc:	f1b9 0f00 	cmp.w	r9, #0
 8003ec0:	dc33      	bgt.n	8003f2a <_printf_float+0x396>
 8003ec2:	f04f 0800 	mov.w	r8, #0
 8003ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003eca:	f104 0b1a 	add.w	fp, r4, #26
 8003ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ed0:	ebaa 0303 	sub.w	r3, sl, r3
 8003ed4:	eba3 0309 	sub.w	r3, r3, r9
 8003ed8:	4543      	cmp	r3, r8
 8003eda:	f77f af79 	ble.w	8003dd0 <_printf_float+0x23c>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	465a      	mov	r2, fp
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	47b8      	blx	r7
 8003ee8:	3001      	adds	r0, #1
 8003eea:	f43f aeae 	beq.w	8003c4a <_printf_float+0xb6>
 8003eee:	f108 0801 	add.w	r8, r8, #1
 8003ef2:	e7ec      	b.n	8003ece <_printf_float+0x33a>
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	4628      	mov	r0, r5
 8003efa:	47b8      	blx	r7
 8003efc:	3001      	adds	r0, #1
 8003efe:	d1c2      	bne.n	8003e86 <_printf_float+0x2f2>
 8003f00:	e6a3      	b.n	8003c4a <_printf_float+0xb6>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4631      	mov	r1, r6
 8003f06:	4628      	mov	r0, r5
 8003f08:	9206      	str	r2, [sp, #24]
 8003f0a:	47b8      	blx	r7
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	f43f ae9c 	beq.w	8003c4a <_printf_float+0xb6>
 8003f12:	9a06      	ldr	r2, [sp, #24]
 8003f14:	f10b 0b01 	add.w	fp, fp, #1
 8003f18:	e7bb      	b.n	8003e92 <_printf_float+0x2fe>
 8003f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f1e:	4631      	mov	r1, r6
 8003f20:	4628      	mov	r0, r5
 8003f22:	47b8      	blx	r7
 8003f24:	3001      	adds	r0, #1
 8003f26:	d1c0      	bne.n	8003eaa <_printf_float+0x316>
 8003f28:	e68f      	b.n	8003c4a <_printf_float+0xb6>
 8003f2a:	9a06      	ldr	r2, [sp, #24]
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	4442      	add	r2, r8
 8003f30:	4631      	mov	r1, r6
 8003f32:	4628      	mov	r0, r5
 8003f34:	47b8      	blx	r7
 8003f36:	3001      	adds	r0, #1
 8003f38:	d1c3      	bne.n	8003ec2 <_printf_float+0x32e>
 8003f3a:	e686      	b.n	8003c4a <_printf_float+0xb6>
 8003f3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003f40:	f1ba 0f01 	cmp.w	sl, #1
 8003f44:	dc01      	bgt.n	8003f4a <_printf_float+0x3b6>
 8003f46:	07db      	lsls	r3, r3, #31
 8003f48:	d536      	bpl.n	8003fb8 <_printf_float+0x424>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	4631      	mov	r1, r6
 8003f50:	4628      	mov	r0, r5
 8003f52:	47b8      	blx	r7
 8003f54:	3001      	adds	r0, #1
 8003f56:	f43f ae78 	beq.w	8003c4a <_printf_float+0xb6>
 8003f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4628      	mov	r0, r5
 8003f62:	47b8      	blx	r7
 8003f64:	3001      	adds	r0, #1
 8003f66:	f43f ae70 	beq.w	8003c4a <_printf_float+0xb6>
 8003f6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2300      	movs	r3, #0
 8003f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f76:	f7fc fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f7a:	b9c0      	cbnz	r0, 8003fae <_printf_float+0x41a>
 8003f7c:	4653      	mov	r3, sl
 8003f7e:	f108 0201 	add.w	r2, r8, #1
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d10c      	bne.n	8003fa6 <_printf_float+0x412>
 8003f8c:	e65d      	b.n	8003c4a <_printf_float+0xb6>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	465a      	mov	r2, fp
 8003f92:	4631      	mov	r1, r6
 8003f94:	4628      	mov	r0, r5
 8003f96:	47b8      	blx	r7
 8003f98:	3001      	adds	r0, #1
 8003f9a:	f43f ae56 	beq.w	8003c4a <_printf_float+0xb6>
 8003f9e:	f108 0801 	add.w	r8, r8, #1
 8003fa2:	45d0      	cmp	r8, sl
 8003fa4:	dbf3      	blt.n	8003f8e <_printf_float+0x3fa>
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003fac:	e6df      	b.n	8003d6e <_printf_float+0x1da>
 8003fae:	f04f 0800 	mov.w	r8, #0
 8003fb2:	f104 0b1a 	add.w	fp, r4, #26
 8003fb6:	e7f4      	b.n	8003fa2 <_printf_float+0x40e>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4642      	mov	r2, r8
 8003fbc:	e7e1      	b.n	8003f82 <_printf_float+0x3ee>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	464a      	mov	r2, r9
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b8      	blx	r7
 8003fc8:	3001      	adds	r0, #1
 8003fca:	f43f ae3e 	beq.w	8003c4a <_printf_float+0xb6>
 8003fce:	f108 0801 	add.w	r8, r8, #1
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003fd6:	1a5b      	subs	r3, r3, r1
 8003fd8:	4543      	cmp	r3, r8
 8003fda:	dcf0      	bgt.n	8003fbe <_printf_float+0x42a>
 8003fdc:	e6fc      	b.n	8003dd8 <_printf_float+0x244>
 8003fde:	f04f 0800 	mov.w	r8, #0
 8003fe2:	f104 0919 	add.w	r9, r4, #25
 8003fe6:	e7f4      	b.n	8003fd2 <_printf_float+0x43e>

08003fe8 <_printf_common>:
 8003fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fec:	4616      	mov	r6, r2
 8003fee:	4698      	mov	r8, r3
 8003ff0:	688a      	ldr	r2, [r1, #8]
 8003ff2:	690b      	ldr	r3, [r1, #16]
 8003ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	bfb8      	it	lt
 8003ffc:	4613      	movlt	r3, r2
 8003ffe:	6033      	str	r3, [r6, #0]
 8004000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004004:	4607      	mov	r7, r0
 8004006:	460c      	mov	r4, r1
 8004008:	b10a      	cbz	r2, 800400e <_printf_common+0x26>
 800400a:	3301      	adds	r3, #1
 800400c:	6033      	str	r3, [r6, #0]
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	0699      	lsls	r1, r3, #26
 8004012:	bf42      	ittt	mi
 8004014:	6833      	ldrmi	r3, [r6, #0]
 8004016:	3302      	addmi	r3, #2
 8004018:	6033      	strmi	r3, [r6, #0]
 800401a:	6825      	ldr	r5, [r4, #0]
 800401c:	f015 0506 	ands.w	r5, r5, #6
 8004020:	d106      	bne.n	8004030 <_printf_common+0x48>
 8004022:	f104 0a19 	add.w	sl, r4, #25
 8004026:	68e3      	ldr	r3, [r4, #12]
 8004028:	6832      	ldr	r2, [r6, #0]
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	42ab      	cmp	r3, r5
 800402e:	dc26      	bgt.n	800407e <_printf_common+0x96>
 8004030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	3b00      	subs	r3, #0
 8004038:	bf18      	it	ne
 800403a:	2301      	movne	r3, #1
 800403c:	0692      	lsls	r2, r2, #26
 800403e:	d42b      	bmi.n	8004098 <_printf_common+0xb0>
 8004040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004044:	4641      	mov	r1, r8
 8004046:	4638      	mov	r0, r7
 8004048:	47c8      	blx	r9
 800404a:	3001      	adds	r0, #1
 800404c:	d01e      	beq.n	800408c <_printf_common+0xa4>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	6922      	ldr	r2, [r4, #16]
 8004052:	f003 0306 	and.w	r3, r3, #6
 8004056:	2b04      	cmp	r3, #4
 8004058:	bf02      	ittt	eq
 800405a:	68e5      	ldreq	r5, [r4, #12]
 800405c:	6833      	ldreq	r3, [r6, #0]
 800405e:	1aed      	subeq	r5, r5, r3
 8004060:	68a3      	ldr	r3, [r4, #8]
 8004062:	bf0c      	ite	eq
 8004064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004068:	2500      	movne	r5, #0
 800406a:	4293      	cmp	r3, r2
 800406c:	bfc4      	itt	gt
 800406e:	1a9b      	subgt	r3, r3, r2
 8004070:	18ed      	addgt	r5, r5, r3
 8004072:	2600      	movs	r6, #0
 8004074:	341a      	adds	r4, #26
 8004076:	42b5      	cmp	r5, r6
 8004078:	d11a      	bne.n	80040b0 <_printf_common+0xc8>
 800407a:	2000      	movs	r0, #0
 800407c:	e008      	b.n	8004090 <_printf_common+0xa8>
 800407e:	2301      	movs	r3, #1
 8004080:	4652      	mov	r2, sl
 8004082:	4641      	mov	r1, r8
 8004084:	4638      	mov	r0, r7
 8004086:	47c8      	blx	r9
 8004088:	3001      	adds	r0, #1
 800408a:	d103      	bne.n	8004094 <_printf_common+0xac>
 800408c:	f04f 30ff 	mov.w	r0, #4294967295
 8004090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004094:	3501      	adds	r5, #1
 8004096:	e7c6      	b.n	8004026 <_printf_common+0x3e>
 8004098:	18e1      	adds	r1, r4, r3
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	2030      	movs	r0, #48	@ 0x30
 800409e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040a2:	4422      	add	r2, r4
 80040a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040ac:	3302      	adds	r3, #2
 80040ae:	e7c7      	b.n	8004040 <_printf_common+0x58>
 80040b0:	2301      	movs	r3, #1
 80040b2:	4622      	mov	r2, r4
 80040b4:	4641      	mov	r1, r8
 80040b6:	4638      	mov	r0, r7
 80040b8:	47c8      	blx	r9
 80040ba:	3001      	adds	r0, #1
 80040bc:	d0e6      	beq.n	800408c <_printf_common+0xa4>
 80040be:	3601      	adds	r6, #1
 80040c0:	e7d9      	b.n	8004076 <_printf_common+0x8e>
	...

080040c4 <_printf_i>:
 80040c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	7e0f      	ldrb	r7, [r1, #24]
 80040ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040cc:	2f78      	cmp	r7, #120	@ 0x78
 80040ce:	4691      	mov	r9, r2
 80040d0:	4680      	mov	r8, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	469a      	mov	sl, r3
 80040d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040da:	d807      	bhi.n	80040ec <_printf_i+0x28>
 80040dc:	2f62      	cmp	r7, #98	@ 0x62
 80040de:	d80a      	bhi.n	80040f6 <_printf_i+0x32>
 80040e0:	2f00      	cmp	r7, #0
 80040e2:	f000 80d2 	beq.w	800428a <_printf_i+0x1c6>
 80040e6:	2f58      	cmp	r7, #88	@ 0x58
 80040e8:	f000 80b9 	beq.w	800425e <_printf_i+0x19a>
 80040ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040f4:	e03a      	b.n	800416c <_printf_i+0xa8>
 80040f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040fa:	2b15      	cmp	r3, #21
 80040fc:	d8f6      	bhi.n	80040ec <_printf_i+0x28>
 80040fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004104 <_printf_i+0x40>)
 8004100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004104:	0800415d 	.word	0x0800415d
 8004108:	08004171 	.word	0x08004171
 800410c:	080040ed 	.word	0x080040ed
 8004110:	080040ed 	.word	0x080040ed
 8004114:	080040ed 	.word	0x080040ed
 8004118:	080040ed 	.word	0x080040ed
 800411c:	08004171 	.word	0x08004171
 8004120:	080040ed 	.word	0x080040ed
 8004124:	080040ed 	.word	0x080040ed
 8004128:	080040ed 	.word	0x080040ed
 800412c:	080040ed 	.word	0x080040ed
 8004130:	08004271 	.word	0x08004271
 8004134:	0800419b 	.word	0x0800419b
 8004138:	0800422b 	.word	0x0800422b
 800413c:	080040ed 	.word	0x080040ed
 8004140:	080040ed 	.word	0x080040ed
 8004144:	08004293 	.word	0x08004293
 8004148:	080040ed 	.word	0x080040ed
 800414c:	0800419b 	.word	0x0800419b
 8004150:	080040ed 	.word	0x080040ed
 8004154:	080040ed 	.word	0x080040ed
 8004158:	08004233 	.word	0x08004233
 800415c:	6833      	ldr	r3, [r6, #0]
 800415e:	1d1a      	adds	r2, r3, #4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6032      	str	r2, [r6, #0]
 8004164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800416c:	2301      	movs	r3, #1
 800416e:	e09d      	b.n	80042ac <_printf_i+0x1e8>
 8004170:	6833      	ldr	r3, [r6, #0]
 8004172:	6820      	ldr	r0, [r4, #0]
 8004174:	1d19      	adds	r1, r3, #4
 8004176:	6031      	str	r1, [r6, #0]
 8004178:	0606      	lsls	r6, r0, #24
 800417a:	d501      	bpl.n	8004180 <_printf_i+0xbc>
 800417c:	681d      	ldr	r5, [r3, #0]
 800417e:	e003      	b.n	8004188 <_printf_i+0xc4>
 8004180:	0645      	lsls	r5, r0, #25
 8004182:	d5fb      	bpl.n	800417c <_printf_i+0xb8>
 8004184:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004188:	2d00      	cmp	r5, #0
 800418a:	da03      	bge.n	8004194 <_printf_i+0xd0>
 800418c:	232d      	movs	r3, #45	@ 0x2d
 800418e:	426d      	negs	r5, r5
 8004190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004194:	4859      	ldr	r0, [pc, #356]	@ (80042fc <_printf_i+0x238>)
 8004196:	230a      	movs	r3, #10
 8004198:	e011      	b.n	80041be <_printf_i+0xfa>
 800419a:	6821      	ldr	r1, [r4, #0]
 800419c:	6833      	ldr	r3, [r6, #0]
 800419e:	0608      	lsls	r0, r1, #24
 80041a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80041a4:	d402      	bmi.n	80041ac <_printf_i+0xe8>
 80041a6:	0649      	lsls	r1, r1, #25
 80041a8:	bf48      	it	mi
 80041aa:	b2ad      	uxthmi	r5, r5
 80041ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80041ae:	4853      	ldr	r0, [pc, #332]	@ (80042fc <_printf_i+0x238>)
 80041b0:	6033      	str	r3, [r6, #0]
 80041b2:	bf14      	ite	ne
 80041b4:	230a      	movne	r3, #10
 80041b6:	2308      	moveq	r3, #8
 80041b8:	2100      	movs	r1, #0
 80041ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041be:	6866      	ldr	r6, [r4, #4]
 80041c0:	60a6      	str	r6, [r4, #8]
 80041c2:	2e00      	cmp	r6, #0
 80041c4:	bfa2      	ittt	ge
 80041c6:	6821      	ldrge	r1, [r4, #0]
 80041c8:	f021 0104 	bicge.w	r1, r1, #4
 80041cc:	6021      	strge	r1, [r4, #0]
 80041ce:	b90d      	cbnz	r5, 80041d4 <_printf_i+0x110>
 80041d0:	2e00      	cmp	r6, #0
 80041d2:	d04b      	beq.n	800426c <_printf_i+0x1a8>
 80041d4:	4616      	mov	r6, r2
 80041d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80041da:	fb03 5711 	mls	r7, r3, r1, r5
 80041de:	5dc7      	ldrb	r7, [r0, r7]
 80041e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041e4:	462f      	mov	r7, r5
 80041e6:	42bb      	cmp	r3, r7
 80041e8:	460d      	mov	r5, r1
 80041ea:	d9f4      	bls.n	80041d6 <_printf_i+0x112>
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d10b      	bne.n	8004208 <_printf_i+0x144>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	07df      	lsls	r7, r3, #31
 80041f4:	d508      	bpl.n	8004208 <_printf_i+0x144>
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	6861      	ldr	r1, [r4, #4]
 80041fa:	4299      	cmp	r1, r3
 80041fc:	bfde      	ittt	le
 80041fe:	2330      	movle	r3, #48	@ 0x30
 8004200:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004204:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004208:	1b92      	subs	r2, r2, r6
 800420a:	6122      	str	r2, [r4, #16]
 800420c:	f8cd a000 	str.w	sl, [sp]
 8004210:	464b      	mov	r3, r9
 8004212:	aa03      	add	r2, sp, #12
 8004214:	4621      	mov	r1, r4
 8004216:	4640      	mov	r0, r8
 8004218:	f7ff fee6 	bl	8003fe8 <_printf_common>
 800421c:	3001      	adds	r0, #1
 800421e:	d14a      	bne.n	80042b6 <_printf_i+0x1f2>
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	b004      	add	sp, #16
 8004226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	f043 0320 	orr.w	r3, r3, #32
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	4833      	ldr	r0, [pc, #204]	@ (8004300 <_printf_i+0x23c>)
 8004234:	2778      	movs	r7, #120	@ 0x78
 8004236:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	6831      	ldr	r1, [r6, #0]
 800423e:	061f      	lsls	r7, r3, #24
 8004240:	f851 5b04 	ldr.w	r5, [r1], #4
 8004244:	d402      	bmi.n	800424c <_printf_i+0x188>
 8004246:	065f      	lsls	r7, r3, #25
 8004248:	bf48      	it	mi
 800424a:	b2ad      	uxthmi	r5, r5
 800424c:	6031      	str	r1, [r6, #0]
 800424e:	07d9      	lsls	r1, r3, #31
 8004250:	bf44      	itt	mi
 8004252:	f043 0320 	orrmi.w	r3, r3, #32
 8004256:	6023      	strmi	r3, [r4, #0]
 8004258:	b11d      	cbz	r5, 8004262 <_printf_i+0x19e>
 800425a:	2310      	movs	r3, #16
 800425c:	e7ac      	b.n	80041b8 <_printf_i+0xf4>
 800425e:	4827      	ldr	r0, [pc, #156]	@ (80042fc <_printf_i+0x238>)
 8004260:	e7e9      	b.n	8004236 <_printf_i+0x172>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	f023 0320 	bic.w	r3, r3, #32
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	e7f6      	b.n	800425a <_printf_i+0x196>
 800426c:	4616      	mov	r6, r2
 800426e:	e7bd      	b.n	80041ec <_printf_i+0x128>
 8004270:	6833      	ldr	r3, [r6, #0]
 8004272:	6825      	ldr	r5, [r4, #0]
 8004274:	6961      	ldr	r1, [r4, #20]
 8004276:	1d18      	adds	r0, r3, #4
 8004278:	6030      	str	r0, [r6, #0]
 800427a:	062e      	lsls	r6, r5, #24
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	d501      	bpl.n	8004284 <_printf_i+0x1c0>
 8004280:	6019      	str	r1, [r3, #0]
 8004282:	e002      	b.n	800428a <_printf_i+0x1c6>
 8004284:	0668      	lsls	r0, r5, #25
 8004286:	d5fb      	bpl.n	8004280 <_printf_i+0x1bc>
 8004288:	8019      	strh	r1, [r3, #0]
 800428a:	2300      	movs	r3, #0
 800428c:	6123      	str	r3, [r4, #16]
 800428e:	4616      	mov	r6, r2
 8004290:	e7bc      	b.n	800420c <_printf_i+0x148>
 8004292:	6833      	ldr	r3, [r6, #0]
 8004294:	1d1a      	adds	r2, r3, #4
 8004296:	6032      	str	r2, [r6, #0]
 8004298:	681e      	ldr	r6, [r3, #0]
 800429a:	6862      	ldr	r2, [r4, #4]
 800429c:	2100      	movs	r1, #0
 800429e:	4630      	mov	r0, r6
 80042a0:	f7fb ff96 	bl	80001d0 <memchr>
 80042a4:	b108      	cbz	r0, 80042aa <_printf_i+0x1e6>
 80042a6:	1b80      	subs	r0, r0, r6
 80042a8:	6060      	str	r0, [r4, #4]
 80042aa:	6863      	ldr	r3, [r4, #4]
 80042ac:	6123      	str	r3, [r4, #16]
 80042ae:	2300      	movs	r3, #0
 80042b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b4:	e7aa      	b.n	800420c <_printf_i+0x148>
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	4632      	mov	r2, r6
 80042ba:	4649      	mov	r1, r9
 80042bc:	4640      	mov	r0, r8
 80042be:	47d0      	blx	sl
 80042c0:	3001      	adds	r0, #1
 80042c2:	d0ad      	beq.n	8004220 <_printf_i+0x15c>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	079b      	lsls	r3, r3, #30
 80042c8:	d413      	bmi.n	80042f2 <_printf_i+0x22e>
 80042ca:	68e0      	ldr	r0, [r4, #12]
 80042cc:	9b03      	ldr	r3, [sp, #12]
 80042ce:	4298      	cmp	r0, r3
 80042d0:	bfb8      	it	lt
 80042d2:	4618      	movlt	r0, r3
 80042d4:	e7a6      	b.n	8004224 <_printf_i+0x160>
 80042d6:	2301      	movs	r3, #1
 80042d8:	4632      	mov	r2, r6
 80042da:	4649      	mov	r1, r9
 80042dc:	4640      	mov	r0, r8
 80042de:	47d0      	blx	sl
 80042e0:	3001      	adds	r0, #1
 80042e2:	d09d      	beq.n	8004220 <_printf_i+0x15c>
 80042e4:	3501      	adds	r5, #1
 80042e6:	68e3      	ldr	r3, [r4, #12]
 80042e8:	9903      	ldr	r1, [sp, #12]
 80042ea:	1a5b      	subs	r3, r3, r1
 80042ec:	42ab      	cmp	r3, r5
 80042ee:	dcf2      	bgt.n	80042d6 <_printf_i+0x212>
 80042f0:	e7eb      	b.n	80042ca <_printf_i+0x206>
 80042f2:	2500      	movs	r5, #0
 80042f4:	f104 0619 	add.w	r6, r4, #25
 80042f8:	e7f5      	b.n	80042e6 <_printf_i+0x222>
 80042fa:	bf00      	nop
 80042fc:	0800674e 	.word	0x0800674e
 8004300:	0800675f 	.word	0x0800675f

08004304 <std>:
 8004304:	2300      	movs	r3, #0
 8004306:	b510      	push	{r4, lr}
 8004308:	4604      	mov	r4, r0
 800430a:	e9c0 3300 	strd	r3, r3, [r0]
 800430e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004312:	6083      	str	r3, [r0, #8]
 8004314:	8181      	strh	r1, [r0, #12]
 8004316:	6643      	str	r3, [r0, #100]	@ 0x64
 8004318:	81c2      	strh	r2, [r0, #14]
 800431a:	6183      	str	r3, [r0, #24]
 800431c:	4619      	mov	r1, r3
 800431e:	2208      	movs	r2, #8
 8004320:	305c      	adds	r0, #92	@ 0x5c
 8004322:	f000 f914 	bl	800454e <memset>
 8004326:	4b0d      	ldr	r3, [pc, #52]	@ (800435c <std+0x58>)
 8004328:	6263      	str	r3, [r4, #36]	@ 0x24
 800432a:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <std+0x5c>)
 800432c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800432e:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <std+0x60>)
 8004330:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <std+0x64>)
 8004334:	6323      	str	r3, [r4, #48]	@ 0x30
 8004336:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <std+0x68>)
 8004338:	6224      	str	r4, [r4, #32]
 800433a:	429c      	cmp	r4, r3
 800433c:	d006      	beq.n	800434c <std+0x48>
 800433e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004342:	4294      	cmp	r4, r2
 8004344:	d002      	beq.n	800434c <std+0x48>
 8004346:	33d0      	adds	r3, #208	@ 0xd0
 8004348:	429c      	cmp	r4, r3
 800434a:	d105      	bne.n	8004358 <std+0x54>
 800434c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004354:	f000 b978 	b.w	8004648 <__retarget_lock_init_recursive>
 8004358:	bd10      	pop	{r4, pc}
 800435a:	bf00      	nop
 800435c:	080044c9 	.word	0x080044c9
 8004360:	080044eb 	.word	0x080044eb
 8004364:	08004523 	.word	0x08004523
 8004368:	08004547 	.word	0x08004547
 800436c:	200002bc 	.word	0x200002bc

08004370 <stdio_exit_handler>:
 8004370:	4a02      	ldr	r2, [pc, #8]	@ (800437c <stdio_exit_handler+0xc>)
 8004372:	4903      	ldr	r1, [pc, #12]	@ (8004380 <stdio_exit_handler+0x10>)
 8004374:	4803      	ldr	r0, [pc, #12]	@ (8004384 <stdio_exit_handler+0x14>)
 8004376:	f000 b869 	b.w	800444c <_fwalk_sglue>
 800437a:	bf00      	nop
 800437c:	2000001c 	.word	0x2000001c
 8004380:	08005fa5 	.word	0x08005fa5
 8004384:	2000002c 	.word	0x2000002c

08004388 <cleanup_stdio>:
 8004388:	6841      	ldr	r1, [r0, #4]
 800438a:	4b0c      	ldr	r3, [pc, #48]	@ (80043bc <cleanup_stdio+0x34>)
 800438c:	4299      	cmp	r1, r3
 800438e:	b510      	push	{r4, lr}
 8004390:	4604      	mov	r4, r0
 8004392:	d001      	beq.n	8004398 <cleanup_stdio+0x10>
 8004394:	f001 fe06 	bl	8005fa4 <_fflush_r>
 8004398:	68a1      	ldr	r1, [r4, #8]
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <cleanup_stdio+0x38>)
 800439c:	4299      	cmp	r1, r3
 800439e:	d002      	beq.n	80043a6 <cleanup_stdio+0x1e>
 80043a0:	4620      	mov	r0, r4
 80043a2:	f001 fdff 	bl	8005fa4 <_fflush_r>
 80043a6:	68e1      	ldr	r1, [r4, #12]
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <cleanup_stdio+0x3c>)
 80043aa:	4299      	cmp	r1, r3
 80043ac:	d004      	beq.n	80043b8 <cleanup_stdio+0x30>
 80043ae:	4620      	mov	r0, r4
 80043b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b4:	f001 bdf6 	b.w	8005fa4 <_fflush_r>
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	bf00      	nop
 80043bc:	200002bc 	.word	0x200002bc
 80043c0:	20000324 	.word	0x20000324
 80043c4:	2000038c 	.word	0x2000038c

080043c8 <global_stdio_init.part.0>:
 80043c8:	b510      	push	{r4, lr}
 80043ca:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <global_stdio_init.part.0+0x30>)
 80043cc:	4c0b      	ldr	r4, [pc, #44]	@ (80043fc <global_stdio_init.part.0+0x34>)
 80043ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004400 <global_stdio_init.part.0+0x38>)
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	4620      	mov	r0, r4
 80043d4:	2200      	movs	r2, #0
 80043d6:	2104      	movs	r1, #4
 80043d8:	f7ff ff94 	bl	8004304 <std>
 80043dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043e0:	2201      	movs	r2, #1
 80043e2:	2109      	movs	r1, #9
 80043e4:	f7ff ff8e 	bl	8004304 <std>
 80043e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043ec:	2202      	movs	r2, #2
 80043ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f2:	2112      	movs	r1, #18
 80043f4:	f7ff bf86 	b.w	8004304 <std>
 80043f8:	200003f4 	.word	0x200003f4
 80043fc:	200002bc 	.word	0x200002bc
 8004400:	08004371 	.word	0x08004371

08004404 <__sfp_lock_acquire>:
 8004404:	4801      	ldr	r0, [pc, #4]	@ (800440c <__sfp_lock_acquire+0x8>)
 8004406:	f000 b920 	b.w	800464a <__retarget_lock_acquire_recursive>
 800440a:	bf00      	nop
 800440c:	200003fd 	.word	0x200003fd

08004410 <__sfp_lock_release>:
 8004410:	4801      	ldr	r0, [pc, #4]	@ (8004418 <__sfp_lock_release+0x8>)
 8004412:	f000 b91b 	b.w	800464c <__retarget_lock_release_recursive>
 8004416:	bf00      	nop
 8004418:	200003fd 	.word	0x200003fd

0800441c <__sinit>:
 800441c:	b510      	push	{r4, lr}
 800441e:	4604      	mov	r4, r0
 8004420:	f7ff fff0 	bl	8004404 <__sfp_lock_acquire>
 8004424:	6a23      	ldr	r3, [r4, #32]
 8004426:	b11b      	cbz	r3, 8004430 <__sinit+0x14>
 8004428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800442c:	f7ff bff0 	b.w	8004410 <__sfp_lock_release>
 8004430:	4b04      	ldr	r3, [pc, #16]	@ (8004444 <__sinit+0x28>)
 8004432:	6223      	str	r3, [r4, #32]
 8004434:	4b04      	ldr	r3, [pc, #16]	@ (8004448 <__sinit+0x2c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f5      	bne.n	8004428 <__sinit+0xc>
 800443c:	f7ff ffc4 	bl	80043c8 <global_stdio_init.part.0>
 8004440:	e7f2      	b.n	8004428 <__sinit+0xc>
 8004442:	bf00      	nop
 8004444:	08004389 	.word	0x08004389
 8004448:	200003f4 	.word	0x200003f4

0800444c <_fwalk_sglue>:
 800444c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004450:	4607      	mov	r7, r0
 8004452:	4688      	mov	r8, r1
 8004454:	4614      	mov	r4, r2
 8004456:	2600      	movs	r6, #0
 8004458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800445c:	f1b9 0901 	subs.w	r9, r9, #1
 8004460:	d505      	bpl.n	800446e <_fwalk_sglue+0x22>
 8004462:	6824      	ldr	r4, [r4, #0]
 8004464:	2c00      	cmp	r4, #0
 8004466:	d1f7      	bne.n	8004458 <_fwalk_sglue+0xc>
 8004468:	4630      	mov	r0, r6
 800446a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800446e:	89ab      	ldrh	r3, [r5, #12]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d907      	bls.n	8004484 <_fwalk_sglue+0x38>
 8004474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004478:	3301      	adds	r3, #1
 800447a:	d003      	beq.n	8004484 <_fwalk_sglue+0x38>
 800447c:	4629      	mov	r1, r5
 800447e:	4638      	mov	r0, r7
 8004480:	47c0      	blx	r8
 8004482:	4306      	orrs	r6, r0
 8004484:	3568      	adds	r5, #104	@ 0x68
 8004486:	e7e9      	b.n	800445c <_fwalk_sglue+0x10>

08004488 <siprintf>:
 8004488:	b40e      	push	{r1, r2, r3}
 800448a:	b500      	push	{lr}
 800448c:	b09c      	sub	sp, #112	@ 0x70
 800448e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004490:	9002      	str	r0, [sp, #8]
 8004492:	9006      	str	r0, [sp, #24]
 8004494:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004498:	4809      	ldr	r0, [pc, #36]	@ (80044c0 <siprintf+0x38>)
 800449a:	9107      	str	r1, [sp, #28]
 800449c:	9104      	str	r1, [sp, #16]
 800449e:	4909      	ldr	r1, [pc, #36]	@ (80044c4 <siprintf+0x3c>)
 80044a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80044a4:	9105      	str	r1, [sp, #20]
 80044a6:	6800      	ldr	r0, [r0, #0]
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	a902      	add	r1, sp, #8
 80044ac:	f001 fbfa 	bl	8005ca4 <_svfiprintf_r>
 80044b0:	9b02      	ldr	r3, [sp, #8]
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	b01c      	add	sp, #112	@ 0x70
 80044b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044bc:	b003      	add	sp, #12
 80044be:	4770      	bx	lr
 80044c0:	20000028 	.word	0x20000028
 80044c4:	ffff0208 	.word	0xffff0208

080044c8 <__sread>:
 80044c8:	b510      	push	{r4, lr}
 80044ca:	460c      	mov	r4, r1
 80044cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d0:	f000 f86c 	bl	80045ac <_read_r>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	bfab      	itete	ge
 80044d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044da:	89a3      	ldrhlt	r3, [r4, #12]
 80044dc:	181b      	addge	r3, r3, r0
 80044de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044e2:	bfac      	ite	ge
 80044e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044e6:	81a3      	strhlt	r3, [r4, #12]
 80044e8:	bd10      	pop	{r4, pc}

080044ea <__swrite>:
 80044ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ee:	461f      	mov	r7, r3
 80044f0:	898b      	ldrh	r3, [r1, #12]
 80044f2:	05db      	lsls	r3, r3, #23
 80044f4:	4605      	mov	r5, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	4616      	mov	r6, r2
 80044fa:	d505      	bpl.n	8004508 <__swrite+0x1e>
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	2302      	movs	r3, #2
 8004502:	2200      	movs	r2, #0
 8004504:	f000 f840 	bl	8004588 <_lseek_r>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800450e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004512:	81a3      	strh	r3, [r4, #12]
 8004514:	4632      	mov	r2, r6
 8004516:	463b      	mov	r3, r7
 8004518:	4628      	mov	r0, r5
 800451a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800451e:	f000 b857 	b.w	80045d0 <_write_r>

08004522 <__sseek>:
 8004522:	b510      	push	{r4, lr}
 8004524:	460c      	mov	r4, r1
 8004526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452a:	f000 f82d 	bl	8004588 <_lseek_r>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	bf15      	itete	ne
 8004534:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004536:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800453a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800453e:	81a3      	strheq	r3, [r4, #12]
 8004540:	bf18      	it	ne
 8004542:	81a3      	strhne	r3, [r4, #12]
 8004544:	bd10      	pop	{r4, pc}

08004546 <__sclose>:
 8004546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454a:	f000 b80d 	b.w	8004568 <_close_r>

0800454e <memset>:
 800454e:	4402      	add	r2, r0
 8004550:	4603      	mov	r3, r0
 8004552:	4293      	cmp	r3, r2
 8004554:	d100      	bne.n	8004558 <memset+0xa>
 8004556:	4770      	bx	lr
 8004558:	f803 1b01 	strb.w	r1, [r3], #1
 800455c:	e7f9      	b.n	8004552 <memset+0x4>
	...

08004560 <_localeconv_r>:
 8004560:	4800      	ldr	r0, [pc, #0]	@ (8004564 <_localeconv_r+0x4>)
 8004562:	4770      	bx	lr
 8004564:	20000168 	.word	0x20000168

08004568 <_close_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4d06      	ldr	r5, [pc, #24]	@ (8004584 <_close_r+0x1c>)
 800456c:	2300      	movs	r3, #0
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	f7fc fff2 	bl	800155c <_close>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_close_r+0x1a>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_close_r+0x1a>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	200003f8 	.word	0x200003f8

08004588 <_lseek_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4d07      	ldr	r5, [pc, #28]	@ (80045a8 <_lseek_r+0x20>)
 800458c:	4604      	mov	r4, r0
 800458e:	4608      	mov	r0, r1
 8004590:	4611      	mov	r1, r2
 8004592:	2200      	movs	r2, #0
 8004594:	602a      	str	r2, [r5, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	f7fd f807 	bl	80015aa <_lseek>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_lseek_r+0x1e>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_lseek_r+0x1e>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	200003f8 	.word	0x200003f8

080045ac <_read_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d07      	ldr	r5, [pc, #28]	@ (80045cc <_read_r+0x20>)
 80045b0:	4604      	mov	r4, r0
 80045b2:	4608      	mov	r0, r1
 80045b4:	4611      	mov	r1, r2
 80045b6:	2200      	movs	r2, #0
 80045b8:	602a      	str	r2, [r5, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f7fc ff95 	bl	80014ea <_read>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_read_r+0x1e>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_read_r+0x1e>
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	200003f8 	.word	0x200003f8

080045d0 <_write_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4d07      	ldr	r5, [pc, #28]	@ (80045f0 <_write_r+0x20>)
 80045d4:	4604      	mov	r4, r0
 80045d6:	4608      	mov	r0, r1
 80045d8:	4611      	mov	r1, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	602a      	str	r2, [r5, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	f7fc ffa0 	bl	8001524 <_write>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_write_r+0x1e>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_write_r+0x1e>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	200003f8 	.word	0x200003f8

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	@ (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000028 	.word	0x20000028

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	@ (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	@ (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	@ (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	@ (8004644 <__libc_init_array+0x44>)
 8004614:	f002 f864 	bl	80066e0 <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08006ab8 	.word	0x08006ab8
 800463c:	08006ab8 	.word	0x08006ab8
 8004640:	08006ab8 	.word	0x08006ab8
 8004644:	08006abc 	.word	0x08006abc

08004648 <__retarget_lock_init_recursive>:
 8004648:	4770      	bx	lr

0800464a <__retarget_lock_acquire_recursive>:
 800464a:	4770      	bx	lr

0800464c <__retarget_lock_release_recursive>:
 800464c:	4770      	bx	lr

0800464e <quorem>:
 800464e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004652:	6903      	ldr	r3, [r0, #16]
 8004654:	690c      	ldr	r4, [r1, #16]
 8004656:	42a3      	cmp	r3, r4
 8004658:	4607      	mov	r7, r0
 800465a:	db7e      	blt.n	800475a <quorem+0x10c>
 800465c:	3c01      	subs	r4, #1
 800465e:	f101 0814 	add.w	r8, r1, #20
 8004662:	00a3      	lsls	r3, r4, #2
 8004664:	f100 0514 	add.w	r5, r0, #20
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004678:	3301      	adds	r3, #1
 800467a:	429a      	cmp	r2, r3
 800467c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004680:	fbb2 f6f3 	udiv	r6, r2, r3
 8004684:	d32e      	bcc.n	80046e4 <quorem+0x96>
 8004686:	f04f 0a00 	mov.w	sl, #0
 800468a:	46c4      	mov	ip, r8
 800468c:	46ae      	mov	lr, r5
 800468e:	46d3      	mov	fp, sl
 8004690:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004694:	b298      	uxth	r0, r3
 8004696:	fb06 a000 	mla	r0, r6, r0, sl
 800469a:	0c02      	lsrs	r2, r0, #16
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	fb06 2303 	mla	r3, r6, r3, r2
 80046a2:	f8de 2000 	ldr.w	r2, [lr]
 80046a6:	b280      	uxth	r0, r0
 80046a8:	b292      	uxth	r2, r2
 80046aa:	1a12      	subs	r2, r2, r0
 80046ac:	445a      	add	r2, fp
 80046ae:	f8de 0000 	ldr.w	r0, [lr]
 80046b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80046bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80046c0:	b292      	uxth	r2, r2
 80046c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80046c6:	45e1      	cmp	r9, ip
 80046c8:	f84e 2b04 	str.w	r2, [lr], #4
 80046cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80046d0:	d2de      	bcs.n	8004690 <quorem+0x42>
 80046d2:	9b00      	ldr	r3, [sp, #0]
 80046d4:	58eb      	ldr	r3, [r5, r3]
 80046d6:	b92b      	cbnz	r3, 80046e4 <quorem+0x96>
 80046d8:	9b01      	ldr	r3, [sp, #4]
 80046da:	3b04      	subs	r3, #4
 80046dc:	429d      	cmp	r5, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	d32f      	bcc.n	8004742 <quorem+0xf4>
 80046e2:	613c      	str	r4, [r7, #16]
 80046e4:	4638      	mov	r0, r7
 80046e6:	f001 f979 	bl	80059dc <__mcmp>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	db25      	blt.n	800473a <quorem+0xec>
 80046ee:	4629      	mov	r1, r5
 80046f0:	2000      	movs	r0, #0
 80046f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80046f6:	f8d1 c000 	ldr.w	ip, [r1]
 80046fa:	fa1f fe82 	uxth.w	lr, r2
 80046fe:	fa1f f38c 	uxth.w	r3, ip
 8004702:	eba3 030e 	sub.w	r3, r3, lr
 8004706:	4403      	add	r3, r0
 8004708:	0c12      	lsrs	r2, r2, #16
 800470a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800470e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004712:	b29b      	uxth	r3, r3
 8004714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004718:	45c1      	cmp	r9, r8
 800471a:	f841 3b04 	str.w	r3, [r1], #4
 800471e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004722:	d2e6      	bcs.n	80046f2 <quorem+0xa4>
 8004724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004728:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800472c:	b922      	cbnz	r2, 8004738 <quorem+0xea>
 800472e:	3b04      	subs	r3, #4
 8004730:	429d      	cmp	r5, r3
 8004732:	461a      	mov	r2, r3
 8004734:	d30b      	bcc.n	800474e <quorem+0x100>
 8004736:	613c      	str	r4, [r7, #16]
 8004738:	3601      	adds	r6, #1
 800473a:	4630      	mov	r0, r6
 800473c:	b003      	add	sp, #12
 800473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	3b04      	subs	r3, #4
 8004746:	2a00      	cmp	r2, #0
 8004748:	d1cb      	bne.n	80046e2 <quorem+0x94>
 800474a:	3c01      	subs	r4, #1
 800474c:	e7c6      	b.n	80046dc <quorem+0x8e>
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	3b04      	subs	r3, #4
 8004752:	2a00      	cmp	r2, #0
 8004754:	d1ef      	bne.n	8004736 <quorem+0xe8>
 8004756:	3c01      	subs	r4, #1
 8004758:	e7ea      	b.n	8004730 <quorem+0xe2>
 800475a:	2000      	movs	r0, #0
 800475c:	e7ee      	b.n	800473c <quorem+0xee>
	...

08004760 <_dtoa_r>:
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	69c7      	ldr	r7, [r0, #28]
 8004766:	b099      	sub	sp, #100	@ 0x64
 8004768:	ed8d 0b02 	vstr	d0, [sp, #8]
 800476c:	ec55 4b10 	vmov	r4, r5, d0
 8004770:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004772:	9109      	str	r1, [sp, #36]	@ 0x24
 8004774:	4683      	mov	fp, r0
 8004776:	920e      	str	r2, [sp, #56]	@ 0x38
 8004778:	9313      	str	r3, [sp, #76]	@ 0x4c
 800477a:	b97f      	cbnz	r7, 800479c <_dtoa_r+0x3c>
 800477c:	2010      	movs	r0, #16
 800477e:	f000 fdfd 	bl	800537c <malloc>
 8004782:	4602      	mov	r2, r0
 8004784:	f8cb 001c 	str.w	r0, [fp, #28]
 8004788:	b920      	cbnz	r0, 8004794 <_dtoa_r+0x34>
 800478a:	4ba7      	ldr	r3, [pc, #668]	@ (8004a28 <_dtoa_r+0x2c8>)
 800478c:	21ef      	movs	r1, #239	@ 0xef
 800478e:	48a7      	ldr	r0, [pc, #668]	@ (8004a2c <_dtoa_r+0x2cc>)
 8004790:	f001 fc68 	bl	8006064 <__assert_func>
 8004794:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004798:	6007      	str	r7, [r0, #0]
 800479a:	60c7      	str	r7, [r0, #12]
 800479c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	b159      	cbz	r1, 80047bc <_dtoa_r+0x5c>
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	604a      	str	r2, [r1, #4]
 80047a8:	2301      	movs	r3, #1
 80047aa:	4093      	lsls	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
 80047ae:	4658      	mov	r0, fp
 80047b0:	f000 feda 	bl	8005568 <_Bfree>
 80047b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	1e2b      	subs	r3, r5, #0
 80047be:	bfb9      	ittee	lt
 80047c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80047c4:	9303      	strlt	r3, [sp, #12]
 80047c6:	2300      	movge	r3, #0
 80047c8:	6033      	strge	r3, [r6, #0]
 80047ca:	9f03      	ldr	r7, [sp, #12]
 80047cc:	4b98      	ldr	r3, [pc, #608]	@ (8004a30 <_dtoa_r+0x2d0>)
 80047ce:	bfbc      	itt	lt
 80047d0:	2201      	movlt	r2, #1
 80047d2:	6032      	strlt	r2, [r6, #0]
 80047d4:	43bb      	bics	r3, r7
 80047d6:	d112      	bne.n	80047fe <_dtoa_r+0x9e>
 80047d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80047da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80047e4:	4323      	orrs	r3, r4
 80047e6:	f000 854d 	beq.w	8005284 <_dtoa_r+0xb24>
 80047ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80047ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004a44 <_dtoa_r+0x2e4>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 854f 	beq.w	8005294 <_dtoa_r+0xb34>
 80047f6:	f10a 0303 	add.w	r3, sl, #3
 80047fa:	f000 bd49 	b.w	8005290 <_dtoa_r+0xb30>
 80047fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004802:	2200      	movs	r2, #0
 8004804:	ec51 0b17 	vmov	r0, r1, d7
 8004808:	2300      	movs	r3, #0
 800480a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800480e:	f7fc f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004812:	4680      	mov	r8, r0
 8004814:	b158      	cbz	r0, 800482e <_dtoa_r+0xce>
 8004816:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004818:	2301      	movs	r3, #1
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800481e:	b113      	cbz	r3, 8004826 <_dtoa_r+0xc6>
 8004820:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004822:	4b84      	ldr	r3, [pc, #528]	@ (8004a34 <_dtoa_r+0x2d4>)
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004a48 <_dtoa_r+0x2e8>
 800482a:	f000 bd33 	b.w	8005294 <_dtoa_r+0xb34>
 800482e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004832:	aa16      	add	r2, sp, #88	@ 0x58
 8004834:	a917      	add	r1, sp, #92	@ 0x5c
 8004836:	4658      	mov	r0, fp
 8004838:	f001 f980 	bl	8005b3c <__d2b>
 800483c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004840:	4681      	mov	r9, r0
 8004842:	2e00      	cmp	r6, #0
 8004844:	d077      	beq.n	8004936 <_dtoa_r+0x1d6>
 8004846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004848:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800484c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004854:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004858:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800485c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004860:	4619      	mov	r1, r3
 8004862:	2200      	movs	r2, #0
 8004864:	4b74      	ldr	r3, [pc, #464]	@ (8004a38 <_dtoa_r+0x2d8>)
 8004866:	f7fb fd0f 	bl	8000288 <__aeabi_dsub>
 800486a:	a369      	add	r3, pc, #420	@ (adr r3, 8004a10 <_dtoa_r+0x2b0>)
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f7fb fec2 	bl	80005f8 <__aeabi_dmul>
 8004874:	a368      	add	r3, pc, #416	@ (adr r3, 8004a18 <_dtoa_r+0x2b8>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f7fb fd07 	bl	800028c <__adddf3>
 800487e:	4604      	mov	r4, r0
 8004880:	4630      	mov	r0, r6
 8004882:	460d      	mov	r5, r1
 8004884:	f7fb fe4e 	bl	8000524 <__aeabi_i2d>
 8004888:	a365      	add	r3, pc, #404	@ (adr r3, 8004a20 <_dtoa_r+0x2c0>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	f7fb feb3 	bl	80005f8 <__aeabi_dmul>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4620      	mov	r0, r4
 8004898:	4629      	mov	r1, r5
 800489a:	f7fb fcf7 	bl	800028c <__adddf3>
 800489e:	4604      	mov	r4, r0
 80048a0:	460d      	mov	r5, r1
 80048a2:	f7fc f959 	bl	8000b58 <__aeabi_d2iz>
 80048a6:	2200      	movs	r2, #0
 80048a8:	4607      	mov	r7, r0
 80048aa:	2300      	movs	r3, #0
 80048ac:	4620      	mov	r0, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	f7fc f914 	bl	8000adc <__aeabi_dcmplt>
 80048b4:	b140      	cbz	r0, 80048c8 <_dtoa_r+0x168>
 80048b6:	4638      	mov	r0, r7
 80048b8:	f7fb fe34 	bl	8000524 <__aeabi_i2d>
 80048bc:	4622      	mov	r2, r4
 80048be:	462b      	mov	r3, r5
 80048c0:	f7fc f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80048c4:	b900      	cbnz	r0, 80048c8 <_dtoa_r+0x168>
 80048c6:	3f01      	subs	r7, #1
 80048c8:	2f16      	cmp	r7, #22
 80048ca:	d851      	bhi.n	8004970 <_dtoa_r+0x210>
 80048cc:	4b5b      	ldr	r3, [pc, #364]	@ (8004a3c <_dtoa_r+0x2dc>)
 80048ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048da:	f7fc f8ff 	bl	8000adc <__aeabi_dcmplt>
 80048de:	2800      	cmp	r0, #0
 80048e0:	d048      	beq.n	8004974 <_dtoa_r+0x214>
 80048e2:	3f01      	subs	r7, #1
 80048e4:	2300      	movs	r3, #0
 80048e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80048e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80048ea:	1b9b      	subs	r3, r3, r6
 80048ec:	1e5a      	subs	r2, r3, #1
 80048ee:	bf44      	itt	mi
 80048f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80048f4:	2300      	movmi	r3, #0
 80048f6:	9208      	str	r2, [sp, #32]
 80048f8:	bf54      	ite	pl
 80048fa:	f04f 0800 	movpl.w	r8, #0
 80048fe:	9308      	strmi	r3, [sp, #32]
 8004900:	2f00      	cmp	r7, #0
 8004902:	db39      	blt.n	8004978 <_dtoa_r+0x218>
 8004904:	9b08      	ldr	r3, [sp, #32]
 8004906:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004908:	443b      	add	r3, r7
 800490a:	9308      	str	r3, [sp, #32]
 800490c:	2300      	movs	r3, #0
 800490e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004912:	2b09      	cmp	r3, #9
 8004914:	d864      	bhi.n	80049e0 <_dtoa_r+0x280>
 8004916:	2b05      	cmp	r3, #5
 8004918:	bfc4      	itt	gt
 800491a:	3b04      	subgt	r3, #4
 800491c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800491e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004920:	f1a3 0302 	sub.w	r3, r3, #2
 8004924:	bfcc      	ite	gt
 8004926:	2400      	movgt	r4, #0
 8004928:	2401      	movle	r4, #1
 800492a:	2b03      	cmp	r3, #3
 800492c:	d863      	bhi.n	80049f6 <_dtoa_r+0x296>
 800492e:	e8df f003 	tbb	[pc, r3]
 8004932:	372a      	.short	0x372a
 8004934:	5535      	.short	0x5535
 8004936:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800493a:	441e      	add	r6, r3
 800493c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004940:	2b20      	cmp	r3, #32
 8004942:	bfc1      	itttt	gt
 8004944:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004948:	409f      	lslgt	r7, r3
 800494a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800494e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004952:	bfd6      	itet	le
 8004954:	f1c3 0320 	rsble	r3, r3, #32
 8004958:	ea47 0003 	orrgt.w	r0, r7, r3
 800495c:	fa04 f003 	lslle.w	r0, r4, r3
 8004960:	f7fb fdd0 	bl	8000504 <__aeabi_ui2d>
 8004964:	2201      	movs	r2, #1
 8004966:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800496a:	3e01      	subs	r6, #1
 800496c:	9214      	str	r2, [sp, #80]	@ 0x50
 800496e:	e777      	b.n	8004860 <_dtoa_r+0x100>
 8004970:	2301      	movs	r3, #1
 8004972:	e7b8      	b.n	80048e6 <_dtoa_r+0x186>
 8004974:	9012      	str	r0, [sp, #72]	@ 0x48
 8004976:	e7b7      	b.n	80048e8 <_dtoa_r+0x188>
 8004978:	427b      	negs	r3, r7
 800497a:	930a      	str	r3, [sp, #40]	@ 0x28
 800497c:	2300      	movs	r3, #0
 800497e:	eba8 0807 	sub.w	r8, r8, r7
 8004982:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004984:	e7c4      	b.n	8004910 <_dtoa_r+0x1b0>
 8004986:	2300      	movs	r3, #0
 8004988:	930b      	str	r3, [sp, #44]	@ 0x2c
 800498a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	dc35      	bgt.n	80049fc <_dtoa_r+0x29c>
 8004990:	2301      	movs	r3, #1
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	9307      	str	r3, [sp, #28]
 8004996:	461a      	mov	r2, r3
 8004998:	920e      	str	r2, [sp, #56]	@ 0x38
 800499a:	e00b      	b.n	80049b4 <_dtoa_r+0x254>
 800499c:	2301      	movs	r3, #1
 800499e:	e7f3      	b.n	8004988 <_dtoa_r+0x228>
 80049a0:	2300      	movs	r3, #0
 80049a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	3301      	adds	r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	9307      	str	r3, [sp, #28]
 80049b0:	bfb8      	it	lt
 80049b2:	2301      	movlt	r3, #1
 80049b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80049b8:	2100      	movs	r1, #0
 80049ba:	2204      	movs	r2, #4
 80049bc:	f102 0514 	add.w	r5, r2, #20
 80049c0:	429d      	cmp	r5, r3
 80049c2:	d91f      	bls.n	8004a04 <_dtoa_r+0x2a4>
 80049c4:	6041      	str	r1, [r0, #4]
 80049c6:	4658      	mov	r0, fp
 80049c8:	f000 fd8e 	bl	80054e8 <_Balloc>
 80049cc:	4682      	mov	sl, r0
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d13c      	bne.n	8004a4c <_dtoa_r+0x2ec>
 80049d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a40 <_dtoa_r+0x2e0>)
 80049d4:	4602      	mov	r2, r0
 80049d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80049da:	e6d8      	b.n	800478e <_dtoa_r+0x2e>
 80049dc:	2301      	movs	r3, #1
 80049de:	e7e0      	b.n	80049a2 <_dtoa_r+0x242>
 80049e0:	2401      	movs	r4, #1
 80049e2:	2300      	movs	r3, #0
 80049e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	9307      	str	r3, [sp, #28]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2312      	movs	r3, #18
 80049f4:	e7d0      	b.n	8004998 <_dtoa_r+0x238>
 80049f6:	2301      	movs	r3, #1
 80049f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049fa:	e7f5      	b.n	80049e8 <_dtoa_r+0x288>
 80049fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	9307      	str	r3, [sp, #28]
 8004a02:	e7d7      	b.n	80049b4 <_dtoa_r+0x254>
 8004a04:	3101      	adds	r1, #1
 8004a06:	0052      	lsls	r2, r2, #1
 8004a08:	e7d8      	b.n	80049bc <_dtoa_r+0x25c>
 8004a0a:	bf00      	nop
 8004a0c:	f3af 8000 	nop.w
 8004a10:	636f4361 	.word	0x636f4361
 8004a14:	3fd287a7 	.word	0x3fd287a7
 8004a18:	8b60c8b3 	.word	0x8b60c8b3
 8004a1c:	3fc68a28 	.word	0x3fc68a28
 8004a20:	509f79fb 	.word	0x509f79fb
 8004a24:	3fd34413 	.word	0x3fd34413
 8004a28:	0800677d 	.word	0x0800677d
 8004a2c:	08006794 	.word	0x08006794
 8004a30:	7ff00000 	.word	0x7ff00000
 8004a34:	0800674d 	.word	0x0800674d
 8004a38:	3ff80000 	.word	0x3ff80000
 8004a3c:	08006890 	.word	0x08006890
 8004a40:	080067ec 	.word	0x080067ec
 8004a44:	08006779 	.word	0x08006779
 8004a48:	0800674c 	.word	0x0800674c
 8004a4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004a50:	6018      	str	r0, [r3, #0]
 8004a52:	9b07      	ldr	r3, [sp, #28]
 8004a54:	2b0e      	cmp	r3, #14
 8004a56:	f200 80a4 	bhi.w	8004ba2 <_dtoa_r+0x442>
 8004a5a:	2c00      	cmp	r4, #0
 8004a5c:	f000 80a1 	beq.w	8004ba2 <_dtoa_r+0x442>
 8004a60:	2f00      	cmp	r7, #0
 8004a62:	dd33      	ble.n	8004acc <_dtoa_r+0x36c>
 8004a64:	4bad      	ldr	r3, [pc, #692]	@ (8004d1c <_dtoa_r+0x5bc>)
 8004a66:	f007 020f 	and.w	r2, r7, #15
 8004a6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a6e:	ed93 7b00 	vldr	d7, [r3]
 8004a72:	05f8      	lsls	r0, r7, #23
 8004a74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004a78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004a7c:	d516      	bpl.n	8004aac <_dtoa_r+0x34c>
 8004a7e:	4ba8      	ldr	r3, [pc, #672]	@ (8004d20 <_dtoa_r+0x5c0>)
 8004a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a88:	f7fb fee0 	bl	800084c <__aeabi_ddiv>
 8004a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a90:	f004 040f 	and.w	r4, r4, #15
 8004a94:	2603      	movs	r6, #3
 8004a96:	4da2      	ldr	r5, [pc, #648]	@ (8004d20 <_dtoa_r+0x5c0>)
 8004a98:	b954      	cbnz	r4, 8004ab0 <_dtoa_r+0x350>
 8004a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aa2:	f7fb fed3 	bl	800084c <__aeabi_ddiv>
 8004aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aaa:	e028      	b.n	8004afe <_dtoa_r+0x39e>
 8004aac:	2602      	movs	r6, #2
 8004aae:	e7f2      	b.n	8004a96 <_dtoa_r+0x336>
 8004ab0:	07e1      	lsls	r1, r4, #31
 8004ab2:	d508      	bpl.n	8004ac6 <_dtoa_r+0x366>
 8004ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004abc:	f7fb fd9c 	bl	80005f8 <__aeabi_dmul>
 8004ac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ac4:	3601      	adds	r6, #1
 8004ac6:	1064      	asrs	r4, r4, #1
 8004ac8:	3508      	adds	r5, #8
 8004aca:	e7e5      	b.n	8004a98 <_dtoa_r+0x338>
 8004acc:	f000 80d2 	beq.w	8004c74 <_dtoa_r+0x514>
 8004ad0:	427c      	negs	r4, r7
 8004ad2:	4b92      	ldr	r3, [pc, #584]	@ (8004d1c <_dtoa_r+0x5bc>)
 8004ad4:	4d92      	ldr	r5, [pc, #584]	@ (8004d20 <_dtoa_r+0x5c0>)
 8004ad6:	f004 020f 	and.w	r2, r4, #15
 8004ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ae6:	f7fb fd87 	bl	80005f8 <__aeabi_dmul>
 8004aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aee:	1124      	asrs	r4, r4, #4
 8004af0:	2300      	movs	r3, #0
 8004af2:	2602      	movs	r6, #2
 8004af4:	2c00      	cmp	r4, #0
 8004af6:	f040 80b2 	bne.w	8004c5e <_dtoa_r+0x4fe>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1d3      	bne.n	8004aa6 <_dtoa_r+0x346>
 8004afe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004b00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80b7 	beq.w	8004c78 <_dtoa_r+0x518>
 8004b0a:	4b86      	ldr	r3, [pc, #536]	@ (8004d24 <_dtoa_r+0x5c4>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7fb ffe3 	bl	8000adc <__aeabi_dcmplt>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f000 80ae 	beq.w	8004c78 <_dtoa_r+0x518>
 8004b1c:	9b07      	ldr	r3, [sp, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80aa 	beq.w	8004c78 <_dtoa_r+0x518>
 8004b24:	9b00      	ldr	r3, [sp, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	dd37      	ble.n	8004b9a <_dtoa_r+0x43a>
 8004b2a:	1e7b      	subs	r3, r7, #1
 8004b2c:	9304      	str	r3, [sp, #16]
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4b7d      	ldr	r3, [pc, #500]	@ (8004d28 <_dtoa_r+0x5c8>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7fb fd5f 	bl	80005f8 <__aeabi_dmul>
 8004b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b3e:	9c00      	ldr	r4, [sp, #0]
 8004b40:	3601      	adds	r6, #1
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7fb fcee 	bl	8000524 <__aeabi_i2d>
 8004b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b4c:	f7fb fd54 	bl	80005f8 <__aeabi_dmul>
 8004b50:	4b76      	ldr	r3, [pc, #472]	@ (8004d2c <_dtoa_r+0x5cc>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	f7fb fb9a 	bl	800028c <__adddf3>
 8004b58:	4605      	mov	r5, r0
 8004b5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004b5e:	2c00      	cmp	r4, #0
 8004b60:	f040 808d 	bne.w	8004c7e <_dtoa_r+0x51e>
 8004b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b68:	4b71      	ldr	r3, [pc, #452]	@ (8004d30 <_dtoa_r+0x5d0>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f7fb fb8c 	bl	8000288 <__aeabi_dsub>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b78:	462a      	mov	r2, r5
 8004b7a:	4633      	mov	r3, r6
 8004b7c:	f7fb ffcc 	bl	8000b18 <__aeabi_dcmpgt>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f040 828b 	bne.w	800509c <_dtoa_r+0x93c>
 8004b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b8a:	462a      	mov	r2, r5
 8004b8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b90:	f7fb ffa4 	bl	8000adc <__aeabi_dcmplt>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f040 8128 	bne.w	8004dea <_dtoa_r+0x68a>
 8004b9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004b9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004ba2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f2c0 815a 	blt.w	8004e5e <_dtoa_r+0x6fe>
 8004baa:	2f0e      	cmp	r7, #14
 8004bac:	f300 8157 	bgt.w	8004e5e <_dtoa_r+0x6fe>
 8004bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8004d1c <_dtoa_r+0x5bc>)
 8004bb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bb6:	ed93 7b00 	vldr	d7, [r3]
 8004bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	ed8d 7b00 	vstr	d7, [sp]
 8004bc2:	da03      	bge.n	8004bcc <_dtoa_r+0x46c>
 8004bc4:	9b07      	ldr	r3, [sp, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f340 8101 	ble.w	8004dce <_dtoa_r+0x66e>
 8004bcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004bd0:	4656      	mov	r6, sl
 8004bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	4629      	mov	r1, r5
 8004bda:	f7fb fe37 	bl	800084c <__aeabi_ddiv>
 8004bde:	f7fb ffbb 	bl	8000b58 <__aeabi_d2iz>
 8004be2:	4680      	mov	r8, r0
 8004be4:	f7fb fc9e 	bl	8000524 <__aeabi_i2d>
 8004be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bec:	f7fb fd04 	bl	80005f8 <__aeabi_dmul>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004bfc:	f7fb fb44 	bl	8000288 <__aeabi_dsub>
 8004c00:	f806 4b01 	strb.w	r4, [r6], #1
 8004c04:	9d07      	ldr	r5, [sp, #28]
 8004c06:	eba6 040a 	sub.w	r4, r6, sl
 8004c0a:	42a5      	cmp	r5, r4
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	f040 8117 	bne.w	8004e42 <_dtoa_r+0x6e2>
 8004c14:	f7fb fb3a 	bl	800028c <__adddf3>
 8004c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	460d      	mov	r5, r1
 8004c20:	f7fb ff7a 	bl	8000b18 <__aeabi_dcmpgt>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f040 80f9 	bne.w	8004e1c <_dtoa_r+0x6bc>
 8004c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c2e:	4620      	mov	r0, r4
 8004c30:	4629      	mov	r1, r5
 8004c32:	f7fb ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c36:	b118      	cbz	r0, 8004c40 <_dtoa_r+0x4e0>
 8004c38:	f018 0f01 	tst.w	r8, #1
 8004c3c:	f040 80ee 	bne.w	8004e1c <_dtoa_r+0x6bc>
 8004c40:	4649      	mov	r1, r9
 8004c42:	4658      	mov	r0, fp
 8004c44:	f000 fc90 	bl	8005568 <_Bfree>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	7033      	strb	r3, [r6, #0]
 8004c4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004c4e:	3701      	adds	r7, #1
 8004c50:	601f      	str	r7, [r3, #0]
 8004c52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 831d 	beq.w	8005294 <_dtoa_r+0xb34>
 8004c5a:	601e      	str	r6, [r3, #0]
 8004c5c:	e31a      	b.n	8005294 <_dtoa_r+0xb34>
 8004c5e:	07e2      	lsls	r2, r4, #31
 8004c60:	d505      	bpl.n	8004c6e <_dtoa_r+0x50e>
 8004c62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c66:	f7fb fcc7 	bl	80005f8 <__aeabi_dmul>
 8004c6a:	3601      	adds	r6, #1
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	1064      	asrs	r4, r4, #1
 8004c70:	3508      	adds	r5, #8
 8004c72:	e73f      	b.n	8004af4 <_dtoa_r+0x394>
 8004c74:	2602      	movs	r6, #2
 8004c76:	e742      	b.n	8004afe <_dtoa_r+0x39e>
 8004c78:	9c07      	ldr	r4, [sp, #28]
 8004c7a:	9704      	str	r7, [sp, #16]
 8004c7c:	e761      	b.n	8004b42 <_dtoa_r+0x3e2>
 8004c7e:	4b27      	ldr	r3, [pc, #156]	@ (8004d1c <_dtoa_r+0x5bc>)
 8004c80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c8a:	4454      	add	r4, sl
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	d053      	beq.n	8004d38 <_dtoa_r+0x5d8>
 8004c90:	4928      	ldr	r1, [pc, #160]	@ (8004d34 <_dtoa_r+0x5d4>)
 8004c92:	2000      	movs	r0, #0
 8004c94:	f7fb fdda 	bl	800084c <__aeabi_ddiv>
 8004c98:	4633      	mov	r3, r6
 8004c9a:	462a      	mov	r2, r5
 8004c9c:	f7fb faf4 	bl	8000288 <__aeabi_dsub>
 8004ca0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ca4:	4656      	mov	r6, sl
 8004ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004caa:	f7fb ff55 	bl	8000b58 <__aeabi_d2iz>
 8004cae:	4605      	mov	r5, r0
 8004cb0:	f7fb fc38 	bl	8000524 <__aeabi_i2d>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cbc:	f7fb fae4 	bl	8000288 <__aeabi_dsub>
 8004cc0:	3530      	adds	r5, #48	@ 0x30
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cca:	f806 5b01 	strb.w	r5, [r6], #1
 8004cce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cd2:	f7fb ff03 	bl	8000adc <__aeabi_dcmplt>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d171      	bne.n	8004dbe <_dtoa_r+0x65e>
 8004cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cde:	4911      	ldr	r1, [pc, #68]	@ (8004d24 <_dtoa_r+0x5c4>)
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f7fb fad1 	bl	8000288 <__aeabi_dsub>
 8004ce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cea:	f7fb fef7 	bl	8000adc <__aeabi_dcmplt>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	f040 8095 	bne.w	8004e1e <_dtoa_r+0x6be>
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	f43f af50 	beq.w	8004b9a <_dtoa_r+0x43a>
 8004cfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <_dtoa_r+0x5c8>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	f7fb fc79 	bl	80005f8 <__aeabi_dmul>
 8004d06:	4b08      	ldr	r3, [pc, #32]	@ (8004d28 <_dtoa_r+0x5c8>)
 8004d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d12:	f7fb fc71 	bl	80005f8 <__aeabi_dmul>
 8004d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d1a:	e7c4      	b.n	8004ca6 <_dtoa_r+0x546>
 8004d1c:	08006890 	.word	0x08006890
 8004d20:	08006868 	.word	0x08006868
 8004d24:	3ff00000 	.word	0x3ff00000
 8004d28:	40240000 	.word	0x40240000
 8004d2c:	401c0000 	.word	0x401c0000
 8004d30:	40140000 	.word	0x40140000
 8004d34:	3fe00000 	.word	0x3fe00000
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f7fb fc5c 	bl	80005f8 <__aeabi_dmul>
 8004d40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d44:	9415      	str	r4, [sp, #84]	@ 0x54
 8004d46:	4656      	mov	r6, sl
 8004d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d4c:	f7fb ff04 	bl	8000b58 <__aeabi_d2iz>
 8004d50:	4605      	mov	r5, r0
 8004d52:	f7fb fbe7 	bl	8000524 <__aeabi_i2d>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d5e:	f7fb fa93 	bl	8000288 <__aeabi_dsub>
 8004d62:	3530      	adds	r5, #48	@ 0x30
 8004d64:	f806 5b01 	strb.w	r5, [r6], #1
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	42a6      	cmp	r6, r4
 8004d6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	d124      	bne.n	8004dc2 <_dtoa_r+0x662>
 8004d78:	4bac      	ldr	r3, [pc, #688]	@ (800502c <_dtoa_r+0x8cc>)
 8004d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d7e:	f7fb fa85 	bl	800028c <__adddf3>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d8a:	f7fb fec5 	bl	8000b18 <__aeabi_dcmpgt>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d145      	bne.n	8004e1e <_dtoa_r+0x6be>
 8004d92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d96:	49a5      	ldr	r1, [pc, #660]	@ (800502c <_dtoa_r+0x8cc>)
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f7fb fa75 	bl	8000288 <__aeabi_dsub>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da6:	f7fb fe99 	bl	8000adc <__aeabi_dcmplt>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f43f aef5 	beq.w	8004b9a <_dtoa_r+0x43a>
 8004db0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004db2:	1e73      	subs	r3, r6, #1
 8004db4:	9315      	str	r3, [sp, #84]	@ 0x54
 8004db6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004dba:	2b30      	cmp	r3, #48	@ 0x30
 8004dbc:	d0f8      	beq.n	8004db0 <_dtoa_r+0x650>
 8004dbe:	9f04      	ldr	r7, [sp, #16]
 8004dc0:	e73e      	b.n	8004c40 <_dtoa_r+0x4e0>
 8004dc2:	4b9b      	ldr	r3, [pc, #620]	@ (8005030 <_dtoa_r+0x8d0>)
 8004dc4:	f7fb fc18 	bl	80005f8 <__aeabi_dmul>
 8004dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dcc:	e7bc      	b.n	8004d48 <_dtoa_r+0x5e8>
 8004dce:	d10c      	bne.n	8004dea <_dtoa_r+0x68a>
 8004dd0:	4b98      	ldr	r3, [pc, #608]	@ (8005034 <_dtoa_r+0x8d4>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dd8:	f7fb fc0e 	bl	80005f8 <__aeabi_dmul>
 8004ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004de0:	f7fb fe90 	bl	8000b04 <__aeabi_dcmpge>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	f000 8157 	beq.w	8005098 <_dtoa_r+0x938>
 8004dea:	2400      	movs	r4, #0
 8004dec:	4625      	mov	r5, r4
 8004dee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004df0:	43db      	mvns	r3, r3
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	4656      	mov	r6, sl
 8004df6:	2700      	movs	r7, #0
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4658      	mov	r0, fp
 8004dfc:	f000 fbb4 	bl	8005568 <_Bfree>
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	d0dc      	beq.n	8004dbe <_dtoa_r+0x65e>
 8004e04:	b12f      	cbz	r7, 8004e12 <_dtoa_r+0x6b2>
 8004e06:	42af      	cmp	r7, r5
 8004e08:	d003      	beq.n	8004e12 <_dtoa_r+0x6b2>
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	4658      	mov	r0, fp
 8004e0e:	f000 fbab 	bl	8005568 <_Bfree>
 8004e12:	4629      	mov	r1, r5
 8004e14:	4658      	mov	r0, fp
 8004e16:	f000 fba7 	bl	8005568 <_Bfree>
 8004e1a:	e7d0      	b.n	8004dbe <_dtoa_r+0x65e>
 8004e1c:	9704      	str	r7, [sp, #16]
 8004e1e:	4633      	mov	r3, r6
 8004e20:	461e      	mov	r6, r3
 8004e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e26:	2a39      	cmp	r2, #57	@ 0x39
 8004e28:	d107      	bne.n	8004e3a <_dtoa_r+0x6da>
 8004e2a:	459a      	cmp	sl, r3
 8004e2c:	d1f8      	bne.n	8004e20 <_dtoa_r+0x6c0>
 8004e2e:	9a04      	ldr	r2, [sp, #16]
 8004e30:	3201      	adds	r2, #1
 8004e32:	9204      	str	r2, [sp, #16]
 8004e34:	2230      	movs	r2, #48	@ 0x30
 8004e36:	f88a 2000 	strb.w	r2, [sl]
 8004e3a:	781a      	ldrb	r2, [r3, #0]
 8004e3c:	3201      	adds	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e7bd      	b.n	8004dbe <_dtoa_r+0x65e>
 8004e42:	4b7b      	ldr	r3, [pc, #492]	@ (8005030 <_dtoa_r+0x8d0>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	f7fb fbd7 	bl	80005f8 <__aeabi_dmul>
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4604      	mov	r4, r0
 8004e50:	460d      	mov	r5, r1
 8004e52:	f7fb fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	f43f aebb 	beq.w	8004bd2 <_dtoa_r+0x472>
 8004e5c:	e6f0      	b.n	8004c40 <_dtoa_r+0x4e0>
 8004e5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004e60:	2a00      	cmp	r2, #0
 8004e62:	f000 80db 	beq.w	800501c <_dtoa_r+0x8bc>
 8004e66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e68:	2a01      	cmp	r2, #1
 8004e6a:	f300 80bf 	bgt.w	8004fec <_dtoa_r+0x88c>
 8004e6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004e70:	2a00      	cmp	r2, #0
 8004e72:	f000 80b7 	beq.w	8004fe4 <_dtoa_r+0x884>
 8004e76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004e7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e7c:	4646      	mov	r6, r8
 8004e7e:	9a08      	ldr	r2, [sp, #32]
 8004e80:	2101      	movs	r1, #1
 8004e82:	441a      	add	r2, r3
 8004e84:	4658      	mov	r0, fp
 8004e86:	4498      	add	r8, r3
 8004e88:	9208      	str	r2, [sp, #32]
 8004e8a:	f000 fc21 	bl	80056d0 <__i2b>
 8004e8e:	4605      	mov	r5, r0
 8004e90:	b15e      	cbz	r6, 8004eaa <_dtoa_r+0x74a>
 8004e92:	9b08      	ldr	r3, [sp, #32]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	dd08      	ble.n	8004eaa <_dtoa_r+0x74a>
 8004e98:	42b3      	cmp	r3, r6
 8004e9a:	9a08      	ldr	r2, [sp, #32]
 8004e9c:	bfa8      	it	ge
 8004e9e:	4633      	movge	r3, r6
 8004ea0:	eba8 0803 	sub.w	r8, r8, r3
 8004ea4:	1af6      	subs	r6, r6, r3
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	9308      	str	r3, [sp, #32]
 8004eaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eac:	b1f3      	cbz	r3, 8004eec <_dtoa_r+0x78c>
 8004eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80b7 	beq.w	8005024 <_dtoa_r+0x8c4>
 8004eb6:	b18c      	cbz	r4, 8004edc <_dtoa_r+0x77c>
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4622      	mov	r2, r4
 8004ebc:	4658      	mov	r0, fp
 8004ebe:	f000 fcc7 	bl	8005850 <__pow5mult>
 8004ec2:	464a      	mov	r2, r9
 8004ec4:	4601      	mov	r1, r0
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	4658      	mov	r0, fp
 8004eca:	f000 fc17 	bl	80056fc <__multiply>
 8004ece:	4649      	mov	r1, r9
 8004ed0:	9004      	str	r0, [sp, #16]
 8004ed2:	4658      	mov	r0, fp
 8004ed4:	f000 fb48 	bl	8005568 <_Bfree>
 8004ed8:	9b04      	ldr	r3, [sp, #16]
 8004eda:	4699      	mov	r9, r3
 8004edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ede:	1b1a      	subs	r2, r3, r4
 8004ee0:	d004      	beq.n	8004eec <_dtoa_r+0x78c>
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	4658      	mov	r0, fp
 8004ee6:	f000 fcb3 	bl	8005850 <__pow5mult>
 8004eea:	4681      	mov	r9, r0
 8004eec:	2101      	movs	r1, #1
 8004eee:	4658      	mov	r0, fp
 8004ef0:	f000 fbee 	bl	80056d0 <__i2b>
 8004ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 81cf 	beq.w	800529c <_dtoa_r+0xb3c>
 8004efe:	461a      	mov	r2, r3
 8004f00:	4601      	mov	r1, r0
 8004f02:	4658      	mov	r0, fp
 8004f04:	f000 fca4 	bl	8005850 <__pow5mult>
 8004f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	f300 8095 	bgt.w	800503c <_dtoa_r+0x8dc>
 8004f12:	9b02      	ldr	r3, [sp, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 8087 	bne.w	8005028 <_dtoa_r+0x8c8>
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f040 8089 	bne.w	8005038 <_dtoa_r+0x8d8>
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f2c:	0d1b      	lsrs	r3, r3, #20
 8004f2e:	051b      	lsls	r3, r3, #20
 8004f30:	b12b      	cbz	r3, 8004f3e <_dtoa_r+0x7de>
 8004f32:	9b08      	ldr	r3, [sp, #32]
 8004f34:	3301      	adds	r3, #1
 8004f36:	9308      	str	r3, [sp, #32]
 8004f38:	f108 0801 	add.w	r8, r8, #1
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 81b0 	beq.w	80052a8 <_dtoa_r+0xb48>
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f4e:	6918      	ldr	r0, [r3, #16]
 8004f50:	f000 fb72 	bl	8005638 <__hi0bits>
 8004f54:	f1c0 0020 	rsb	r0, r0, #32
 8004f58:	9b08      	ldr	r3, [sp, #32]
 8004f5a:	4418      	add	r0, r3
 8004f5c:	f010 001f 	ands.w	r0, r0, #31
 8004f60:	d077      	beq.n	8005052 <_dtoa_r+0x8f2>
 8004f62:	f1c0 0320 	rsb	r3, r0, #32
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	dd6b      	ble.n	8005042 <_dtoa_r+0x8e2>
 8004f6a:	9b08      	ldr	r3, [sp, #32]
 8004f6c:	f1c0 001c 	rsb	r0, r0, #28
 8004f70:	4403      	add	r3, r0
 8004f72:	4480      	add	r8, r0
 8004f74:	4406      	add	r6, r0
 8004f76:	9308      	str	r3, [sp, #32]
 8004f78:	f1b8 0f00 	cmp.w	r8, #0
 8004f7c:	dd05      	ble.n	8004f8a <_dtoa_r+0x82a>
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4642      	mov	r2, r8
 8004f82:	4658      	mov	r0, fp
 8004f84:	f000 fcbe 	bl	8005904 <__lshift>
 8004f88:	4681      	mov	r9, r0
 8004f8a:	9b08      	ldr	r3, [sp, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	dd05      	ble.n	8004f9c <_dtoa_r+0x83c>
 8004f90:	4621      	mov	r1, r4
 8004f92:	461a      	mov	r2, r3
 8004f94:	4658      	mov	r0, fp
 8004f96:	f000 fcb5 	bl	8005904 <__lshift>
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d059      	beq.n	8005056 <_dtoa_r+0x8f6>
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	4648      	mov	r0, r9
 8004fa6:	f000 fd19 	bl	80059dc <__mcmp>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	da53      	bge.n	8005056 <_dtoa_r+0x8f6>
 8004fae:	1e7b      	subs	r3, r7, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	220a      	movs	r2, #10
 8004fb8:	4658      	mov	r0, fp
 8004fba:	f000 faf7 	bl	80055ac <__multadd>
 8004fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fc0:	4681      	mov	r9, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8172 	beq.w	80052ac <_dtoa_r+0xb4c>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4629      	mov	r1, r5
 8004fcc:	220a      	movs	r2, #10
 8004fce:	4658      	mov	r0, fp
 8004fd0:	f000 faec 	bl	80055ac <__multadd>
 8004fd4:	9b00      	ldr	r3, [sp, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	4605      	mov	r5, r0
 8004fda:	dc67      	bgt.n	80050ac <_dtoa_r+0x94c>
 8004fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	dc41      	bgt.n	8005066 <_dtoa_r+0x906>
 8004fe2:	e063      	b.n	80050ac <_dtoa_r+0x94c>
 8004fe4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004fe6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004fea:	e746      	b.n	8004e7a <_dtoa_r+0x71a>
 8004fec:	9b07      	ldr	r3, [sp, #28]
 8004fee:	1e5c      	subs	r4, r3, #1
 8004ff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	bfbf      	itttt	lt
 8004ff6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004ff8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004ffa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004ffc:	1ae3      	sublt	r3, r4, r3
 8004ffe:	bfb4      	ite	lt
 8005000:	18d2      	addlt	r2, r2, r3
 8005002:	1b1c      	subge	r4, r3, r4
 8005004:	9b07      	ldr	r3, [sp, #28]
 8005006:	bfbc      	itt	lt
 8005008:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800500a:	2400      	movlt	r4, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	bfb5      	itete	lt
 8005010:	eba8 0603 	sublt.w	r6, r8, r3
 8005014:	9b07      	ldrge	r3, [sp, #28]
 8005016:	2300      	movlt	r3, #0
 8005018:	4646      	movge	r6, r8
 800501a:	e730      	b.n	8004e7e <_dtoa_r+0x71e>
 800501c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800501e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005020:	4646      	mov	r6, r8
 8005022:	e735      	b.n	8004e90 <_dtoa_r+0x730>
 8005024:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005026:	e75c      	b.n	8004ee2 <_dtoa_r+0x782>
 8005028:	2300      	movs	r3, #0
 800502a:	e788      	b.n	8004f3e <_dtoa_r+0x7de>
 800502c:	3fe00000 	.word	0x3fe00000
 8005030:	40240000 	.word	0x40240000
 8005034:	40140000 	.word	0x40140000
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	e780      	b.n	8004f3e <_dtoa_r+0x7de>
 800503c:	2300      	movs	r3, #0
 800503e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005040:	e782      	b.n	8004f48 <_dtoa_r+0x7e8>
 8005042:	d099      	beq.n	8004f78 <_dtoa_r+0x818>
 8005044:	9a08      	ldr	r2, [sp, #32]
 8005046:	331c      	adds	r3, #28
 8005048:	441a      	add	r2, r3
 800504a:	4498      	add	r8, r3
 800504c:	441e      	add	r6, r3
 800504e:	9208      	str	r2, [sp, #32]
 8005050:	e792      	b.n	8004f78 <_dtoa_r+0x818>
 8005052:	4603      	mov	r3, r0
 8005054:	e7f6      	b.n	8005044 <_dtoa_r+0x8e4>
 8005056:	9b07      	ldr	r3, [sp, #28]
 8005058:	9704      	str	r7, [sp, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	dc20      	bgt.n	80050a0 <_dtoa_r+0x940>
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005062:	2b02      	cmp	r3, #2
 8005064:	dd1e      	ble.n	80050a4 <_dtoa_r+0x944>
 8005066:	9b00      	ldr	r3, [sp, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f47f aec0 	bne.w	8004dee <_dtoa_r+0x68e>
 800506e:	4621      	mov	r1, r4
 8005070:	2205      	movs	r2, #5
 8005072:	4658      	mov	r0, fp
 8005074:	f000 fa9a 	bl	80055ac <__multadd>
 8005078:	4601      	mov	r1, r0
 800507a:	4604      	mov	r4, r0
 800507c:	4648      	mov	r0, r9
 800507e:	f000 fcad 	bl	80059dc <__mcmp>
 8005082:	2800      	cmp	r0, #0
 8005084:	f77f aeb3 	ble.w	8004dee <_dtoa_r+0x68e>
 8005088:	4656      	mov	r6, sl
 800508a:	2331      	movs	r3, #49	@ 0x31
 800508c:	f806 3b01 	strb.w	r3, [r6], #1
 8005090:	9b04      	ldr	r3, [sp, #16]
 8005092:	3301      	adds	r3, #1
 8005094:	9304      	str	r3, [sp, #16]
 8005096:	e6ae      	b.n	8004df6 <_dtoa_r+0x696>
 8005098:	9c07      	ldr	r4, [sp, #28]
 800509a:	9704      	str	r7, [sp, #16]
 800509c:	4625      	mov	r5, r4
 800509e:	e7f3      	b.n	8005088 <_dtoa_r+0x928>
 80050a0:	9b07      	ldr	r3, [sp, #28]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8104 	beq.w	80052b4 <_dtoa_r+0xb54>
 80050ac:	2e00      	cmp	r6, #0
 80050ae:	dd05      	ble.n	80050bc <_dtoa_r+0x95c>
 80050b0:	4629      	mov	r1, r5
 80050b2:	4632      	mov	r2, r6
 80050b4:	4658      	mov	r0, fp
 80050b6:	f000 fc25 	bl	8005904 <__lshift>
 80050ba:	4605      	mov	r5, r0
 80050bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d05a      	beq.n	8005178 <_dtoa_r+0xa18>
 80050c2:	6869      	ldr	r1, [r5, #4]
 80050c4:	4658      	mov	r0, fp
 80050c6:	f000 fa0f 	bl	80054e8 <_Balloc>
 80050ca:	4606      	mov	r6, r0
 80050cc:	b928      	cbnz	r0, 80050da <_dtoa_r+0x97a>
 80050ce:	4b84      	ldr	r3, [pc, #528]	@ (80052e0 <_dtoa_r+0xb80>)
 80050d0:	4602      	mov	r2, r0
 80050d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80050d6:	f7ff bb5a 	b.w	800478e <_dtoa_r+0x2e>
 80050da:	692a      	ldr	r2, [r5, #16]
 80050dc:	3202      	adds	r2, #2
 80050de:	0092      	lsls	r2, r2, #2
 80050e0:	f105 010c 	add.w	r1, r5, #12
 80050e4:	300c      	adds	r0, #12
 80050e6:	f000 ffaf 	bl	8006048 <memcpy>
 80050ea:	2201      	movs	r2, #1
 80050ec:	4631      	mov	r1, r6
 80050ee:	4658      	mov	r0, fp
 80050f0:	f000 fc08 	bl	8005904 <__lshift>
 80050f4:	f10a 0301 	add.w	r3, sl, #1
 80050f8:	9307      	str	r3, [sp, #28]
 80050fa:	9b00      	ldr	r3, [sp, #0]
 80050fc:	4453      	add	r3, sl
 80050fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005100:	9b02      	ldr	r3, [sp, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	462f      	mov	r7, r5
 8005108:	930a      	str	r3, [sp, #40]	@ 0x28
 800510a:	4605      	mov	r5, r0
 800510c:	9b07      	ldr	r3, [sp, #28]
 800510e:	4621      	mov	r1, r4
 8005110:	3b01      	subs	r3, #1
 8005112:	4648      	mov	r0, r9
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	f7ff fa9a 	bl	800464e <quorem>
 800511a:	4639      	mov	r1, r7
 800511c:	9002      	str	r0, [sp, #8]
 800511e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005122:	4648      	mov	r0, r9
 8005124:	f000 fc5a 	bl	80059dc <__mcmp>
 8005128:	462a      	mov	r2, r5
 800512a:	9008      	str	r0, [sp, #32]
 800512c:	4621      	mov	r1, r4
 800512e:	4658      	mov	r0, fp
 8005130:	f000 fc70 	bl	8005a14 <__mdiff>
 8005134:	68c2      	ldr	r2, [r0, #12]
 8005136:	4606      	mov	r6, r0
 8005138:	bb02      	cbnz	r2, 800517c <_dtoa_r+0xa1c>
 800513a:	4601      	mov	r1, r0
 800513c:	4648      	mov	r0, r9
 800513e:	f000 fc4d 	bl	80059dc <__mcmp>
 8005142:	4602      	mov	r2, r0
 8005144:	4631      	mov	r1, r6
 8005146:	4658      	mov	r0, fp
 8005148:	920e      	str	r2, [sp, #56]	@ 0x38
 800514a:	f000 fa0d 	bl	8005568 <_Bfree>
 800514e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005152:	9e07      	ldr	r6, [sp, #28]
 8005154:	ea43 0102 	orr.w	r1, r3, r2
 8005158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800515a:	4319      	orrs	r1, r3
 800515c:	d110      	bne.n	8005180 <_dtoa_r+0xa20>
 800515e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005162:	d029      	beq.n	80051b8 <_dtoa_r+0xa58>
 8005164:	9b08      	ldr	r3, [sp, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	dd02      	ble.n	8005170 <_dtoa_r+0xa10>
 800516a:	9b02      	ldr	r3, [sp, #8]
 800516c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005170:	9b00      	ldr	r3, [sp, #0]
 8005172:	f883 8000 	strb.w	r8, [r3]
 8005176:	e63f      	b.n	8004df8 <_dtoa_r+0x698>
 8005178:	4628      	mov	r0, r5
 800517a:	e7bb      	b.n	80050f4 <_dtoa_r+0x994>
 800517c:	2201      	movs	r2, #1
 800517e:	e7e1      	b.n	8005144 <_dtoa_r+0x9e4>
 8005180:	9b08      	ldr	r3, [sp, #32]
 8005182:	2b00      	cmp	r3, #0
 8005184:	db04      	blt.n	8005190 <_dtoa_r+0xa30>
 8005186:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005188:	430b      	orrs	r3, r1
 800518a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800518c:	430b      	orrs	r3, r1
 800518e:	d120      	bne.n	80051d2 <_dtoa_r+0xa72>
 8005190:	2a00      	cmp	r2, #0
 8005192:	dded      	ble.n	8005170 <_dtoa_r+0xa10>
 8005194:	4649      	mov	r1, r9
 8005196:	2201      	movs	r2, #1
 8005198:	4658      	mov	r0, fp
 800519a:	f000 fbb3 	bl	8005904 <__lshift>
 800519e:	4621      	mov	r1, r4
 80051a0:	4681      	mov	r9, r0
 80051a2:	f000 fc1b 	bl	80059dc <__mcmp>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	dc03      	bgt.n	80051b2 <_dtoa_r+0xa52>
 80051aa:	d1e1      	bne.n	8005170 <_dtoa_r+0xa10>
 80051ac:	f018 0f01 	tst.w	r8, #1
 80051b0:	d0de      	beq.n	8005170 <_dtoa_r+0xa10>
 80051b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80051b6:	d1d8      	bne.n	800516a <_dtoa_r+0xa0a>
 80051b8:	9a00      	ldr	r2, [sp, #0]
 80051ba:	2339      	movs	r3, #57	@ 0x39
 80051bc:	7013      	strb	r3, [r2, #0]
 80051be:	4633      	mov	r3, r6
 80051c0:	461e      	mov	r6, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80051c8:	2a39      	cmp	r2, #57	@ 0x39
 80051ca:	d052      	beq.n	8005272 <_dtoa_r+0xb12>
 80051cc:	3201      	adds	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e612      	b.n	8004df8 <_dtoa_r+0x698>
 80051d2:	2a00      	cmp	r2, #0
 80051d4:	dd07      	ble.n	80051e6 <_dtoa_r+0xa86>
 80051d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80051da:	d0ed      	beq.n	80051b8 <_dtoa_r+0xa58>
 80051dc:	9a00      	ldr	r2, [sp, #0]
 80051de:	f108 0301 	add.w	r3, r8, #1
 80051e2:	7013      	strb	r3, [r2, #0]
 80051e4:	e608      	b.n	8004df8 <_dtoa_r+0x698>
 80051e6:	9b07      	ldr	r3, [sp, #28]
 80051e8:	9a07      	ldr	r2, [sp, #28]
 80051ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80051ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d028      	beq.n	8005246 <_dtoa_r+0xae6>
 80051f4:	4649      	mov	r1, r9
 80051f6:	2300      	movs	r3, #0
 80051f8:	220a      	movs	r2, #10
 80051fa:	4658      	mov	r0, fp
 80051fc:	f000 f9d6 	bl	80055ac <__multadd>
 8005200:	42af      	cmp	r7, r5
 8005202:	4681      	mov	r9, r0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	f04f 020a 	mov.w	r2, #10
 800520c:	4639      	mov	r1, r7
 800520e:	4658      	mov	r0, fp
 8005210:	d107      	bne.n	8005222 <_dtoa_r+0xac2>
 8005212:	f000 f9cb 	bl	80055ac <__multadd>
 8005216:	4607      	mov	r7, r0
 8005218:	4605      	mov	r5, r0
 800521a:	9b07      	ldr	r3, [sp, #28]
 800521c:	3301      	adds	r3, #1
 800521e:	9307      	str	r3, [sp, #28]
 8005220:	e774      	b.n	800510c <_dtoa_r+0x9ac>
 8005222:	f000 f9c3 	bl	80055ac <__multadd>
 8005226:	4629      	mov	r1, r5
 8005228:	4607      	mov	r7, r0
 800522a:	2300      	movs	r3, #0
 800522c:	220a      	movs	r2, #10
 800522e:	4658      	mov	r0, fp
 8005230:	f000 f9bc 	bl	80055ac <__multadd>
 8005234:	4605      	mov	r5, r0
 8005236:	e7f0      	b.n	800521a <_dtoa_r+0xaba>
 8005238:	9b00      	ldr	r3, [sp, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	bfcc      	ite	gt
 800523e:	461e      	movgt	r6, r3
 8005240:	2601      	movle	r6, #1
 8005242:	4456      	add	r6, sl
 8005244:	2700      	movs	r7, #0
 8005246:	4649      	mov	r1, r9
 8005248:	2201      	movs	r2, #1
 800524a:	4658      	mov	r0, fp
 800524c:	f000 fb5a 	bl	8005904 <__lshift>
 8005250:	4621      	mov	r1, r4
 8005252:	4681      	mov	r9, r0
 8005254:	f000 fbc2 	bl	80059dc <__mcmp>
 8005258:	2800      	cmp	r0, #0
 800525a:	dcb0      	bgt.n	80051be <_dtoa_r+0xa5e>
 800525c:	d102      	bne.n	8005264 <_dtoa_r+0xb04>
 800525e:	f018 0f01 	tst.w	r8, #1
 8005262:	d1ac      	bne.n	80051be <_dtoa_r+0xa5e>
 8005264:	4633      	mov	r3, r6
 8005266:	461e      	mov	r6, r3
 8005268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800526c:	2a30      	cmp	r2, #48	@ 0x30
 800526e:	d0fa      	beq.n	8005266 <_dtoa_r+0xb06>
 8005270:	e5c2      	b.n	8004df8 <_dtoa_r+0x698>
 8005272:	459a      	cmp	sl, r3
 8005274:	d1a4      	bne.n	80051c0 <_dtoa_r+0xa60>
 8005276:	9b04      	ldr	r3, [sp, #16]
 8005278:	3301      	adds	r3, #1
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	2331      	movs	r3, #49	@ 0x31
 800527e:	f88a 3000 	strb.w	r3, [sl]
 8005282:	e5b9      	b.n	8004df8 <_dtoa_r+0x698>
 8005284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005286:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80052e4 <_dtoa_r+0xb84>
 800528a:	b11b      	cbz	r3, 8005294 <_dtoa_r+0xb34>
 800528c:	f10a 0308 	add.w	r3, sl, #8
 8005290:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	4650      	mov	r0, sl
 8005296:	b019      	add	sp, #100	@ 0x64
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800529e:	2b01      	cmp	r3, #1
 80052a0:	f77f ae37 	ble.w	8004f12 <_dtoa_r+0x7b2>
 80052a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80052a8:	2001      	movs	r0, #1
 80052aa:	e655      	b.n	8004f58 <_dtoa_r+0x7f8>
 80052ac:	9b00      	ldr	r3, [sp, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f77f aed6 	ble.w	8005060 <_dtoa_r+0x900>
 80052b4:	4656      	mov	r6, sl
 80052b6:	4621      	mov	r1, r4
 80052b8:	4648      	mov	r0, r9
 80052ba:	f7ff f9c8 	bl	800464e <quorem>
 80052be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80052c2:	f806 8b01 	strb.w	r8, [r6], #1
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	eba6 020a 	sub.w	r2, r6, sl
 80052cc:	4293      	cmp	r3, r2
 80052ce:	ddb3      	ble.n	8005238 <_dtoa_r+0xad8>
 80052d0:	4649      	mov	r1, r9
 80052d2:	2300      	movs	r3, #0
 80052d4:	220a      	movs	r2, #10
 80052d6:	4658      	mov	r0, fp
 80052d8:	f000 f968 	bl	80055ac <__multadd>
 80052dc:	4681      	mov	r9, r0
 80052de:	e7ea      	b.n	80052b6 <_dtoa_r+0xb56>
 80052e0:	080067ec 	.word	0x080067ec
 80052e4:	08006770 	.word	0x08006770

080052e8 <_free_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4605      	mov	r5, r0
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d041      	beq.n	8005374 <_free_r+0x8c>
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	1f0c      	subs	r4, r1, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfb8      	it	lt
 80052fa:	18e4      	addlt	r4, r4, r3
 80052fc:	f000 f8e8 	bl	80054d0 <__malloc_lock>
 8005300:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <_free_r+0x90>)
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	b933      	cbnz	r3, 8005314 <_free_r+0x2c>
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	6014      	str	r4, [r2, #0]
 800530a:	4628      	mov	r0, r5
 800530c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005310:	f000 b8e4 	b.w	80054dc <__malloc_unlock>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d908      	bls.n	800532a <_free_r+0x42>
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	1821      	adds	r1, r4, r0
 800531c:	428b      	cmp	r3, r1
 800531e:	bf01      	itttt	eq
 8005320:	6819      	ldreq	r1, [r3, #0]
 8005322:	685b      	ldreq	r3, [r3, #4]
 8005324:	1809      	addeq	r1, r1, r0
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	e7ed      	b.n	8005306 <_free_r+0x1e>
 800532a:	461a      	mov	r2, r3
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	b10b      	cbz	r3, 8005334 <_free_r+0x4c>
 8005330:	42a3      	cmp	r3, r4
 8005332:	d9fa      	bls.n	800532a <_free_r+0x42>
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	1850      	adds	r0, r2, r1
 8005338:	42a0      	cmp	r0, r4
 800533a:	d10b      	bne.n	8005354 <_free_r+0x6c>
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	4401      	add	r1, r0
 8005340:	1850      	adds	r0, r2, r1
 8005342:	4283      	cmp	r3, r0
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	d1e0      	bne.n	800530a <_free_r+0x22>
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	6053      	str	r3, [r2, #4]
 800534e:	4408      	add	r0, r1
 8005350:	6010      	str	r0, [r2, #0]
 8005352:	e7da      	b.n	800530a <_free_r+0x22>
 8005354:	d902      	bls.n	800535c <_free_r+0x74>
 8005356:	230c      	movs	r3, #12
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	e7d6      	b.n	800530a <_free_r+0x22>
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	1821      	adds	r1, r4, r0
 8005360:	428b      	cmp	r3, r1
 8005362:	bf04      	itt	eq
 8005364:	6819      	ldreq	r1, [r3, #0]
 8005366:	685b      	ldreq	r3, [r3, #4]
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	bf04      	itt	eq
 800536c:	1809      	addeq	r1, r1, r0
 800536e:	6021      	streq	r1, [r4, #0]
 8005370:	6054      	str	r4, [r2, #4]
 8005372:	e7ca      	b.n	800530a <_free_r+0x22>
 8005374:	bd38      	pop	{r3, r4, r5, pc}
 8005376:	bf00      	nop
 8005378:	20000404 	.word	0x20000404

0800537c <malloc>:
 800537c:	4b02      	ldr	r3, [pc, #8]	@ (8005388 <malloc+0xc>)
 800537e:	4601      	mov	r1, r0
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	f000 b825 	b.w	80053d0 <_malloc_r>
 8005386:	bf00      	nop
 8005388:	20000028 	.word	0x20000028

0800538c <sbrk_aligned>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	4e0f      	ldr	r6, [pc, #60]	@ (80053cc <sbrk_aligned+0x40>)
 8005390:	460c      	mov	r4, r1
 8005392:	6831      	ldr	r1, [r6, #0]
 8005394:	4605      	mov	r5, r0
 8005396:	b911      	cbnz	r1, 800539e <sbrk_aligned+0x12>
 8005398:	f000 fe46 	bl	8006028 <_sbrk_r>
 800539c:	6030      	str	r0, [r6, #0]
 800539e:	4621      	mov	r1, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 fe41 	bl	8006028 <_sbrk_r>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	d103      	bne.n	80053b2 <sbrk_aligned+0x26>
 80053aa:	f04f 34ff 	mov.w	r4, #4294967295
 80053ae:	4620      	mov	r0, r4
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	1cc4      	adds	r4, r0, #3
 80053b4:	f024 0403 	bic.w	r4, r4, #3
 80053b8:	42a0      	cmp	r0, r4
 80053ba:	d0f8      	beq.n	80053ae <sbrk_aligned+0x22>
 80053bc:	1a21      	subs	r1, r4, r0
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 fe32 	bl	8006028 <_sbrk_r>
 80053c4:	3001      	adds	r0, #1
 80053c6:	d1f2      	bne.n	80053ae <sbrk_aligned+0x22>
 80053c8:	e7ef      	b.n	80053aa <sbrk_aligned+0x1e>
 80053ca:	bf00      	nop
 80053cc:	20000400 	.word	0x20000400

080053d0 <_malloc_r>:
 80053d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	1ccd      	adds	r5, r1, #3
 80053d6:	f025 0503 	bic.w	r5, r5, #3
 80053da:	3508      	adds	r5, #8
 80053dc:	2d0c      	cmp	r5, #12
 80053de:	bf38      	it	cc
 80053e0:	250c      	movcc	r5, #12
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	4606      	mov	r6, r0
 80053e6:	db01      	blt.n	80053ec <_malloc_r+0x1c>
 80053e8:	42a9      	cmp	r1, r5
 80053ea:	d904      	bls.n	80053f6 <_malloc_r+0x26>
 80053ec:	230c      	movs	r3, #12
 80053ee:	6033      	str	r3, [r6, #0]
 80053f0:	2000      	movs	r0, #0
 80053f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054cc <_malloc_r+0xfc>
 80053fa:	f000 f869 	bl	80054d0 <__malloc_lock>
 80053fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005402:	461c      	mov	r4, r3
 8005404:	bb44      	cbnz	r4, 8005458 <_malloc_r+0x88>
 8005406:	4629      	mov	r1, r5
 8005408:	4630      	mov	r0, r6
 800540a:	f7ff ffbf 	bl	800538c <sbrk_aligned>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	4604      	mov	r4, r0
 8005412:	d158      	bne.n	80054c6 <_malloc_r+0xf6>
 8005414:	f8d8 4000 	ldr.w	r4, [r8]
 8005418:	4627      	mov	r7, r4
 800541a:	2f00      	cmp	r7, #0
 800541c:	d143      	bne.n	80054a6 <_malloc_r+0xd6>
 800541e:	2c00      	cmp	r4, #0
 8005420:	d04b      	beq.n	80054ba <_malloc_r+0xea>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	4639      	mov	r1, r7
 8005426:	4630      	mov	r0, r6
 8005428:	eb04 0903 	add.w	r9, r4, r3
 800542c:	f000 fdfc 	bl	8006028 <_sbrk_r>
 8005430:	4581      	cmp	r9, r0
 8005432:	d142      	bne.n	80054ba <_malloc_r+0xea>
 8005434:	6821      	ldr	r1, [r4, #0]
 8005436:	1a6d      	subs	r5, r5, r1
 8005438:	4629      	mov	r1, r5
 800543a:	4630      	mov	r0, r6
 800543c:	f7ff ffa6 	bl	800538c <sbrk_aligned>
 8005440:	3001      	adds	r0, #1
 8005442:	d03a      	beq.n	80054ba <_malloc_r+0xea>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	442b      	add	r3, r5
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	f8d8 3000 	ldr.w	r3, [r8]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	bb62      	cbnz	r2, 80054ac <_malloc_r+0xdc>
 8005452:	f8c8 7000 	str.w	r7, [r8]
 8005456:	e00f      	b.n	8005478 <_malloc_r+0xa8>
 8005458:	6822      	ldr	r2, [r4, #0]
 800545a:	1b52      	subs	r2, r2, r5
 800545c:	d420      	bmi.n	80054a0 <_malloc_r+0xd0>
 800545e:	2a0b      	cmp	r2, #11
 8005460:	d917      	bls.n	8005492 <_malloc_r+0xc2>
 8005462:	1961      	adds	r1, r4, r5
 8005464:	42a3      	cmp	r3, r4
 8005466:	6025      	str	r5, [r4, #0]
 8005468:	bf18      	it	ne
 800546a:	6059      	strne	r1, [r3, #4]
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	bf08      	it	eq
 8005470:	f8c8 1000 	streq.w	r1, [r8]
 8005474:	5162      	str	r2, [r4, r5]
 8005476:	604b      	str	r3, [r1, #4]
 8005478:	4630      	mov	r0, r6
 800547a:	f000 f82f 	bl	80054dc <__malloc_unlock>
 800547e:	f104 000b 	add.w	r0, r4, #11
 8005482:	1d23      	adds	r3, r4, #4
 8005484:	f020 0007 	bic.w	r0, r0, #7
 8005488:	1ac2      	subs	r2, r0, r3
 800548a:	bf1c      	itt	ne
 800548c:	1a1b      	subne	r3, r3, r0
 800548e:	50a3      	strne	r3, [r4, r2]
 8005490:	e7af      	b.n	80053f2 <_malloc_r+0x22>
 8005492:	6862      	ldr	r2, [r4, #4]
 8005494:	42a3      	cmp	r3, r4
 8005496:	bf0c      	ite	eq
 8005498:	f8c8 2000 	streq.w	r2, [r8]
 800549c:	605a      	strne	r2, [r3, #4]
 800549e:	e7eb      	b.n	8005478 <_malloc_r+0xa8>
 80054a0:	4623      	mov	r3, r4
 80054a2:	6864      	ldr	r4, [r4, #4]
 80054a4:	e7ae      	b.n	8005404 <_malloc_r+0x34>
 80054a6:	463c      	mov	r4, r7
 80054a8:	687f      	ldr	r7, [r7, #4]
 80054aa:	e7b6      	b.n	800541a <_malloc_r+0x4a>
 80054ac:	461a      	mov	r2, r3
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	d1fb      	bne.n	80054ac <_malloc_r+0xdc>
 80054b4:	2300      	movs	r3, #0
 80054b6:	6053      	str	r3, [r2, #4]
 80054b8:	e7de      	b.n	8005478 <_malloc_r+0xa8>
 80054ba:	230c      	movs	r3, #12
 80054bc:	6033      	str	r3, [r6, #0]
 80054be:	4630      	mov	r0, r6
 80054c0:	f000 f80c 	bl	80054dc <__malloc_unlock>
 80054c4:	e794      	b.n	80053f0 <_malloc_r+0x20>
 80054c6:	6005      	str	r5, [r0, #0]
 80054c8:	e7d6      	b.n	8005478 <_malloc_r+0xa8>
 80054ca:	bf00      	nop
 80054cc:	20000404 	.word	0x20000404

080054d0 <__malloc_lock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	@ (80054d8 <__malloc_lock+0x8>)
 80054d2:	f7ff b8ba 	b.w	800464a <__retarget_lock_acquire_recursive>
 80054d6:	bf00      	nop
 80054d8:	200003fc 	.word	0x200003fc

080054dc <__malloc_unlock>:
 80054dc:	4801      	ldr	r0, [pc, #4]	@ (80054e4 <__malloc_unlock+0x8>)
 80054de:	f7ff b8b5 	b.w	800464c <__retarget_lock_release_recursive>
 80054e2:	bf00      	nop
 80054e4:	200003fc 	.word	0x200003fc

080054e8 <_Balloc>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	69c6      	ldr	r6, [r0, #28]
 80054ec:	4604      	mov	r4, r0
 80054ee:	460d      	mov	r5, r1
 80054f0:	b976      	cbnz	r6, 8005510 <_Balloc+0x28>
 80054f2:	2010      	movs	r0, #16
 80054f4:	f7ff ff42 	bl	800537c <malloc>
 80054f8:	4602      	mov	r2, r0
 80054fa:	61e0      	str	r0, [r4, #28]
 80054fc:	b920      	cbnz	r0, 8005508 <_Balloc+0x20>
 80054fe:	4b18      	ldr	r3, [pc, #96]	@ (8005560 <_Balloc+0x78>)
 8005500:	4818      	ldr	r0, [pc, #96]	@ (8005564 <_Balloc+0x7c>)
 8005502:	216b      	movs	r1, #107	@ 0x6b
 8005504:	f000 fdae 	bl	8006064 <__assert_func>
 8005508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800550c:	6006      	str	r6, [r0, #0]
 800550e:	60c6      	str	r6, [r0, #12]
 8005510:	69e6      	ldr	r6, [r4, #28]
 8005512:	68f3      	ldr	r3, [r6, #12]
 8005514:	b183      	cbz	r3, 8005538 <_Balloc+0x50>
 8005516:	69e3      	ldr	r3, [r4, #28]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800551e:	b9b8      	cbnz	r0, 8005550 <_Balloc+0x68>
 8005520:	2101      	movs	r1, #1
 8005522:	fa01 f605 	lsl.w	r6, r1, r5
 8005526:	1d72      	adds	r2, r6, #5
 8005528:	0092      	lsls	r2, r2, #2
 800552a:	4620      	mov	r0, r4
 800552c:	f000 fdb8 	bl	80060a0 <_calloc_r>
 8005530:	b160      	cbz	r0, 800554c <_Balloc+0x64>
 8005532:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005536:	e00e      	b.n	8005556 <_Balloc+0x6e>
 8005538:	2221      	movs	r2, #33	@ 0x21
 800553a:	2104      	movs	r1, #4
 800553c:	4620      	mov	r0, r4
 800553e:	f000 fdaf 	bl	80060a0 <_calloc_r>
 8005542:	69e3      	ldr	r3, [r4, #28]
 8005544:	60f0      	str	r0, [r6, #12]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e4      	bne.n	8005516 <_Balloc+0x2e>
 800554c:	2000      	movs	r0, #0
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	6802      	ldr	r2, [r0, #0]
 8005552:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005556:	2300      	movs	r3, #0
 8005558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800555c:	e7f7      	b.n	800554e <_Balloc+0x66>
 800555e:	bf00      	nop
 8005560:	0800677d 	.word	0x0800677d
 8005564:	080067fd 	.word	0x080067fd

08005568 <_Bfree>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	69c6      	ldr	r6, [r0, #28]
 800556c:	4605      	mov	r5, r0
 800556e:	460c      	mov	r4, r1
 8005570:	b976      	cbnz	r6, 8005590 <_Bfree+0x28>
 8005572:	2010      	movs	r0, #16
 8005574:	f7ff ff02 	bl	800537c <malloc>
 8005578:	4602      	mov	r2, r0
 800557a:	61e8      	str	r0, [r5, #28]
 800557c:	b920      	cbnz	r0, 8005588 <_Bfree+0x20>
 800557e:	4b09      	ldr	r3, [pc, #36]	@ (80055a4 <_Bfree+0x3c>)
 8005580:	4809      	ldr	r0, [pc, #36]	@ (80055a8 <_Bfree+0x40>)
 8005582:	218f      	movs	r1, #143	@ 0x8f
 8005584:	f000 fd6e 	bl	8006064 <__assert_func>
 8005588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800558c:	6006      	str	r6, [r0, #0]
 800558e:	60c6      	str	r6, [r0, #12]
 8005590:	b13c      	cbz	r4, 80055a2 <_Bfree+0x3a>
 8005592:	69eb      	ldr	r3, [r5, #28]
 8005594:	6862      	ldr	r2, [r4, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800559c:	6021      	str	r1, [r4, #0]
 800559e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	0800677d 	.word	0x0800677d
 80055a8:	080067fd 	.word	0x080067fd

080055ac <__multadd>:
 80055ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b0:	690d      	ldr	r5, [r1, #16]
 80055b2:	4607      	mov	r7, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	461e      	mov	r6, r3
 80055b8:	f101 0c14 	add.w	ip, r1, #20
 80055bc:	2000      	movs	r0, #0
 80055be:	f8dc 3000 	ldr.w	r3, [ip]
 80055c2:	b299      	uxth	r1, r3
 80055c4:	fb02 6101 	mla	r1, r2, r1, r6
 80055c8:	0c1e      	lsrs	r6, r3, #16
 80055ca:	0c0b      	lsrs	r3, r1, #16
 80055cc:	fb02 3306 	mla	r3, r2, r6, r3
 80055d0:	b289      	uxth	r1, r1
 80055d2:	3001      	adds	r0, #1
 80055d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055d8:	4285      	cmp	r5, r0
 80055da:	f84c 1b04 	str.w	r1, [ip], #4
 80055de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055e2:	dcec      	bgt.n	80055be <__multadd+0x12>
 80055e4:	b30e      	cbz	r6, 800562a <__multadd+0x7e>
 80055e6:	68a3      	ldr	r3, [r4, #8]
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	dc19      	bgt.n	8005620 <__multadd+0x74>
 80055ec:	6861      	ldr	r1, [r4, #4]
 80055ee:	4638      	mov	r0, r7
 80055f0:	3101      	adds	r1, #1
 80055f2:	f7ff ff79 	bl	80054e8 <_Balloc>
 80055f6:	4680      	mov	r8, r0
 80055f8:	b928      	cbnz	r0, 8005606 <__multadd+0x5a>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <__multadd+0x84>)
 80055fe:	480d      	ldr	r0, [pc, #52]	@ (8005634 <__multadd+0x88>)
 8005600:	21ba      	movs	r1, #186	@ 0xba
 8005602:	f000 fd2f 	bl	8006064 <__assert_func>
 8005606:	6922      	ldr	r2, [r4, #16]
 8005608:	3202      	adds	r2, #2
 800560a:	f104 010c 	add.w	r1, r4, #12
 800560e:	0092      	lsls	r2, r2, #2
 8005610:	300c      	adds	r0, #12
 8005612:	f000 fd19 	bl	8006048 <memcpy>
 8005616:	4621      	mov	r1, r4
 8005618:	4638      	mov	r0, r7
 800561a:	f7ff ffa5 	bl	8005568 <_Bfree>
 800561e:	4644      	mov	r4, r8
 8005620:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005624:	3501      	adds	r5, #1
 8005626:	615e      	str	r6, [r3, #20]
 8005628:	6125      	str	r5, [r4, #16]
 800562a:	4620      	mov	r0, r4
 800562c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005630:	080067ec 	.word	0x080067ec
 8005634:	080067fd 	.word	0x080067fd

08005638 <__hi0bits>:
 8005638:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800563c:	4603      	mov	r3, r0
 800563e:	bf36      	itet	cc
 8005640:	0403      	lslcc	r3, r0, #16
 8005642:	2000      	movcs	r0, #0
 8005644:	2010      	movcc	r0, #16
 8005646:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800564a:	bf3c      	itt	cc
 800564c:	021b      	lslcc	r3, r3, #8
 800564e:	3008      	addcc	r0, #8
 8005650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005654:	bf3c      	itt	cc
 8005656:	011b      	lslcc	r3, r3, #4
 8005658:	3004      	addcc	r0, #4
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800565e:	bf3c      	itt	cc
 8005660:	009b      	lslcc	r3, r3, #2
 8005662:	3002      	addcc	r0, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	db05      	blt.n	8005674 <__hi0bits+0x3c>
 8005668:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800566c:	f100 0001 	add.w	r0, r0, #1
 8005670:	bf08      	it	eq
 8005672:	2020      	moveq	r0, #32
 8005674:	4770      	bx	lr

08005676 <__lo0bits>:
 8005676:	6803      	ldr	r3, [r0, #0]
 8005678:	4602      	mov	r2, r0
 800567a:	f013 0007 	ands.w	r0, r3, #7
 800567e:	d00b      	beq.n	8005698 <__lo0bits+0x22>
 8005680:	07d9      	lsls	r1, r3, #31
 8005682:	d421      	bmi.n	80056c8 <__lo0bits+0x52>
 8005684:	0798      	lsls	r0, r3, #30
 8005686:	bf49      	itett	mi
 8005688:	085b      	lsrmi	r3, r3, #1
 800568a:	089b      	lsrpl	r3, r3, #2
 800568c:	2001      	movmi	r0, #1
 800568e:	6013      	strmi	r3, [r2, #0]
 8005690:	bf5c      	itt	pl
 8005692:	6013      	strpl	r3, [r2, #0]
 8005694:	2002      	movpl	r0, #2
 8005696:	4770      	bx	lr
 8005698:	b299      	uxth	r1, r3
 800569a:	b909      	cbnz	r1, 80056a0 <__lo0bits+0x2a>
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	2010      	movs	r0, #16
 80056a0:	b2d9      	uxtb	r1, r3
 80056a2:	b909      	cbnz	r1, 80056a8 <__lo0bits+0x32>
 80056a4:	3008      	adds	r0, #8
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	0719      	lsls	r1, r3, #28
 80056aa:	bf04      	itt	eq
 80056ac:	091b      	lsreq	r3, r3, #4
 80056ae:	3004      	addeq	r0, #4
 80056b0:	0799      	lsls	r1, r3, #30
 80056b2:	bf04      	itt	eq
 80056b4:	089b      	lsreq	r3, r3, #2
 80056b6:	3002      	addeq	r0, #2
 80056b8:	07d9      	lsls	r1, r3, #31
 80056ba:	d403      	bmi.n	80056c4 <__lo0bits+0x4e>
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	f100 0001 	add.w	r0, r0, #1
 80056c2:	d003      	beq.n	80056cc <__lo0bits+0x56>
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4770      	bx	lr
 80056c8:	2000      	movs	r0, #0
 80056ca:	4770      	bx	lr
 80056cc:	2020      	movs	r0, #32
 80056ce:	4770      	bx	lr

080056d0 <__i2b>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	460c      	mov	r4, r1
 80056d4:	2101      	movs	r1, #1
 80056d6:	f7ff ff07 	bl	80054e8 <_Balloc>
 80056da:	4602      	mov	r2, r0
 80056dc:	b928      	cbnz	r0, 80056ea <__i2b+0x1a>
 80056de:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <__i2b+0x24>)
 80056e0:	4805      	ldr	r0, [pc, #20]	@ (80056f8 <__i2b+0x28>)
 80056e2:	f240 1145 	movw	r1, #325	@ 0x145
 80056e6:	f000 fcbd 	bl	8006064 <__assert_func>
 80056ea:	2301      	movs	r3, #1
 80056ec:	6144      	str	r4, [r0, #20]
 80056ee:	6103      	str	r3, [r0, #16]
 80056f0:	bd10      	pop	{r4, pc}
 80056f2:	bf00      	nop
 80056f4:	080067ec 	.word	0x080067ec
 80056f8:	080067fd 	.word	0x080067fd

080056fc <__multiply>:
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	4614      	mov	r4, r2
 8005702:	690a      	ldr	r2, [r1, #16]
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	bfa8      	it	ge
 800570a:	4623      	movge	r3, r4
 800570c:	460f      	mov	r7, r1
 800570e:	bfa4      	itt	ge
 8005710:	460c      	movge	r4, r1
 8005712:	461f      	movge	r7, r3
 8005714:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005718:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800571c:	68a3      	ldr	r3, [r4, #8]
 800571e:	6861      	ldr	r1, [r4, #4]
 8005720:	eb0a 0609 	add.w	r6, sl, r9
 8005724:	42b3      	cmp	r3, r6
 8005726:	b085      	sub	sp, #20
 8005728:	bfb8      	it	lt
 800572a:	3101      	addlt	r1, #1
 800572c:	f7ff fedc 	bl	80054e8 <_Balloc>
 8005730:	b930      	cbnz	r0, 8005740 <__multiply+0x44>
 8005732:	4602      	mov	r2, r0
 8005734:	4b44      	ldr	r3, [pc, #272]	@ (8005848 <__multiply+0x14c>)
 8005736:	4845      	ldr	r0, [pc, #276]	@ (800584c <__multiply+0x150>)
 8005738:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800573c:	f000 fc92 	bl	8006064 <__assert_func>
 8005740:	f100 0514 	add.w	r5, r0, #20
 8005744:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005748:	462b      	mov	r3, r5
 800574a:	2200      	movs	r2, #0
 800574c:	4543      	cmp	r3, r8
 800574e:	d321      	bcc.n	8005794 <__multiply+0x98>
 8005750:	f107 0114 	add.w	r1, r7, #20
 8005754:	f104 0214 	add.w	r2, r4, #20
 8005758:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800575c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005760:	9302      	str	r3, [sp, #8]
 8005762:	1b13      	subs	r3, r2, r4
 8005764:	3b15      	subs	r3, #21
 8005766:	f023 0303 	bic.w	r3, r3, #3
 800576a:	3304      	adds	r3, #4
 800576c:	f104 0715 	add.w	r7, r4, #21
 8005770:	42ba      	cmp	r2, r7
 8005772:	bf38      	it	cc
 8005774:	2304      	movcc	r3, #4
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	9b02      	ldr	r3, [sp, #8]
 800577a:	9103      	str	r1, [sp, #12]
 800577c:	428b      	cmp	r3, r1
 800577e:	d80c      	bhi.n	800579a <__multiply+0x9e>
 8005780:	2e00      	cmp	r6, #0
 8005782:	dd03      	ble.n	800578c <__multiply+0x90>
 8005784:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005788:	2b00      	cmp	r3, #0
 800578a:	d05b      	beq.n	8005844 <__multiply+0x148>
 800578c:	6106      	str	r6, [r0, #16]
 800578e:	b005      	add	sp, #20
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	f843 2b04 	str.w	r2, [r3], #4
 8005798:	e7d8      	b.n	800574c <__multiply+0x50>
 800579a:	f8b1 a000 	ldrh.w	sl, [r1]
 800579e:	f1ba 0f00 	cmp.w	sl, #0
 80057a2:	d024      	beq.n	80057ee <__multiply+0xf2>
 80057a4:	f104 0e14 	add.w	lr, r4, #20
 80057a8:	46a9      	mov	r9, r5
 80057aa:	f04f 0c00 	mov.w	ip, #0
 80057ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057b2:	f8d9 3000 	ldr.w	r3, [r9]
 80057b6:	fa1f fb87 	uxth.w	fp, r7
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80057c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80057c4:	f8d9 7000 	ldr.w	r7, [r9]
 80057c8:	4463      	add	r3, ip
 80057ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80057ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80057d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80057dc:	4572      	cmp	r2, lr
 80057de:	f849 3b04 	str.w	r3, [r9], #4
 80057e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80057e6:	d8e2      	bhi.n	80057ae <__multiply+0xb2>
 80057e8:	9b01      	ldr	r3, [sp, #4]
 80057ea:	f845 c003 	str.w	ip, [r5, r3]
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80057f4:	3104      	adds	r1, #4
 80057f6:	f1b9 0f00 	cmp.w	r9, #0
 80057fa:	d021      	beq.n	8005840 <__multiply+0x144>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	f104 0c14 	add.w	ip, r4, #20
 8005802:	46ae      	mov	lr, r5
 8005804:	f04f 0a00 	mov.w	sl, #0
 8005808:	f8bc b000 	ldrh.w	fp, [ip]
 800580c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005810:	fb09 770b 	mla	r7, r9, fp, r7
 8005814:	4457      	add	r7, sl
 8005816:	b29b      	uxth	r3, r3
 8005818:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800581c:	f84e 3b04 	str.w	r3, [lr], #4
 8005820:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005824:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005828:	f8be 3000 	ldrh.w	r3, [lr]
 800582c:	fb09 330a 	mla	r3, r9, sl, r3
 8005830:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005834:	4562      	cmp	r2, ip
 8005836:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800583a:	d8e5      	bhi.n	8005808 <__multiply+0x10c>
 800583c:	9f01      	ldr	r7, [sp, #4]
 800583e:	51eb      	str	r3, [r5, r7]
 8005840:	3504      	adds	r5, #4
 8005842:	e799      	b.n	8005778 <__multiply+0x7c>
 8005844:	3e01      	subs	r6, #1
 8005846:	e79b      	b.n	8005780 <__multiply+0x84>
 8005848:	080067ec 	.word	0x080067ec
 800584c:	080067fd 	.word	0x080067fd

08005850 <__pow5mult>:
 8005850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005854:	4615      	mov	r5, r2
 8005856:	f012 0203 	ands.w	r2, r2, #3
 800585a:	4607      	mov	r7, r0
 800585c:	460e      	mov	r6, r1
 800585e:	d007      	beq.n	8005870 <__pow5mult+0x20>
 8005860:	4c25      	ldr	r4, [pc, #148]	@ (80058f8 <__pow5mult+0xa8>)
 8005862:	3a01      	subs	r2, #1
 8005864:	2300      	movs	r3, #0
 8005866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800586a:	f7ff fe9f 	bl	80055ac <__multadd>
 800586e:	4606      	mov	r6, r0
 8005870:	10ad      	asrs	r5, r5, #2
 8005872:	d03d      	beq.n	80058f0 <__pow5mult+0xa0>
 8005874:	69fc      	ldr	r4, [r7, #28]
 8005876:	b97c      	cbnz	r4, 8005898 <__pow5mult+0x48>
 8005878:	2010      	movs	r0, #16
 800587a:	f7ff fd7f 	bl	800537c <malloc>
 800587e:	4602      	mov	r2, r0
 8005880:	61f8      	str	r0, [r7, #28]
 8005882:	b928      	cbnz	r0, 8005890 <__pow5mult+0x40>
 8005884:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <__pow5mult+0xac>)
 8005886:	481e      	ldr	r0, [pc, #120]	@ (8005900 <__pow5mult+0xb0>)
 8005888:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800588c:	f000 fbea 	bl	8006064 <__assert_func>
 8005890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005894:	6004      	str	r4, [r0, #0]
 8005896:	60c4      	str	r4, [r0, #12]
 8005898:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800589c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058a0:	b94c      	cbnz	r4, 80058b6 <__pow5mult+0x66>
 80058a2:	f240 2171 	movw	r1, #625	@ 0x271
 80058a6:	4638      	mov	r0, r7
 80058a8:	f7ff ff12 	bl	80056d0 <__i2b>
 80058ac:	2300      	movs	r3, #0
 80058ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80058b2:	4604      	mov	r4, r0
 80058b4:	6003      	str	r3, [r0, #0]
 80058b6:	f04f 0900 	mov.w	r9, #0
 80058ba:	07eb      	lsls	r3, r5, #31
 80058bc:	d50a      	bpl.n	80058d4 <__pow5mult+0x84>
 80058be:	4631      	mov	r1, r6
 80058c0:	4622      	mov	r2, r4
 80058c2:	4638      	mov	r0, r7
 80058c4:	f7ff ff1a 	bl	80056fc <__multiply>
 80058c8:	4631      	mov	r1, r6
 80058ca:	4680      	mov	r8, r0
 80058cc:	4638      	mov	r0, r7
 80058ce:	f7ff fe4b 	bl	8005568 <_Bfree>
 80058d2:	4646      	mov	r6, r8
 80058d4:	106d      	asrs	r5, r5, #1
 80058d6:	d00b      	beq.n	80058f0 <__pow5mult+0xa0>
 80058d8:	6820      	ldr	r0, [r4, #0]
 80058da:	b938      	cbnz	r0, 80058ec <__pow5mult+0x9c>
 80058dc:	4622      	mov	r2, r4
 80058de:	4621      	mov	r1, r4
 80058e0:	4638      	mov	r0, r7
 80058e2:	f7ff ff0b 	bl	80056fc <__multiply>
 80058e6:	6020      	str	r0, [r4, #0]
 80058e8:	f8c0 9000 	str.w	r9, [r0]
 80058ec:	4604      	mov	r4, r0
 80058ee:	e7e4      	b.n	80058ba <__pow5mult+0x6a>
 80058f0:	4630      	mov	r0, r6
 80058f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f6:	bf00      	nop
 80058f8:	08006858 	.word	0x08006858
 80058fc:	0800677d 	.word	0x0800677d
 8005900:	080067fd 	.word	0x080067fd

08005904 <__lshift>:
 8005904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	460c      	mov	r4, r1
 800590a:	6849      	ldr	r1, [r1, #4]
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005912:	68a3      	ldr	r3, [r4, #8]
 8005914:	4607      	mov	r7, r0
 8005916:	4691      	mov	r9, r2
 8005918:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800591c:	f108 0601 	add.w	r6, r8, #1
 8005920:	42b3      	cmp	r3, r6
 8005922:	db0b      	blt.n	800593c <__lshift+0x38>
 8005924:	4638      	mov	r0, r7
 8005926:	f7ff fddf 	bl	80054e8 <_Balloc>
 800592a:	4605      	mov	r5, r0
 800592c:	b948      	cbnz	r0, 8005942 <__lshift+0x3e>
 800592e:	4602      	mov	r2, r0
 8005930:	4b28      	ldr	r3, [pc, #160]	@ (80059d4 <__lshift+0xd0>)
 8005932:	4829      	ldr	r0, [pc, #164]	@ (80059d8 <__lshift+0xd4>)
 8005934:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005938:	f000 fb94 	bl	8006064 <__assert_func>
 800593c:	3101      	adds	r1, #1
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	e7ee      	b.n	8005920 <__lshift+0x1c>
 8005942:	2300      	movs	r3, #0
 8005944:	f100 0114 	add.w	r1, r0, #20
 8005948:	f100 0210 	add.w	r2, r0, #16
 800594c:	4618      	mov	r0, r3
 800594e:	4553      	cmp	r3, sl
 8005950:	db33      	blt.n	80059ba <__lshift+0xb6>
 8005952:	6920      	ldr	r0, [r4, #16]
 8005954:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005958:	f104 0314 	add.w	r3, r4, #20
 800595c:	f019 091f 	ands.w	r9, r9, #31
 8005960:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005964:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005968:	d02b      	beq.n	80059c2 <__lshift+0xbe>
 800596a:	f1c9 0e20 	rsb	lr, r9, #32
 800596e:	468a      	mov	sl, r1
 8005970:	2200      	movs	r2, #0
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	fa00 f009 	lsl.w	r0, r0, r9
 8005978:	4310      	orrs	r0, r2
 800597a:	f84a 0b04 	str.w	r0, [sl], #4
 800597e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005982:	459c      	cmp	ip, r3
 8005984:	fa22 f20e 	lsr.w	r2, r2, lr
 8005988:	d8f3      	bhi.n	8005972 <__lshift+0x6e>
 800598a:	ebac 0304 	sub.w	r3, ip, r4
 800598e:	3b15      	subs	r3, #21
 8005990:	f023 0303 	bic.w	r3, r3, #3
 8005994:	3304      	adds	r3, #4
 8005996:	f104 0015 	add.w	r0, r4, #21
 800599a:	4584      	cmp	ip, r0
 800599c:	bf38      	it	cc
 800599e:	2304      	movcc	r3, #4
 80059a0:	50ca      	str	r2, [r1, r3]
 80059a2:	b10a      	cbz	r2, 80059a8 <__lshift+0xa4>
 80059a4:	f108 0602 	add.w	r6, r8, #2
 80059a8:	3e01      	subs	r6, #1
 80059aa:	4638      	mov	r0, r7
 80059ac:	612e      	str	r6, [r5, #16]
 80059ae:	4621      	mov	r1, r4
 80059b0:	f7ff fdda 	bl	8005568 <_Bfree>
 80059b4:	4628      	mov	r0, r5
 80059b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80059be:	3301      	adds	r3, #1
 80059c0:	e7c5      	b.n	800594e <__lshift+0x4a>
 80059c2:	3904      	subs	r1, #4
 80059c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80059cc:	459c      	cmp	ip, r3
 80059ce:	d8f9      	bhi.n	80059c4 <__lshift+0xc0>
 80059d0:	e7ea      	b.n	80059a8 <__lshift+0xa4>
 80059d2:	bf00      	nop
 80059d4:	080067ec 	.word	0x080067ec
 80059d8:	080067fd 	.word	0x080067fd

080059dc <__mcmp>:
 80059dc:	690a      	ldr	r2, [r1, #16]
 80059de:	4603      	mov	r3, r0
 80059e0:	6900      	ldr	r0, [r0, #16]
 80059e2:	1a80      	subs	r0, r0, r2
 80059e4:	b530      	push	{r4, r5, lr}
 80059e6:	d10e      	bne.n	8005a06 <__mcmp+0x2a>
 80059e8:	3314      	adds	r3, #20
 80059ea:	3114      	adds	r1, #20
 80059ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059fc:	4295      	cmp	r5, r2
 80059fe:	d003      	beq.n	8005a08 <__mcmp+0x2c>
 8005a00:	d205      	bcs.n	8005a0e <__mcmp+0x32>
 8005a02:	f04f 30ff 	mov.w	r0, #4294967295
 8005a06:	bd30      	pop	{r4, r5, pc}
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d3f3      	bcc.n	80059f4 <__mcmp+0x18>
 8005a0c:	e7fb      	b.n	8005a06 <__mcmp+0x2a>
 8005a0e:	2001      	movs	r0, #1
 8005a10:	e7f9      	b.n	8005a06 <__mcmp+0x2a>
	...

08005a14 <__mdiff>:
 8005a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	4689      	mov	r9, r1
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4648      	mov	r0, r9
 8005a20:	4614      	mov	r4, r2
 8005a22:	f7ff ffdb 	bl	80059dc <__mcmp>
 8005a26:	1e05      	subs	r5, r0, #0
 8005a28:	d112      	bne.n	8005a50 <__mdiff+0x3c>
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f7ff fd5b 	bl	80054e8 <_Balloc>
 8005a32:	4602      	mov	r2, r0
 8005a34:	b928      	cbnz	r0, 8005a42 <__mdiff+0x2e>
 8005a36:	4b3f      	ldr	r3, [pc, #252]	@ (8005b34 <__mdiff+0x120>)
 8005a38:	f240 2137 	movw	r1, #567	@ 0x237
 8005a3c:	483e      	ldr	r0, [pc, #248]	@ (8005b38 <__mdiff+0x124>)
 8005a3e:	f000 fb11 	bl	8006064 <__assert_func>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a48:	4610      	mov	r0, r2
 8005a4a:	b003      	add	sp, #12
 8005a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a50:	bfbc      	itt	lt
 8005a52:	464b      	movlt	r3, r9
 8005a54:	46a1      	movlt	r9, r4
 8005a56:	4630      	mov	r0, r6
 8005a58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a5c:	bfba      	itte	lt
 8005a5e:	461c      	movlt	r4, r3
 8005a60:	2501      	movlt	r5, #1
 8005a62:	2500      	movge	r5, #0
 8005a64:	f7ff fd40 	bl	80054e8 <_Balloc>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	b918      	cbnz	r0, 8005a74 <__mdiff+0x60>
 8005a6c:	4b31      	ldr	r3, [pc, #196]	@ (8005b34 <__mdiff+0x120>)
 8005a6e:	f240 2145 	movw	r1, #581	@ 0x245
 8005a72:	e7e3      	b.n	8005a3c <__mdiff+0x28>
 8005a74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005a78:	6926      	ldr	r6, [r4, #16]
 8005a7a:	60c5      	str	r5, [r0, #12]
 8005a7c:	f109 0310 	add.w	r3, r9, #16
 8005a80:	f109 0514 	add.w	r5, r9, #20
 8005a84:	f104 0e14 	add.w	lr, r4, #20
 8005a88:	f100 0b14 	add.w	fp, r0, #20
 8005a8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005a90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	46d9      	mov	r9, fp
 8005a98:	f04f 0c00 	mov.w	ip, #0
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005aa2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	fa1f f38a 	uxth.w	r3, sl
 8005aac:	4619      	mov	r1, r3
 8005aae:	b283      	uxth	r3, r0
 8005ab0:	1acb      	subs	r3, r1, r3
 8005ab2:	0c00      	lsrs	r0, r0, #16
 8005ab4:	4463      	add	r3, ip
 8005ab6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005aba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ac4:	4576      	cmp	r6, lr
 8005ac6:	f849 3b04 	str.w	r3, [r9], #4
 8005aca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ace:	d8e5      	bhi.n	8005a9c <__mdiff+0x88>
 8005ad0:	1b33      	subs	r3, r6, r4
 8005ad2:	3b15      	subs	r3, #21
 8005ad4:	f023 0303 	bic.w	r3, r3, #3
 8005ad8:	3415      	adds	r4, #21
 8005ada:	3304      	adds	r3, #4
 8005adc:	42a6      	cmp	r6, r4
 8005ade:	bf38      	it	cc
 8005ae0:	2304      	movcc	r3, #4
 8005ae2:	441d      	add	r5, r3
 8005ae4:	445b      	add	r3, fp
 8005ae6:	461e      	mov	r6, r3
 8005ae8:	462c      	mov	r4, r5
 8005aea:	4544      	cmp	r4, r8
 8005aec:	d30e      	bcc.n	8005b0c <__mdiff+0xf8>
 8005aee:	f108 0103 	add.w	r1, r8, #3
 8005af2:	1b49      	subs	r1, r1, r5
 8005af4:	f021 0103 	bic.w	r1, r1, #3
 8005af8:	3d03      	subs	r5, #3
 8005afa:	45a8      	cmp	r8, r5
 8005afc:	bf38      	it	cc
 8005afe:	2100      	movcc	r1, #0
 8005b00:	440b      	add	r3, r1
 8005b02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b06:	b191      	cbz	r1, 8005b2e <__mdiff+0x11a>
 8005b08:	6117      	str	r7, [r2, #16]
 8005b0a:	e79d      	b.n	8005a48 <__mdiff+0x34>
 8005b0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b10:	46e6      	mov	lr, ip
 8005b12:	0c08      	lsrs	r0, r1, #16
 8005b14:	fa1c fc81 	uxtah	ip, ip, r1
 8005b18:	4471      	add	r1, lr
 8005b1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005b1e:	b289      	uxth	r1, r1
 8005b20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b24:	f846 1b04 	str.w	r1, [r6], #4
 8005b28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b2c:	e7dd      	b.n	8005aea <__mdiff+0xd6>
 8005b2e:	3f01      	subs	r7, #1
 8005b30:	e7e7      	b.n	8005b02 <__mdiff+0xee>
 8005b32:	bf00      	nop
 8005b34:	080067ec 	.word	0x080067ec
 8005b38:	080067fd 	.word	0x080067fd

08005b3c <__d2b>:
 8005b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b40:	460f      	mov	r7, r1
 8005b42:	2101      	movs	r1, #1
 8005b44:	ec59 8b10 	vmov	r8, r9, d0
 8005b48:	4616      	mov	r6, r2
 8005b4a:	f7ff fccd 	bl	80054e8 <_Balloc>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	b930      	cbnz	r0, 8005b60 <__d2b+0x24>
 8005b52:	4602      	mov	r2, r0
 8005b54:	4b23      	ldr	r3, [pc, #140]	@ (8005be4 <__d2b+0xa8>)
 8005b56:	4824      	ldr	r0, [pc, #144]	@ (8005be8 <__d2b+0xac>)
 8005b58:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b5c:	f000 fa82 	bl	8006064 <__assert_func>
 8005b60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b68:	b10d      	cbz	r5, 8005b6e <__d2b+0x32>
 8005b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	f1b8 0300 	subs.w	r3, r8, #0
 8005b74:	d023      	beq.n	8005bbe <__d2b+0x82>
 8005b76:	4668      	mov	r0, sp
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	f7ff fd7c 	bl	8005676 <__lo0bits>
 8005b7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b82:	b1d0      	cbz	r0, 8005bba <__d2b+0x7e>
 8005b84:	f1c0 0320 	rsb	r3, r0, #32
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	40c2      	lsrs	r2, r0
 8005b90:	6163      	str	r3, [r4, #20]
 8005b92:	9201      	str	r2, [sp, #4]
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	61a3      	str	r3, [r4, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bf0c      	ite	eq
 8005b9c:	2201      	moveq	r2, #1
 8005b9e:	2202      	movne	r2, #2
 8005ba0:	6122      	str	r2, [r4, #16]
 8005ba2:	b1a5      	cbz	r5, 8005bce <__d2b+0x92>
 8005ba4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ba8:	4405      	add	r5, r0
 8005baa:	603d      	str	r5, [r7, #0]
 8005bac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005bb0:	6030      	str	r0, [r6, #0]
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	b003      	add	sp, #12
 8005bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bba:	6161      	str	r1, [r4, #20]
 8005bbc:	e7ea      	b.n	8005b94 <__d2b+0x58>
 8005bbe:	a801      	add	r0, sp, #4
 8005bc0:	f7ff fd59 	bl	8005676 <__lo0bits>
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	6163      	str	r3, [r4, #20]
 8005bc8:	3020      	adds	r0, #32
 8005bca:	2201      	movs	r2, #1
 8005bcc:	e7e8      	b.n	8005ba0 <__d2b+0x64>
 8005bce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005bd6:	6038      	str	r0, [r7, #0]
 8005bd8:	6918      	ldr	r0, [r3, #16]
 8005bda:	f7ff fd2d 	bl	8005638 <__hi0bits>
 8005bde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005be2:	e7e5      	b.n	8005bb0 <__d2b+0x74>
 8005be4:	080067ec 	.word	0x080067ec
 8005be8:	080067fd 	.word	0x080067fd

08005bec <__ssputs_r>:
 8005bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	688e      	ldr	r6, [r1, #8]
 8005bf2:	461f      	mov	r7, r3
 8005bf4:	42be      	cmp	r6, r7
 8005bf6:	680b      	ldr	r3, [r1, #0]
 8005bf8:	4682      	mov	sl, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	4690      	mov	r8, r2
 8005bfe:	d82d      	bhi.n	8005c5c <__ssputs_r+0x70>
 8005c00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c08:	d026      	beq.n	8005c58 <__ssputs_r+0x6c>
 8005c0a:	6965      	ldr	r5, [r4, #20]
 8005c0c:	6909      	ldr	r1, [r1, #16]
 8005c0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c12:	eba3 0901 	sub.w	r9, r3, r1
 8005c16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c1a:	1c7b      	adds	r3, r7, #1
 8005c1c:	444b      	add	r3, r9
 8005c1e:	106d      	asrs	r5, r5, #1
 8005c20:	429d      	cmp	r5, r3
 8005c22:	bf38      	it	cc
 8005c24:	461d      	movcc	r5, r3
 8005c26:	0553      	lsls	r3, r2, #21
 8005c28:	d527      	bpl.n	8005c7a <__ssputs_r+0x8e>
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	f7ff fbd0 	bl	80053d0 <_malloc_r>
 8005c30:	4606      	mov	r6, r0
 8005c32:	b360      	cbz	r0, 8005c8e <__ssputs_r+0xa2>
 8005c34:	6921      	ldr	r1, [r4, #16]
 8005c36:	464a      	mov	r2, r9
 8005c38:	f000 fa06 	bl	8006048 <memcpy>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	6126      	str	r6, [r4, #16]
 8005c4a:	6165      	str	r5, [r4, #20]
 8005c4c:	444e      	add	r6, r9
 8005c4e:	eba5 0509 	sub.w	r5, r5, r9
 8005c52:	6026      	str	r6, [r4, #0]
 8005c54:	60a5      	str	r5, [r4, #8]
 8005c56:	463e      	mov	r6, r7
 8005c58:	42be      	cmp	r6, r7
 8005c5a:	d900      	bls.n	8005c5e <__ssputs_r+0x72>
 8005c5c:	463e      	mov	r6, r7
 8005c5e:	6820      	ldr	r0, [r4, #0]
 8005c60:	4632      	mov	r2, r6
 8005c62:	4641      	mov	r1, r8
 8005c64:	f000 f9c6 	bl	8005ff4 <memmove>
 8005c68:	68a3      	ldr	r3, [r4, #8]
 8005c6a:	1b9b      	subs	r3, r3, r6
 8005c6c:	60a3      	str	r3, [r4, #8]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	4433      	add	r3, r6
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	2000      	movs	r0, #0
 8005c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	f000 fa36 	bl	80060ec <_realloc_r>
 8005c80:	4606      	mov	r6, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d1e0      	bne.n	8005c48 <__ssputs_r+0x5c>
 8005c86:	6921      	ldr	r1, [r4, #16]
 8005c88:	4650      	mov	r0, sl
 8005c8a:	f7ff fb2d 	bl	80052e8 <_free_r>
 8005c8e:	230c      	movs	r3, #12
 8005c90:	f8ca 3000 	str.w	r3, [sl]
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	e7e9      	b.n	8005c76 <__ssputs_r+0x8a>
	...

08005ca4 <_svfiprintf_r>:
 8005ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	4698      	mov	r8, r3
 8005caa:	898b      	ldrh	r3, [r1, #12]
 8005cac:	061b      	lsls	r3, r3, #24
 8005cae:	b09d      	sub	sp, #116	@ 0x74
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	d510      	bpl.n	8005cda <_svfiprintf_r+0x36>
 8005cb8:	690b      	ldr	r3, [r1, #16]
 8005cba:	b973      	cbnz	r3, 8005cda <_svfiprintf_r+0x36>
 8005cbc:	2140      	movs	r1, #64	@ 0x40
 8005cbe:	f7ff fb87 	bl	80053d0 <_malloc_r>
 8005cc2:	6028      	str	r0, [r5, #0]
 8005cc4:	6128      	str	r0, [r5, #16]
 8005cc6:	b930      	cbnz	r0, 8005cd6 <_svfiprintf_r+0x32>
 8005cc8:	230c      	movs	r3, #12
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	b01d      	add	sp, #116	@ 0x74
 8005cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd6:	2340      	movs	r3, #64	@ 0x40
 8005cd8:	616b      	str	r3, [r5, #20]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cde:	2320      	movs	r3, #32
 8005ce0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ce8:	2330      	movs	r3, #48	@ 0x30
 8005cea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e88 <_svfiprintf_r+0x1e4>
 8005cee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cf2:	f04f 0901 	mov.w	r9, #1
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	469a      	mov	sl, r3
 8005cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cfe:	b10a      	cbz	r2, 8005d04 <_svfiprintf_r+0x60>
 8005d00:	2a25      	cmp	r2, #37	@ 0x25
 8005d02:	d1f9      	bne.n	8005cf8 <_svfiprintf_r+0x54>
 8005d04:	ebba 0b04 	subs.w	fp, sl, r4
 8005d08:	d00b      	beq.n	8005d22 <_svfiprintf_r+0x7e>
 8005d0a:	465b      	mov	r3, fp
 8005d0c:	4622      	mov	r2, r4
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4638      	mov	r0, r7
 8005d12:	f7ff ff6b 	bl	8005bec <__ssputs_r>
 8005d16:	3001      	adds	r0, #1
 8005d18:	f000 80a7 	beq.w	8005e6a <_svfiprintf_r+0x1c6>
 8005d1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d1e:	445a      	add	r2, fp
 8005d20:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d22:	f89a 3000 	ldrb.w	r3, [sl]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 809f 	beq.w	8005e6a <_svfiprintf_r+0x1c6>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d36:	f10a 0a01 	add.w	sl, sl, #1
 8005d3a:	9304      	str	r3, [sp, #16]
 8005d3c:	9307      	str	r3, [sp, #28]
 8005d3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d42:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d44:	4654      	mov	r4, sl
 8005d46:	2205      	movs	r2, #5
 8005d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4c:	484e      	ldr	r0, [pc, #312]	@ (8005e88 <_svfiprintf_r+0x1e4>)
 8005d4e:	f7fa fa3f 	bl	80001d0 <memchr>
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	b9d8      	cbnz	r0, 8005d8e <_svfiprintf_r+0xea>
 8005d56:	06d0      	lsls	r0, r2, #27
 8005d58:	bf44      	itt	mi
 8005d5a:	2320      	movmi	r3, #32
 8005d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d60:	0711      	lsls	r1, r2, #28
 8005d62:	bf44      	itt	mi
 8005d64:	232b      	movmi	r3, #43	@ 0x2b
 8005d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d70:	d015      	beq.n	8005d9e <_svfiprintf_r+0xfa>
 8005d72:	9a07      	ldr	r2, [sp, #28]
 8005d74:	4654      	mov	r4, sl
 8005d76:	2000      	movs	r0, #0
 8005d78:	f04f 0c0a 	mov.w	ip, #10
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d82:	3b30      	subs	r3, #48	@ 0x30
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d94b      	bls.n	8005e20 <_svfiprintf_r+0x17c>
 8005d88:	b1b0      	cbz	r0, 8005db8 <_svfiprintf_r+0x114>
 8005d8a:	9207      	str	r2, [sp, #28]
 8005d8c:	e014      	b.n	8005db8 <_svfiprintf_r+0x114>
 8005d8e:	eba0 0308 	sub.w	r3, r0, r8
 8005d92:	fa09 f303 	lsl.w	r3, r9, r3
 8005d96:	4313      	orrs	r3, r2
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	46a2      	mov	sl, r4
 8005d9c:	e7d2      	b.n	8005d44 <_svfiprintf_r+0xa0>
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	1d19      	adds	r1, r3, #4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	9103      	str	r1, [sp, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	bfbb      	ittet	lt
 8005daa:	425b      	neglt	r3, r3
 8005dac:	f042 0202 	orrlt.w	r2, r2, #2
 8005db0:	9307      	strge	r3, [sp, #28]
 8005db2:	9307      	strlt	r3, [sp, #28]
 8005db4:	bfb8      	it	lt
 8005db6:	9204      	strlt	r2, [sp, #16]
 8005db8:	7823      	ldrb	r3, [r4, #0]
 8005dba:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dbc:	d10a      	bne.n	8005dd4 <_svfiprintf_r+0x130>
 8005dbe:	7863      	ldrb	r3, [r4, #1]
 8005dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dc2:	d132      	bne.n	8005e2a <_svfiprintf_r+0x186>
 8005dc4:	9b03      	ldr	r3, [sp, #12]
 8005dc6:	1d1a      	adds	r2, r3, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	9203      	str	r2, [sp, #12]
 8005dcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dd0:	3402      	adds	r4, #2
 8005dd2:	9305      	str	r3, [sp, #20]
 8005dd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e98 <_svfiprintf_r+0x1f4>
 8005dd8:	7821      	ldrb	r1, [r4, #0]
 8005dda:	2203      	movs	r2, #3
 8005ddc:	4650      	mov	r0, sl
 8005dde:	f7fa f9f7 	bl	80001d0 <memchr>
 8005de2:	b138      	cbz	r0, 8005df4 <_svfiprintf_r+0x150>
 8005de4:	9b04      	ldr	r3, [sp, #16]
 8005de6:	eba0 000a 	sub.w	r0, r0, sl
 8005dea:	2240      	movs	r2, #64	@ 0x40
 8005dec:	4082      	lsls	r2, r0
 8005dee:	4313      	orrs	r3, r2
 8005df0:	3401      	adds	r4, #1
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df8:	4824      	ldr	r0, [pc, #144]	@ (8005e8c <_svfiprintf_r+0x1e8>)
 8005dfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dfe:	2206      	movs	r2, #6
 8005e00:	f7fa f9e6 	bl	80001d0 <memchr>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d036      	beq.n	8005e76 <_svfiprintf_r+0x1d2>
 8005e08:	4b21      	ldr	r3, [pc, #132]	@ (8005e90 <_svfiprintf_r+0x1ec>)
 8005e0a:	bb1b      	cbnz	r3, 8005e54 <_svfiprintf_r+0x1b0>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	3307      	adds	r3, #7
 8005e10:	f023 0307 	bic.w	r3, r3, #7
 8005e14:	3308      	adds	r3, #8
 8005e16:	9303      	str	r3, [sp, #12]
 8005e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1a:	4433      	add	r3, r6
 8005e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e1e:	e76a      	b.n	8005cf6 <_svfiprintf_r+0x52>
 8005e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e24:	460c      	mov	r4, r1
 8005e26:	2001      	movs	r0, #1
 8005e28:	e7a8      	b.n	8005d7c <_svfiprintf_r+0xd8>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	3401      	adds	r4, #1
 8005e2e:	9305      	str	r3, [sp, #20]
 8005e30:	4619      	mov	r1, r3
 8005e32:	f04f 0c0a 	mov.w	ip, #10
 8005e36:	4620      	mov	r0, r4
 8005e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e3c:	3a30      	subs	r2, #48	@ 0x30
 8005e3e:	2a09      	cmp	r2, #9
 8005e40:	d903      	bls.n	8005e4a <_svfiprintf_r+0x1a6>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0c6      	beq.n	8005dd4 <_svfiprintf_r+0x130>
 8005e46:	9105      	str	r1, [sp, #20]
 8005e48:	e7c4      	b.n	8005dd4 <_svfiprintf_r+0x130>
 8005e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e4e:	4604      	mov	r4, r0
 8005e50:	2301      	movs	r3, #1
 8005e52:	e7f0      	b.n	8005e36 <_svfiprintf_r+0x192>
 8005e54:	ab03      	add	r3, sp, #12
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	462a      	mov	r2, r5
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e94 <_svfiprintf_r+0x1f0>)
 8005e5c:	a904      	add	r1, sp, #16
 8005e5e:	4638      	mov	r0, r7
 8005e60:	f7fd fe98 	bl	8003b94 <_printf_float>
 8005e64:	1c42      	adds	r2, r0, #1
 8005e66:	4606      	mov	r6, r0
 8005e68:	d1d6      	bne.n	8005e18 <_svfiprintf_r+0x174>
 8005e6a:	89ab      	ldrh	r3, [r5, #12]
 8005e6c:	065b      	lsls	r3, r3, #25
 8005e6e:	f53f af2d 	bmi.w	8005ccc <_svfiprintf_r+0x28>
 8005e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e74:	e72c      	b.n	8005cd0 <_svfiprintf_r+0x2c>
 8005e76:	ab03      	add	r3, sp, #12
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <_svfiprintf_r+0x1f0>)
 8005e7e:	a904      	add	r1, sp, #16
 8005e80:	4638      	mov	r0, r7
 8005e82:	f7fe f91f 	bl	80040c4 <_printf_i>
 8005e86:	e7ed      	b.n	8005e64 <_svfiprintf_r+0x1c0>
 8005e88:	08006958 	.word	0x08006958
 8005e8c:	08006962 	.word	0x08006962
 8005e90:	08003b95 	.word	0x08003b95
 8005e94:	08005bed 	.word	0x08005bed
 8005e98:	0800695e 	.word	0x0800695e

08005e9c <__sflush_r>:
 8005e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	0716      	lsls	r6, r2, #28
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	d454      	bmi.n	8005f56 <__sflush_r+0xba>
 8005eac:	684b      	ldr	r3, [r1, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dc02      	bgt.n	8005eb8 <__sflush_r+0x1c>
 8005eb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dd48      	ble.n	8005f4a <__sflush_r+0xae>
 8005eb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	d045      	beq.n	8005f4a <__sflush_r+0xae>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ec4:	682f      	ldr	r7, [r5, #0]
 8005ec6:	6a21      	ldr	r1, [r4, #32]
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	d030      	beq.n	8005f2e <__sflush_r+0x92>
 8005ecc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	0759      	lsls	r1, r3, #29
 8005ed2:	d505      	bpl.n	8005ee0 <__sflush_r+0x44>
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005eda:	b10b      	cbz	r3, 8005ee0 <__sflush_r+0x44>
 8005edc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ee4:	6a21      	ldr	r1, [r4, #32]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b0      	blx	r6
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	d106      	bne.n	8005efe <__sflush_r+0x62>
 8005ef0:	6829      	ldr	r1, [r5, #0]
 8005ef2:	291d      	cmp	r1, #29
 8005ef4:	d82b      	bhi.n	8005f4e <__sflush_r+0xb2>
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa0 <__sflush_r+0x104>)
 8005ef8:	410a      	asrs	r2, r1
 8005efa:	07d6      	lsls	r6, r2, #31
 8005efc:	d427      	bmi.n	8005f4e <__sflush_r+0xb2>
 8005efe:	2200      	movs	r2, #0
 8005f00:	6062      	str	r2, [r4, #4]
 8005f02:	04d9      	lsls	r1, r3, #19
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	6022      	str	r2, [r4, #0]
 8005f08:	d504      	bpl.n	8005f14 <__sflush_r+0x78>
 8005f0a:	1c42      	adds	r2, r0, #1
 8005f0c:	d101      	bne.n	8005f12 <__sflush_r+0x76>
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	b903      	cbnz	r3, 8005f14 <__sflush_r+0x78>
 8005f12:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f16:	602f      	str	r7, [r5, #0]
 8005f18:	b1b9      	cbz	r1, 8005f4a <__sflush_r+0xae>
 8005f1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	d002      	beq.n	8005f28 <__sflush_r+0x8c>
 8005f22:	4628      	mov	r0, r5
 8005f24:	f7ff f9e0 	bl	80052e8 <_free_r>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f2c:	e00d      	b.n	8005f4a <__sflush_r+0xae>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b0      	blx	r6
 8005f34:	4602      	mov	r2, r0
 8005f36:	1c50      	adds	r0, r2, #1
 8005f38:	d1c9      	bne.n	8005ece <__sflush_r+0x32>
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0c6      	beq.n	8005ece <__sflush_r+0x32>
 8005f40:	2b1d      	cmp	r3, #29
 8005f42:	d001      	beq.n	8005f48 <__sflush_r+0xac>
 8005f44:	2b16      	cmp	r3, #22
 8005f46:	d11e      	bne.n	8005f86 <__sflush_r+0xea>
 8005f48:	602f      	str	r7, [r5, #0]
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e022      	b.n	8005f94 <__sflush_r+0xf8>
 8005f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f52:	b21b      	sxth	r3, r3
 8005f54:	e01b      	b.n	8005f8e <__sflush_r+0xf2>
 8005f56:	690f      	ldr	r7, [r1, #16]
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	d0f6      	beq.n	8005f4a <__sflush_r+0xae>
 8005f5c:	0793      	lsls	r3, r2, #30
 8005f5e:	680e      	ldr	r6, [r1, #0]
 8005f60:	bf08      	it	eq
 8005f62:	694b      	ldreq	r3, [r1, #20]
 8005f64:	600f      	str	r7, [r1, #0]
 8005f66:	bf18      	it	ne
 8005f68:	2300      	movne	r3, #0
 8005f6a:	eba6 0807 	sub.w	r8, r6, r7
 8005f6e:	608b      	str	r3, [r1, #8]
 8005f70:	f1b8 0f00 	cmp.w	r8, #0
 8005f74:	dde9      	ble.n	8005f4a <__sflush_r+0xae>
 8005f76:	6a21      	ldr	r1, [r4, #32]
 8005f78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f7a:	4643      	mov	r3, r8
 8005f7c:	463a      	mov	r2, r7
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b0      	blx	r6
 8005f82:	2800      	cmp	r0, #0
 8005f84:	dc08      	bgt.n	8005f98 <__sflush_r+0xfc>
 8005f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f98:	4407      	add	r7, r0
 8005f9a:	eba8 0800 	sub.w	r8, r8, r0
 8005f9e:	e7e7      	b.n	8005f70 <__sflush_r+0xd4>
 8005fa0:	dfbffffe 	.word	0xdfbffffe

08005fa4 <_fflush_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	690b      	ldr	r3, [r1, #16]
 8005fa8:	4605      	mov	r5, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b913      	cbnz	r3, 8005fb4 <_fflush_r+0x10>
 8005fae:	2500      	movs	r5, #0
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	b118      	cbz	r0, 8005fbe <_fflush_r+0x1a>
 8005fb6:	6a03      	ldr	r3, [r0, #32]
 8005fb8:	b90b      	cbnz	r3, 8005fbe <_fflush_r+0x1a>
 8005fba:	f7fe fa2f 	bl	800441c <__sinit>
 8005fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0f3      	beq.n	8005fae <_fflush_r+0xa>
 8005fc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fc8:	07d0      	lsls	r0, r2, #31
 8005fca:	d404      	bmi.n	8005fd6 <_fflush_r+0x32>
 8005fcc:	0599      	lsls	r1, r3, #22
 8005fce:	d402      	bmi.n	8005fd6 <_fflush_r+0x32>
 8005fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fd2:	f7fe fb3a 	bl	800464a <__retarget_lock_acquire_recursive>
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	4621      	mov	r1, r4
 8005fda:	f7ff ff5f 	bl	8005e9c <__sflush_r>
 8005fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fe0:	07da      	lsls	r2, r3, #31
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	d4e4      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	059b      	lsls	r3, r3, #22
 8005fea:	d4e1      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fee:	f7fe fb2d 	bl	800464c <__retarget_lock_release_recursive>
 8005ff2:	e7dd      	b.n	8005fb0 <_fflush_r+0xc>

08005ff4 <memmove>:
 8005ff4:	4288      	cmp	r0, r1
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	eb01 0402 	add.w	r4, r1, r2
 8005ffc:	d902      	bls.n	8006004 <memmove+0x10>
 8005ffe:	4284      	cmp	r4, r0
 8006000:	4623      	mov	r3, r4
 8006002:	d807      	bhi.n	8006014 <memmove+0x20>
 8006004:	1e43      	subs	r3, r0, #1
 8006006:	42a1      	cmp	r1, r4
 8006008:	d008      	beq.n	800601c <memmove+0x28>
 800600a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800600e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006012:	e7f8      	b.n	8006006 <memmove+0x12>
 8006014:	4402      	add	r2, r0
 8006016:	4601      	mov	r1, r0
 8006018:	428a      	cmp	r2, r1
 800601a:	d100      	bne.n	800601e <memmove+0x2a>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006026:	e7f7      	b.n	8006018 <memmove+0x24>

08006028 <_sbrk_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d06      	ldr	r5, [pc, #24]	@ (8006044 <_sbrk_r+0x1c>)
 800602c:	2300      	movs	r3, #0
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	f7fb fac6 	bl	80015c4 <_sbrk>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_sbrk_r+0x1a>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_sbrk_r+0x1a>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	200003f8 	.word	0x200003f8

08006048 <memcpy>:
 8006048:	440a      	add	r2, r1
 800604a:	4291      	cmp	r1, r2
 800604c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006050:	d100      	bne.n	8006054 <memcpy+0xc>
 8006052:	4770      	bx	lr
 8006054:	b510      	push	{r4, lr}
 8006056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800605e:	4291      	cmp	r1, r2
 8006060:	d1f9      	bne.n	8006056 <memcpy+0xe>
 8006062:	bd10      	pop	{r4, pc}

08006064 <__assert_func>:
 8006064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006066:	4614      	mov	r4, r2
 8006068:	461a      	mov	r2, r3
 800606a:	4b09      	ldr	r3, [pc, #36]	@ (8006090 <__assert_func+0x2c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4605      	mov	r5, r0
 8006070:	68d8      	ldr	r0, [r3, #12]
 8006072:	b954      	cbnz	r4, 800608a <__assert_func+0x26>
 8006074:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <__assert_func+0x30>)
 8006076:	461c      	mov	r4, r3
 8006078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800607c:	9100      	str	r1, [sp, #0]
 800607e:	462b      	mov	r3, r5
 8006080:	4905      	ldr	r1, [pc, #20]	@ (8006098 <__assert_func+0x34>)
 8006082:	f000 f86f 	bl	8006164 <fiprintf>
 8006086:	f000 f87f 	bl	8006188 <abort>
 800608a:	4b04      	ldr	r3, [pc, #16]	@ (800609c <__assert_func+0x38>)
 800608c:	e7f4      	b.n	8006078 <__assert_func+0x14>
 800608e:	bf00      	nop
 8006090:	20000028 	.word	0x20000028
 8006094:	080069ae 	.word	0x080069ae
 8006098:	08006980 	.word	0x08006980
 800609c:	08006973 	.word	0x08006973

080060a0 <_calloc_r>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	fba1 5402 	umull	r5, r4, r1, r2
 80060a6:	b93c      	cbnz	r4, 80060b8 <_calloc_r+0x18>
 80060a8:	4629      	mov	r1, r5
 80060aa:	f7ff f991 	bl	80053d0 <_malloc_r>
 80060ae:	4606      	mov	r6, r0
 80060b0:	b928      	cbnz	r0, 80060be <_calloc_r+0x1e>
 80060b2:	2600      	movs	r6, #0
 80060b4:	4630      	mov	r0, r6
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	220c      	movs	r2, #12
 80060ba:	6002      	str	r2, [r0, #0]
 80060bc:	e7f9      	b.n	80060b2 <_calloc_r+0x12>
 80060be:	462a      	mov	r2, r5
 80060c0:	4621      	mov	r1, r4
 80060c2:	f7fe fa44 	bl	800454e <memset>
 80060c6:	e7f5      	b.n	80060b4 <_calloc_r+0x14>

080060c8 <__ascii_mbtowc>:
 80060c8:	b082      	sub	sp, #8
 80060ca:	b901      	cbnz	r1, 80060ce <__ascii_mbtowc+0x6>
 80060cc:	a901      	add	r1, sp, #4
 80060ce:	b142      	cbz	r2, 80060e2 <__ascii_mbtowc+0x1a>
 80060d0:	b14b      	cbz	r3, 80060e6 <__ascii_mbtowc+0x1e>
 80060d2:	7813      	ldrb	r3, [r2, #0]
 80060d4:	600b      	str	r3, [r1, #0]
 80060d6:	7812      	ldrb	r2, [r2, #0]
 80060d8:	1e10      	subs	r0, r2, #0
 80060da:	bf18      	it	ne
 80060dc:	2001      	movne	r0, #1
 80060de:	b002      	add	sp, #8
 80060e0:	4770      	bx	lr
 80060e2:	4610      	mov	r0, r2
 80060e4:	e7fb      	b.n	80060de <__ascii_mbtowc+0x16>
 80060e6:	f06f 0001 	mvn.w	r0, #1
 80060ea:	e7f8      	b.n	80060de <__ascii_mbtowc+0x16>

080060ec <_realloc_r>:
 80060ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f0:	4680      	mov	r8, r0
 80060f2:	4615      	mov	r5, r2
 80060f4:	460c      	mov	r4, r1
 80060f6:	b921      	cbnz	r1, 8006102 <_realloc_r+0x16>
 80060f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060fc:	4611      	mov	r1, r2
 80060fe:	f7ff b967 	b.w	80053d0 <_malloc_r>
 8006102:	b92a      	cbnz	r2, 8006110 <_realloc_r+0x24>
 8006104:	f7ff f8f0 	bl	80052e8 <_free_r>
 8006108:	2400      	movs	r4, #0
 800610a:	4620      	mov	r0, r4
 800610c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006110:	f000 f841 	bl	8006196 <_malloc_usable_size_r>
 8006114:	4285      	cmp	r5, r0
 8006116:	4606      	mov	r6, r0
 8006118:	d802      	bhi.n	8006120 <_realloc_r+0x34>
 800611a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800611e:	d8f4      	bhi.n	800610a <_realloc_r+0x1e>
 8006120:	4629      	mov	r1, r5
 8006122:	4640      	mov	r0, r8
 8006124:	f7ff f954 	bl	80053d0 <_malloc_r>
 8006128:	4607      	mov	r7, r0
 800612a:	2800      	cmp	r0, #0
 800612c:	d0ec      	beq.n	8006108 <_realloc_r+0x1c>
 800612e:	42b5      	cmp	r5, r6
 8006130:	462a      	mov	r2, r5
 8006132:	4621      	mov	r1, r4
 8006134:	bf28      	it	cs
 8006136:	4632      	movcs	r2, r6
 8006138:	f7ff ff86 	bl	8006048 <memcpy>
 800613c:	4621      	mov	r1, r4
 800613e:	4640      	mov	r0, r8
 8006140:	f7ff f8d2 	bl	80052e8 <_free_r>
 8006144:	463c      	mov	r4, r7
 8006146:	e7e0      	b.n	800610a <_realloc_r+0x1e>

08006148 <__ascii_wctomb>:
 8006148:	4603      	mov	r3, r0
 800614a:	4608      	mov	r0, r1
 800614c:	b141      	cbz	r1, 8006160 <__ascii_wctomb+0x18>
 800614e:	2aff      	cmp	r2, #255	@ 0xff
 8006150:	d904      	bls.n	800615c <__ascii_wctomb+0x14>
 8006152:	228a      	movs	r2, #138	@ 0x8a
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f04f 30ff 	mov.w	r0, #4294967295
 800615a:	4770      	bx	lr
 800615c:	700a      	strb	r2, [r1, #0]
 800615e:	2001      	movs	r0, #1
 8006160:	4770      	bx	lr
	...

08006164 <fiprintf>:
 8006164:	b40e      	push	{r1, r2, r3}
 8006166:	b503      	push	{r0, r1, lr}
 8006168:	4601      	mov	r1, r0
 800616a:	ab03      	add	r3, sp, #12
 800616c:	4805      	ldr	r0, [pc, #20]	@ (8006184 <fiprintf+0x20>)
 800616e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006172:	6800      	ldr	r0, [r0, #0]
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	f000 f83f 	bl	80061f8 <_vfiprintf_r>
 800617a:	b002      	add	sp, #8
 800617c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006180:	b003      	add	sp, #12
 8006182:	4770      	bx	lr
 8006184:	20000028 	.word	0x20000028

08006188 <abort>:
 8006188:	b508      	push	{r3, lr}
 800618a:	2006      	movs	r0, #6
 800618c:	f000 fa08 	bl	80065a0 <raise>
 8006190:	2001      	movs	r0, #1
 8006192:	f7fb f99f 	bl	80014d4 <_exit>

08006196 <_malloc_usable_size_r>:
 8006196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619a:	1f18      	subs	r0, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	bfbc      	itt	lt
 80061a0:	580b      	ldrlt	r3, [r1, r0]
 80061a2:	18c0      	addlt	r0, r0, r3
 80061a4:	4770      	bx	lr

080061a6 <__sfputc_r>:
 80061a6:	6893      	ldr	r3, [r2, #8]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	b410      	push	{r4}
 80061ae:	6093      	str	r3, [r2, #8]
 80061b0:	da08      	bge.n	80061c4 <__sfputc_r+0x1e>
 80061b2:	6994      	ldr	r4, [r2, #24]
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	db01      	blt.n	80061bc <__sfputc_r+0x16>
 80061b8:	290a      	cmp	r1, #10
 80061ba:	d103      	bne.n	80061c4 <__sfputc_r+0x1e>
 80061bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061c0:	f000 b932 	b.w	8006428 <__swbuf_r>
 80061c4:	6813      	ldr	r3, [r2, #0]
 80061c6:	1c58      	adds	r0, r3, #1
 80061c8:	6010      	str	r0, [r2, #0]
 80061ca:	7019      	strb	r1, [r3, #0]
 80061cc:	4608      	mov	r0, r1
 80061ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <__sfputs_r>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	4606      	mov	r6, r0
 80061d8:	460f      	mov	r7, r1
 80061da:	4614      	mov	r4, r2
 80061dc:	18d5      	adds	r5, r2, r3
 80061de:	42ac      	cmp	r4, r5
 80061e0:	d101      	bne.n	80061e6 <__sfputs_r+0x12>
 80061e2:	2000      	movs	r0, #0
 80061e4:	e007      	b.n	80061f6 <__sfputs_r+0x22>
 80061e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ea:	463a      	mov	r2, r7
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7ff ffda 	bl	80061a6 <__sfputc_r>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	d1f3      	bne.n	80061de <__sfputs_r+0xa>
 80061f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061f8 <_vfiprintf_r>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	460d      	mov	r5, r1
 80061fe:	b09d      	sub	sp, #116	@ 0x74
 8006200:	4614      	mov	r4, r2
 8006202:	4698      	mov	r8, r3
 8006204:	4606      	mov	r6, r0
 8006206:	b118      	cbz	r0, 8006210 <_vfiprintf_r+0x18>
 8006208:	6a03      	ldr	r3, [r0, #32]
 800620a:	b90b      	cbnz	r3, 8006210 <_vfiprintf_r+0x18>
 800620c:	f7fe f906 	bl	800441c <__sinit>
 8006210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006212:	07d9      	lsls	r1, r3, #31
 8006214:	d405      	bmi.n	8006222 <_vfiprintf_r+0x2a>
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	059a      	lsls	r2, r3, #22
 800621a:	d402      	bmi.n	8006222 <_vfiprintf_r+0x2a>
 800621c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800621e:	f7fe fa14 	bl	800464a <__retarget_lock_acquire_recursive>
 8006222:	89ab      	ldrh	r3, [r5, #12]
 8006224:	071b      	lsls	r3, r3, #28
 8006226:	d501      	bpl.n	800622c <_vfiprintf_r+0x34>
 8006228:	692b      	ldr	r3, [r5, #16]
 800622a:	b99b      	cbnz	r3, 8006254 <_vfiprintf_r+0x5c>
 800622c:	4629      	mov	r1, r5
 800622e:	4630      	mov	r0, r6
 8006230:	f000 f938 	bl	80064a4 <__swsetup_r>
 8006234:	b170      	cbz	r0, 8006254 <_vfiprintf_r+0x5c>
 8006236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006238:	07dc      	lsls	r4, r3, #31
 800623a:	d504      	bpl.n	8006246 <_vfiprintf_r+0x4e>
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	b01d      	add	sp, #116	@ 0x74
 8006242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006246:	89ab      	ldrh	r3, [r5, #12]
 8006248:	0598      	lsls	r0, r3, #22
 800624a:	d4f7      	bmi.n	800623c <_vfiprintf_r+0x44>
 800624c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800624e:	f7fe f9fd 	bl	800464c <__retarget_lock_release_recursive>
 8006252:	e7f3      	b.n	800623c <_vfiprintf_r+0x44>
 8006254:	2300      	movs	r3, #0
 8006256:	9309      	str	r3, [sp, #36]	@ 0x24
 8006258:	2320      	movs	r3, #32
 800625a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800625e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006262:	2330      	movs	r3, #48	@ 0x30
 8006264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006414 <_vfiprintf_r+0x21c>
 8006268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800626c:	f04f 0901 	mov.w	r9, #1
 8006270:	4623      	mov	r3, r4
 8006272:	469a      	mov	sl, r3
 8006274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006278:	b10a      	cbz	r2, 800627e <_vfiprintf_r+0x86>
 800627a:	2a25      	cmp	r2, #37	@ 0x25
 800627c:	d1f9      	bne.n	8006272 <_vfiprintf_r+0x7a>
 800627e:	ebba 0b04 	subs.w	fp, sl, r4
 8006282:	d00b      	beq.n	800629c <_vfiprintf_r+0xa4>
 8006284:	465b      	mov	r3, fp
 8006286:	4622      	mov	r2, r4
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	f7ff ffa2 	bl	80061d4 <__sfputs_r>
 8006290:	3001      	adds	r0, #1
 8006292:	f000 80a7 	beq.w	80063e4 <_vfiprintf_r+0x1ec>
 8006296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006298:	445a      	add	r2, fp
 800629a:	9209      	str	r2, [sp, #36]	@ 0x24
 800629c:	f89a 3000 	ldrb.w	r3, [sl]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 809f 	beq.w	80063e4 <_vfiprintf_r+0x1ec>
 80062a6:	2300      	movs	r3, #0
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062b0:	f10a 0a01 	add.w	sl, sl, #1
 80062b4:	9304      	str	r3, [sp, #16]
 80062b6:	9307      	str	r3, [sp, #28]
 80062b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80062be:	4654      	mov	r4, sl
 80062c0:	2205      	movs	r2, #5
 80062c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c6:	4853      	ldr	r0, [pc, #332]	@ (8006414 <_vfiprintf_r+0x21c>)
 80062c8:	f7f9 ff82 	bl	80001d0 <memchr>
 80062cc:	9a04      	ldr	r2, [sp, #16]
 80062ce:	b9d8      	cbnz	r0, 8006308 <_vfiprintf_r+0x110>
 80062d0:	06d1      	lsls	r1, r2, #27
 80062d2:	bf44      	itt	mi
 80062d4:	2320      	movmi	r3, #32
 80062d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062da:	0713      	lsls	r3, r2, #28
 80062dc:	bf44      	itt	mi
 80062de:	232b      	movmi	r3, #43	@ 0x2b
 80062e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062e4:	f89a 3000 	ldrb.w	r3, [sl]
 80062e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80062ea:	d015      	beq.n	8006318 <_vfiprintf_r+0x120>
 80062ec:	9a07      	ldr	r2, [sp, #28]
 80062ee:	4654      	mov	r4, sl
 80062f0:	2000      	movs	r0, #0
 80062f2:	f04f 0c0a 	mov.w	ip, #10
 80062f6:	4621      	mov	r1, r4
 80062f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062fc:	3b30      	subs	r3, #48	@ 0x30
 80062fe:	2b09      	cmp	r3, #9
 8006300:	d94b      	bls.n	800639a <_vfiprintf_r+0x1a2>
 8006302:	b1b0      	cbz	r0, 8006332 <_vfiprintf_r+0x13a>
 8006304:	9207      	str	r2, [sp, #28]
 8006306:	e014      	b.n	8006332 <_vfiprintf_r+0x13a>
 8006308:	eba0 0308 	sub.w	r3, r0, r8
 800630c:	fa09 f303 	lsl.w	r3, r9, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	46a2      	mov	sl, r4
 8006316:	e7d2      	b.n	80062be <_vfiprintf_r+0xc6>
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	1d19      	adds	r1, r3, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	9103      	str	r1, [sp, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfbb      	ittet	lt
 8006324:	425b      	neglt	r3, r3
 8006326:	f042 0202 	orrlt.w	r2, r2, #2
 800632a:	9307      	strge	r3, [sp, #28]
 800632c:	9307      	strlt	r3, [sp, #28]
 800632e:	bfb8      	it	lt
 8006330:	9204      	strlt	r2, [sp, #16]
 8006332:	7823      	ldrb	r3, [r4, #0]
 8006334:	2b2e      	cmp	r3, #46	@ 0x2e
 8006336:	d10a      	bne.n	800634e <_vfiprintf_r+0x156>
 8006338:	7863      	ldrb	r3, [r4, #1]
 800633a:	2b2a      	cmp	r3, #42	@ 0x2a
 800633c:	d132      	bne.n	80063a4 <_vfiprintf_r+0x1ac>
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	1d1a      	adds	r2, r3, #4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	9203      	str	r2, [sp, #12]
 8006346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800634a:	3402      	adds	r4, #2
 800634c:	9305      	str	r3, [sp, #20]
 800634e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006424 <_vfiprintf_r+0x22c>
 8006352:	7821      	ldrb	r1, [r4, #0]
 8006354:	2203      	movs	r2, #3
 8006356:	4650      	mov	r0, sl
 8006358:	f7f9 ff3a 	bl	80001d0 <memchr>
 800635c:	b138      	cbz	r0, 800636e <_vfiprintf_r+0x176>
 800635e:	9b04      	ldr	r3, [sp, #16]
 8006360:	eba0 000a 	sub.w	r0, r0, sl
 8006364:	2240      	movs	r2, #64	@ 0x40
 8006366:	4082      	lsls	r2, r0
 8006368:	4313      	orrs	r3, r2
 800636a:	3401      	adds	r4, #1
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006372:	4829      	ldr	r0, [pc, #164]	@ (8006418 <_vfiprintf_r+0x220>)
 8006374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006378:	2206      	movs	r2, #6
 800637a:	f7f9 ff29 	bl	80001d0 <memchr>
 800637e:	2800      	cmp	r0, #0
 8006380:	d03f      	beq.n	8006402 <_vfiprintf_r+0x20a>
 8006382:	4b26      	ldr	r3, [pc, #152]	@ (800641c <_vfiprintf_r+0x224>)
 8006384:	bb1b      	cbnz	r3, 80063ce <_vfiprintf_r+0x1d6>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	3307      	adds	r3, #7
 800638a:	f023 0307 	bic.w	r3, r3, #7
 800638e:	3308      	adds	r3, #8
 8006390:	9303      	str	r3, [sp, #12]
 8006392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006394:	443b      	add	r3, r7
 8006396:	9309      	str	r3, [sp, #36]	@ 0x24
 8006398:	e76a      	b.n	8006270 <_vfiprintf_r+0x78>
 800639a:	fb0c 3202 	mla	r2, ip, r2, r3
 800639e:	460c      	mov	r4, r1
 80063a0:	2001      	movs	r0, #1
 80063a2:	e7a8      	b.n	80062f6 <_vfiprintf_r+0xfe>
 80063a4:	2300      	movs	r3, #0
 80063a6:	3401      	adds	r4, #1
 80063a8:	9305      	str	r3, [sp, #20]
 80063aa:	4619      	mov	r1, r3
 80063ac:	f04f 0c0a 	mov.w	ip, #10
 80063b0:	4620      	mov	r0, r4
 80063b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b6:	3a30      	subs	r2, #48	@ 0x30
 80063b8:	2a09      	cmp	r2, #9
 80063ba:	d903      	bls.n	80063c4 <_vfiprintf_r+0x1cc>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0c6      	beq.n	800634e <_vfiprintf_r+0x156>
 80063c0:	9105      	str	r1, [sp, #20]
 80063c2:	e7c4      	b.n	800634e <_vfiprintf_r+0x156>
 80063c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c8:	4604      	mov	r4, r0
 80063ca:	2301      	movs	r3, #1
 80063cc:	e7f0      	b.n	80063b0 <_vfiprintf_r+0x1b8>
 80063ce:	ab03      	add	r3, sp, #12
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	462a      	mov	r2, r5
 80063d4:	4b12      	ldr	r3, [pc, #72]	@ (8006420 <_vfiprintf_r+0x228>)
 80063d6:	a904      	add	r1, sp, #16
 80063d8:	4630      	mov	r0, r6
 80063da:	f7fd fbdb 	bl	8003b94 <_printf_float>
 80063de:	4607      	mov	r7, r0
 80063e0:	1c78      	adds	r0, r7, #1
 80063e2:	d1d6      	bne.n	8006392 <_vfiprintf_r+0x19a>
 80063e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063e6:	07d9      	lsls	r1, r3, #31
 80063e8:	d405      	bmi.n	80063f6 <_vfiprintf_r+0x1fe>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	059a      	lsls	r2, r3, #22
 80063ee:	d402      	bmi.n	80063f6 <_vfiprintf_r+0x1fe>
 80063f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063f2:	f7fe f92b 	bl	800464c <__retarget_lock_release_recursive>
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	065b      	lsls	r3, r3, #25
 80063fa:	f53f af1f 	bmi.w	800623c <_vfiprintf_r+0x44>
 80063fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006400:	e71e      	b.n	8006240 <_vfiprintf_r+0x48>
 8006402:	ab03      	add	r3, sp, #12
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	462a      	mov	r2, r5
 8006408:	4b05      	ldr	r3, [pc, #20]	@ (8006420 <_vfiprintf_r+0x228>)
 800640a:	a904      	add	r1, sp, #16
 800640c:	4630      	mov	r0, r6
 800640e:	f7fd fe59 	bl	80040c4 <_printf_i>
 8006412:	e7e4      	b.n	80063de <_vfiprintf_r+0x1e6>
 8006414:	08006958 	.word	0x08006958
 8006418:	08006962 	.word	0x08006962
 800641c:	08003b95 	.word	0x08003b95
 8006420:	080061d5 	.word	0x080061d5
 8006424:	0800695e 	.word	0x0800695e

08006428 <__swbuf_r>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	460e      	mov	r6, r1
 800642c:	4614      	mov	r4, r2
 800642e:	4605      	mov	r5, r0
 8006430:	b118      	cbz	r0, 800643a <__swbuf_r+0x12>
 8006432:	6a03      	ldr	r3, [r0, #32]
 8006434:	b90b      	cbnz	r3, 800643a <__swbuf_r+0x12>
 8006436:	f7fd fff1 	bl	800441c <__sinit>
 800643a:	69a3      	ldr	r3, [r4, #24]
 800643c:	60a3      	str	r3, [r4, #8]
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	071a      	lsls	r2, r3, #28
 8006442:	d501      	bpl.n	8006448 <__swbuf_r+0x20>
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	b943      	cbnz	r3, 800645a <__swbuf_r+0x32>
 8006448:	4621      	mov	r1, r4
 800644a:	4628      	mov	r0, r5
 800644c:	f000 f82a 	bl	80064a4 <__swsetup_r>
 8006450:	b118      	cbz	r0, 800645a <__swbuf_r+0x32>
 8006452:	f04f 37ff 	mov.w	r7, #4294967295
 8006456:	4638      	mov	r0, r7
 8006458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	6922      	ldr	r2, [r4, #16]
 800645e:	1a98      	subs	r0, r3, r2
 8006460:	6963      	ldr	r3, [r4, #20]
 8006462:	b2f6      	uxtb	r6, r6
 8006464:	4283      	cmp	r3, r0
 8006466:	4637      	mov	r7, r6
 8006468:	dc05      	bgt.n	8006476 <__swbuf_r+0x4e>
 800646a:	4621      	mov	r1, r4
 800646c:	4628      	mov	r0, r5
 800646e:	f7ff fd99 	bl	8005fa4 <_fflush_r>
 8006472:	2800      	cmp	r0, #0
 8006474:	d1ed      	bne.n	8006452 <__swbuf_r+0x2a>
 8006476:	68a3      	ldr	r3, [r4, #8]
 8006478:	3b01      	subs	r3, #1
 800647a:	60a3      	str	r3, [r4, #8]
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	6022      	str	r2, [r4, #0]
 8006482:	701e      	strb	r6, [r3, #0]
 8006484:	6962      	ldr	r2, [r4, #20]
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	429a      	cmp	r2, r3
 800648a:	d004      	beq.n	8006496 <__swbuf_r+0x6e>
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	07db      	lsls	r3, r3, #31
 8006490:	d5e1      	bpl.n	8006456 <__swbuf_r+0x2e>
 8006492:	2e0a      	cmp	r6, #10
 8006494:	d1df      	bne.n	8006456 <__swbuf_r+0x2e>
 8006496:	4621      	mov	r1, r4
 8006498:	4628      	mov	r0, r5
 800649a:	f7ff fd83 	bl	8005fa4 <_fflush_r>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d0d9      	beq.n	8006456 <__swbuf_r+0x2e>
 80064a2:	e7d6      	b.n	8006452 <__swbuf_r+0x2a>

080064a4 <__swsetup_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4b29      	ldr	r3, [pc, #164]	@ (800654c <__swsetup_r+0xa8>)
 80064a8:	4605      	mov	r5, r0
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	460c      	mov	r4, r1
 80064ae:	b118      	cbz	r0, 80064b8 <__swsetup_r+0x14>
 80064b0:	6a03      	ldr	r3, [r0, #32]
 80064b2:	b90b      	cbnz	r3, 80064b8 <__swsetup_r+0x14>
 80064b4:	f7fd ffb2 	bl	800441c <__sinit>
 80064b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064bc:	0719      	lsls	r1, r3, #28
 80064be:	d422      	bmi.n	8006506 <__swsetup_r+0x62>
 80064c0:	06da      	lsls	r2, r3, #27
 80064c2:	d407      	bmi.n	80064d4 <__swsetup_r+0x30>
 80064c4:	2209      	movs	r2, #9
 80064c6:	602a      	str	r2, [r5, #0]
 80064c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064cc:	81a3      	strh	r3, [r4, #12]
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	e033      	b.n	800653c <__swsetup_r+0x98>
 80064d4:	0758      	lsls	r0, r3, #29
 80064d6:	d512      	bpl.n	80064fe <__swsetup_r+0x5a>
 80064d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064da:	b141      	cbz	r1, 80064ee <__swsetup_r+0x4a>
 80064dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064e0:	4299      	cmp	r1, r3
 80064e2:	d002      	beq.n	80064ea <__swsetup_r+0x46>
 80064e4:	4628      	mov	r0, r5
 80064e6:	f7fe feff 	bl	80052e8 <_free_r>
 80064ea:	2300      	movs	r3, #0
 80064ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	2300      	movs	r3, #0
 80064f8:	6063      	str	r3, [r4, #4]
 80064fa:	6923      	ldr	r3, [r4, #16]
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f043 0308 	orr.w	r3, r3, #8
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	b94b      	cbnz	r3, 800651e <__swsetup_r+0x7a>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006514:	d003      	beq.n	800651e <__swsetup_r+0x7a>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f883 	bl	8006624 <__smakebuf_r>
 800651e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006522:	f013 0201 	ands.w	r2, r3, #1
 8006526:	d00a      	beq.n	800653e <__swsetup_r+0x9a>
 8006528:	2200      	movs	r2, #0
 800652a:	60a2      	str	r2, [r4, #8]
 800652c:	6962      	ldr	r2, [r4, #20]
 800652e:	4252      	negs	r2, r2
 8006530:	61a2      	str	r2, [r4, #24]
 8006532:	6922      	ldr	r2, [r4, #16]
 8006534:	b942      	cbnz	r2, 8006548 <__swsetup_r+0xa4>
 8006536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800653a:	d1c5      	bne.n	80064c8 <__swsetup_r+0x24>
 800653c:	bd38      	pop	{r3, r4, r5, pc}
 800653e:	0799      	lsls	r1, r3, #30
 8006540:	bf58      	it	pl
 8006542:	6962      	ldrpl	r2, [r4, #20]
 8006544:	60a2      	str	r2, [r4, #8]
 8006546:	e7f4      	b.n	8006532 <__swsetup_r+0x8e>
 8006548:	2000      	movs	r0, #0
 800654a:	e7f7      	b.n	800653c <__swsetup_r+0x98>
 800654c:	20000028 	.word	0x20000028

08006550 <_raise_r>:
 8006550:	291f      	cmp	r1, #31
 8006552:	b538      	push	{r3, r4, r5, lr}
 8006554:	4605      	mov	r5, r0
 8006556:	460c      	mov	r4, r1
 8006558:	d904      	bls.n	8006564 <_raise_r+0x14>
 800655a:	2316      	movs	r3, #22
 800655c:	6003      	str	r3, [r0, #0]
 800655e:	f04f 30ff 	mov.w	r0, #4294967295
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006566:	b112      	cbz	r2, 800656e <_raise_r+0x1e>
 8006568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800656c:	b94b      	cbnz	r3, 8006582 <_raise_r+0x32>
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f830 	bl	80065d4 <_getpid_r>
 8006574:	4622      	mov	r2, r4
 8006576:	4601      	mov	r1, r0
 8006578:	4628      	mov	r0, r5
 800657a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800657e:	f000 b817 	b.w	80065b0 <_kill_r>
 8006582:	2b01      	cmp	r3, #1
 8006584:	d00a      	beq.n	800659c <_raise_r+0x4c>
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	d103      	bne.n	8006592 <_raise_r+0x42>
 800658a:	2316      	movs	r3, #22
 800658c:	6003      	str	r3, [r0, #0]
 800658e:	2001      	movs	r0, #1
 8006590:	e7e7      	b.n	8006562 <_raise_r+0x12>
 8006592:	2100      	movs	r1, #0
 8006594:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006598:	4620      	mov	r0, r4
 800659a:	4798      	blx	r3
 800659c:	2000      	movs	r0, #0
 800659e:	e7e0      	b.n	8006562 <_raise_r+0x12>

080065a0 <raise>:
 80065a0:	4b02      	ldr	r3, [pc, #8]	@ (80065ac <raise+0xc>)
 80065a2:	4601      	mov	r1, r0
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	f7ff bfd3 	b.w	8006550 <_raise_r>
 80065aa:	bf00      	nop
 80065ac:	20000028 	.word	0x20000028

080065b0 <_kill_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d07      	ldr	r5, [pc, #28]	@ (80065d0 <_kill_r+0x20>)
 80065b4:	2300      	movs	r3, #0
 80065b6:	4604      	mov	r4, r0
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	602b      	str	r3, [r5, #0]
 80065be:	f7fa ff79 	bl	80014b4 <_kill>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	d102      	bne.n	80065cc <_kill_r+0x1c>
 80065c6:	682b      	ldr	r3, [r5, #0]
 80065c8:	b103      	cbz	r3, 80065cc <_kill_r+0x1c>
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	bd38      	pop	{r3, r4, r5, pc}
 80065ce:	bf00      	nop
 80065d0:	200003f8 	.word	0x200003f8

080065d4 <_getpid_r>:
 80065d4:	f7fa bf66 	b.w	80014a4 <_getpid>

080065d8 <__swhatbuf_r>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	460c      	mov	r4, r1
 80065dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e0:	2900      	cmp	r1, #0
 80065e2:	b096      	sub	sp, #88	@ 0x58
 80065e4:	4615      	mov	r5, r2
 80065e6:	461e      	mov	r6, r3
 80065e8:	da0d      	bge.n	8006606 <__swhatbuf_r+0x2e>
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065f0:	f04f 0100 	mov.w	r1, #0
 80065f4:	bf14      	ite	ne
 80065f6:	2340      	movne	r3, #64	@ 0x40
 80065f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065fc:	2000      	movs	r0, #0
 80065fe:	6031      	str	r1, [r6, #0]
 8006600:	602b      	str	r3, [r5, #0]
 8006602:	b016      	add	sp, #88	@ 0x58
 8006604:	bd70      	pop	{r4, r5, r6, pc}
 8006606:	466a      	mov	r2, sp
 8006608:	f000 f848 	bl	800669c <_fstat_r>
 800660c:	2800      	cmp	r0, #0
 800660e:	dbec      	blt.n	80065ea <__swhatbuf_r+0x12>
 8006610:	9901      	ldr	r1, [sp, #4]
 8006612:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006616:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800661a:	4259      	negs	r1, r3
 800661c:	4159      	adcs	r1, r3
 800661e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006622:	e7eb      	b.n	80065fc <__swhatbuf_r+0x24>

08006624 <__smakebuf_r>:
 8006624:	898b      	ldrh	r3, [r1, #12]
 8006626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006628:	079d      	lsls	r5, r3, #30
 800662a:	4606      	mov	r6, r0
 800662c:	460c      	mov	r4, r1
 800662e:	d507      	bpl.n	8006640 <__smakebuf_r+0x1c>
 8006630:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	6123      	str	r3, [r4, #16]
 8006638:	2301      	movs	r3, #1
 800663a:	6163      	str	r3, [r4, #20]
 800663c:	b003      	add	sp, #12
 800663e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006640:	ab01      	add	r3, sp, #4
 8006642:	466a      	mov	r2, sp
 8006644:	f7ff ffc8 	bl	80065d8 <__swhatbuf_r>
 8006648:	9f00      	ldr	r7, [sp, #0]
 800664a:	4605      	mov	r5, r0
 800664c:	4639      	mov	r1, r7
 800664e:	4630      	mov	r0, r6
 8006650:	f7fe febe 	bl	80053d0 <_malloc_r>
 8006654:	b948      	cbnz	r0, 800666a <__smakebuf_r+0x46>
 8006656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800665a:	059a      	lsls	r2, r3, #22
 800665c:	d4ee      	bmi.n	800663c <__smakebuf_r+0x18>
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	f043 0302 	orr.w	r3, r3, #2
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	e7e2      	b.n	8006630 <__smakebuf_r+0xc>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	6020      	str	r0, [r4, #0]
 800666e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	9b01      	ldr	r3, [sp, #4]
 8006676:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800667a:	b15b      	cbz	r3, 8006694 <__smakebuf_r+0x70>
 800667c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006680:	4630      	mov	r0, r6
 8006682:	f000 f81d 	bl	80066c0 <_isatty_r>
 8006686:	b128      	cbz	r0, 8006694 <__smakebuf_r+0x70>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	f043 0301 	orr.w	r3, r3, #1
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	431d      	orrs	r5, r3
 8006698:	81a5      	strh	r5, [r4, #12]
 800669a:	e7cf      	b.n	800663c <__smakebuf_r+0x18>

0800669c <_fstat_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d07      	ldr	r5, [pc, #28]	@ (80066bc <_fstat_r+0x20>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	f7fa ff63 	bl	8001574 <_fstat>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	d102      	bne.n	80066b8 <_fstat_r+0x1c>
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	b103      	cbz	r3, 80066b8 <_fstat_r+0x1c>
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	bf00      	nop
 80066bc:	200003f8 	.word	0x200003f8

080066c0 <_isatty_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4d06      	ldr	r5, [pc, #24]	@ (80066dc <_isatty_r+0x1c>)
 80066c4:	2300      	movs	r3, #0
 80066c6:	4604      	mov	r4, r0
 80066c8:	4608      	mov	r0, r1
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	f7fa ff62 	bl	8001594 <_isatty>
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	d102      	bne.n	80066da <_isatty_r+0x1a>
 80066d4:	682b      	ldr	r3, [r5, #0]
 80066d6:	b103      	cbz	r3, 80066da <_isatty_r+0x1a>
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	200003f8 	.word	0x200003f8

080066e0 <_init>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr

080066ec <_fini>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr
