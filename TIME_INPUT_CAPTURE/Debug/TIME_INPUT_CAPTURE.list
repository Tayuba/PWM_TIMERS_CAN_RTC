
TIME_INPUT_CAPTURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080065c0  080065c0  000075c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006978  08006978  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006978  08006978  00007978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006980  08006980  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006980  08006980  00007980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006984  08006984  00007984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006988  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          00000224  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003f8  200003f8  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c926  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bca  00000000  00000000  00014b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  000166f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000961  00000000  00000000  000172f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bbc  00000000  00000000  00017c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de3c  00000000  00000000  00039815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccb9c  00000000  00000000  00047651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001141ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043f4  00000000  00000000  00114230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00118624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065a8 	.word	0x080065a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080065a8 	.word	0x080065a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:

uint32_t input_capture[2] = {0};
uint8_t count = 0;


int main(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0a4      	sub	sp, #144	@ 0x90
 8000e9c:	af00      	add	r7, sp, #0

	uint32_t capture_difference = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	double timer2_cnt_freq = 0;
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double timer2_cnt_res  = 0;
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	double user_signal_time_period  = 0;
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	double user_signal_freq  = 0;
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	char user_msg[100];

 	HAL_Init();
 8000ed4:	f000 fb90 	bl	80015f8 <HAL_Init>

 	SystemClock_Config_HSE(HCLK_50MHZ);
 8000ed8:	2032      	movs	r0, #50	@ 0x32
 8000eda:	f000 f87d 	bl	8000fd8 <SystemClock_Config_HSE>

 	GPIO_Init();
 8000ede:	f000 f97d 	bl	80011dc <GPIO_Init>

 	UART2_Init();
 8000ee2:	f000 f9a5 	bl	8001230 <UART2_Init>

 	Timer2_Init();
 8000ee6:	f000 f947 	bl	8001178 <Timer2_Init>

 	LSE_Configuration();
 8000eea:	f000 f905 	bl	80010f8 <LSE_Configuration>



 	// Start timer Interrupt
 	HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_1);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4833      	ldr	r0, [pc, #204]	@ (8000fc0 <main+0x128>)
 8000ef2:	f001 fc1b 	bl	800272c <HAL_TIM_IC_Start_IT>

 	while(1){
 		if (capture_done) {
 8000ef6:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <main+0x12c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0fb      	beq.n	8000ef6 <main+0x5e>
 			if (input_capture[1] > input_capture[0]) {
 8000efe:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <main+0x130>)
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <main+0x130>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d907      	bls.n	8000f1a <main+0x82>
 				capture_difference = input_capture[1] - input_capture[0];
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <main+0x130>)
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <main+0x130>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f18:	e007      	b.n	8000f2a <main+0x92>
			}
 			else {
 				capture_difference = (0xFFFFFFFF - input_capture[0]) - input_capture[1];
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <main+0x130>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <main+0x130>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			}
 			timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2) / htimer2.Init.Prescaler + 1;
 8000f2a:	f001 fb87 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	005a      	lsls	r2, r3, #1
 8000f32:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <main+0x128>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fae1 	bl	8000504 <__aeabi_ui2d>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 			timer2_cnt_res = 1 / timer2_cnt_freq;
 8000f4a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000f4e:	f04f 0000 	mov.w	r0, #0
 8000f52:	491e      	ldr	r1, [pc, #120]	@ (8000fcc <main+0x134>)
 8000f54:	f7ff fc7a 	bl	800084c <__aeabi_ddiv>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 			user_signal_time_period = capture_difference * timer2_cnt_res;
 8000f60:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000f64:	f7ff face 	bl	8000504 <__aeabi_ui2d>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000f70:	f7ff fb42 	bl	80005f8 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 			user_signal_freq = 1 / user_signal_time_period;
 8000f7c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000f80:	f04f 0000 	mov.w	r0, #0
 8000f84:	4911      	ldr	r1, [pc, #68]	@ (8000fcc <main+0x134>)
 8000f86:	f7ff fc61 	bl	800084c <__aeabi_ddiv>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

 			sprintf(user_msg, "Frequency of the signal applied = %f Hz\r\n", user_signal_freq);
 8000f92:	1d38      	adds	r0, r7, #4
 8000f94:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000f98:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <main+0x138>)
 8000f9a:	f003 f9d7 	bl	800434c <siprintf>
 			HAL_UART_Transmit(&huart2, (uint8_t*)user_msg, strlen(user_msg), HAL_MAX_DELAY);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f965 	bl	8000270 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	1d39      	adds	r1, r7, #4
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <main+0x13c>)
 8000fb2:	f002 f8f6 	bl	80031a2 <HAL_UART_Transmit>

 			capture_done = FALSE;
 8000fb6:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <main+0x12c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
 		if (capture_done) {
 8000fbc:	e79b      	b.n	8000ef6 <main+0x5e>
 8000fbe:	bf00      	nop
 8000fc0:	200001f4 	.word	0x200001f4
 8000fc4:	200001f0 	.word	0x200001f0
 8000fc8:	20000298 	.word	0x20000298
 8000fcc:	3ff00000 	.word	0x3ff00000
 8000fd0:	080065c0 	.word	0x080065c0
 8000fd4:	2000023c 	.word	0x2000023c

08000fd8 <SystemClock_Config_HSE>:
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}

void SystemClock_Config_HSE(uint8_t freq){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	@ 0x50
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	uint8_t FLatency = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	// Variable to configure RCC System, AHB and APB busses
	RCC_ClkInitTypeDef clk_init;


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE; // Clock source selected
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_BYPASS; // HSI is ON by default, you can ignore this step
 8000fec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ff0:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON; // Turn PLL ON
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	637b      	str	r3, [r7, #52]	@ 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE; // PLL Clock source
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38

	switch(freq){
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b78      	cmp	r3, #120	@ 0x78
 8001000:	d036      	beq.n	8001070 <SystemClock_Config_HSE+0x98>
 8001002:	2b78      	cmp	r3, #120	@ 0x78
 8001004:	dc71      	bgt.n	80010ea <SystemClock_Config_HSE+0x112>
 8001006:	2b32      	cmp	r3, #50	@ 0x32
 8001008:	d002      	beq.n	8001010 <SystemClock_Config_HSE+0x38>
 800100a:	2b54      	cmp	r3, #84	@ 0x54
 800100c:	d018      	beq.n	8001040 <SystemClock_Config_HSE+0x68>

			FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:{
			return;
 800100e:	e06c      	b.n	80010ea <SystemClock_Config_HSE+0x112>
			osc_init.PLL.PLLM = 8;
 8001010:	2308      	movs	r3, #8
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 100;
 8001014:	2364      	movs	r3, #100	@ 0x64
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLP = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLQ = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	@ 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001020:	230f      	movs	r3, #15
 8001022:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2302      	movs	r3, #2
 8001026:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800102c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001030:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001036:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_1WS;
 8001038:	2301      	movs	r3, #1
 800103a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 800103e:	e02f      	b.n	80010a0 <SystemClock_Config_HSE+0xc8>
			osc_init.PLL.PLLM = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 168;
 8001044:	23a8      	movs	r3, #168	@ 0xa8
 8001046:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLP = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLQ = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	@ 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001050:	230f      	movs	r3, #15
 8001052:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2302      	movs	r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800105c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001060:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001066:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_2WS;
 8001068:	2302      	movs	r3, #2
 800106a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 800106e:	e017      	b.n	80010a0 <SystemClock_Config_HSE+0xc8>
			osc_init.PLL.PLLM = 8;
 8001070:	2308      	movs	r3, #8
 8001072:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 240;
 8001074:	23f0      	movs	r3, #240	@ 0xf0
 8001076:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLP = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLQ = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	64bb      	str	r3, [r7, #72]	@ 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001080:	230f      	movs	r3, #15
 8001082:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2302      	movs	r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800108c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001090:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_3WS;
 8001098:	2303      	movs	r3, #3
 800109a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 800109e:	bf00      	nop
		}
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fdf1 	bl	8001c8c <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config_HSE+0xdc>
		Error_handler();
 80010b0:	f000 f8e4 	bl	800127c <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 80010b4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f85c 	bl	800217c <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config_HSE+0xf6>
		Error_handler();
 80010ca:	f000 f8d7 	bl	800127c <Error_handler>
	}

	// Systick Configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010ce:	f001 faa9 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <SystemClock_Config_HSE+0x11c>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	099b      	lsrs	r3, r3, #6
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fc02 	bl	80018e6 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010e2:	2004      	movs	r0, #4
 80010e4:	f000 fc0c 	bl	8001900 <HAL_SYSTICK_CLKSourceConfig>
 80010e8:	e000      	b.n	80010ec <SystemClock_Config_HSE+0x114>
			return;
 80010ea:	bf00      	nop

}
 80010ec:	3750      	adds	r7, #80	@ 0x50
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	10624dd3 	.word	0x10624dd3

080010f8 <LSE_Configuration>:


void LSE_Configuration(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_handler();
	}

#endif
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_4);
 80010fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001100:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001104:	2000      	movs	r0, #0
 8001106:	f001 f91f 	bl	8002348 <HAL_RCC_MCOConfig>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    if (!capture_done) {
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d11e      	bne.n	800115e <HAL_TIM_IC_CaptureCallback+0x4e>
        if (count == 0) {
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10b      	bne.n	8001140 <HAL_TIM_IC_CaptureCallback+0x30>
            input_capture[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112e:	4a11      	ldr	r2, [pc, #68]	@ (8001174 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001130:	6013      	str	r3, [r2, #0]
            count++;
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 800113c:	701a      	strb	r2, [r3, #0]
            input_capture[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
            count = 0;
            capture_done = TRUE;
        }
    }
}
 800113e:	e00e      	b.n	800115e <HAL_TIM_IC_CaptureCallback+0x4e>
        } else if (count == 1) {
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d10a      	bne.n	800115e <HAL_TIM_IC_CaptureCallback+0x4e>
            input_capture[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001150:	6053      	str	r3, [r2, #4]
            count = 0;
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
            capture_done = TRUE;
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200001f0 	.word	0x200001f0
 8001170:	200002a0 	.word	0x200002a0
 8001174:	20000298 	.word	0x20000298

08001178 <Timer2_Init>:


void Timer2_Init(void){
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
/********************* a) INITIALIZE HIGH LEVEL INITS FOR TIMER2 PERIPHERAL AND CHANNEL CONFIGURATION, PARAMETER INITIALIZATION *******************/
	TIM_IC_InitTypeDef timer2_Config;

	htimer2.Instance = TIM2;
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <Timer2_Init+0x60>)
 8001180:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001184:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <Timer2_Init+0x60>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
	htimer2.Init.Prescaler = 1;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <Timer2_Init+0x60>)
 800118e:	2201      	movs	r2, #1
 8001190:	605a      	str	r2, [r3, #4]
	htimer2.Init.Period = 0xFFFFFFFF; // 32-bit
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <Timer2_Init+0x60>)
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_IC_Init(&htimer2) != HAL_OK){
 800119a:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <Timer2_Init+0x60>)
 800119c:	f001 fa76 	bl	800268c <HAL_TIM_IC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <Timer2_Init+0x32>
		Error_handler();
 80011a6:	f000 f869 	bl	800127c <Error_handler>
	}

	timer2_Config.ICFilter = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
	timer2_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
	timer2_Config.ICPrescaler = TIM_ICPSC_DIV8;
 80011b2:	230c      	movs	r3, #12
 80011b4:	60bb      	str	r3, [r7, #8]
	timer2_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b6:	2301      	movs	r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
	if(HAL_TIM_IC_ConfigChannel(&htimer2, &timer2_Config, TIM_CHANNEL_1) != HAL_OK){
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <Timer2_Init+0x60>)
 80011c2:	f001 fccb 	bl	8002b5c <HAL_TIM_IC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <Timer2_Init+0x58>
		Error_handler();
 80011cc:	f000 f856 	bl	800127c <Error_handler>
	}

}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001f4 	.word	0x200001f4

080011dc <GPIO_Init>:


void GPIO_Init(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <GPIO_Init+0x48>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <GPIO_Init+0x48>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <GPIO_Init+0x48>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
	led.Pin = GPIO_PIN_12;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <GPIO_Init+0x4c>)
 8001200:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001204:	601a      	str	r2, [r3, #0]
	led.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <GPIO_Init+0x4c>)
 8001208:	2201      	movs	r2, #1
 800120a:	605a      	str	r2, [r3, #4]
	led.Pull = GPIO_NOPULL;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <GPIO_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &led);
 8001212:	4905      	ldr	r1, [pc, #20]	@ (8001228 <GPIO_Init+0x4c>)
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <GPIO_Init+0x50>)
 8001216:	f000 fb9d 	bl	8001954 <HAL_GPIO_Init>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	20000284 	.word	0x20000284
 800122c:	40020c00 	.word	0x40020c00

08001230 <UART2_Init>:

void UART2_Init(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
/********************* a) INITIALIZE HIGH LEVEL INITS FOR USART2 PERIPHERAL, PARAMETER INITIALIZATION *******************/
	// Handle variable linked with USART2
	huart2.Instance = USART2;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <UART2_Init+0x44>)
 8001236:	4a10      	ldr	r2, [pc, #64]	@ (8001278 <UART2_Init+0x48>)
 8001238:	601a      	str	r2, [r3, #0]

	//Parameter Initialization
	huart2.Init.BaudRate = 115200;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <UART2_Init+0x44>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <UART2_Init+0x44>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <UART2_Init+0x44>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <UART2_Init+0x44>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl =  UART_HWCONTROL_NONE;
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <UART2_Init+0x44>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <UART2_Init+0x44>)
 800125c:	220c      	movs	r2, #12
 800125e:	615a      	str	r2, [r3, #20]

	//Initialize UART with HAL API
	if(HAL_UART_Init(&huart2) != HAL_OK){
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <UART2_Init+0x44>)
 8001262:	f001 ff4e 	bl	8003102 <HAL_UART_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <UART2_Init+0x40>
		// Something went wrong!
		Error_handler();
 800126c:	f000 f806 	bl	800127c <Error_handler>
	}
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000023c 	.word	0x2000023c
 8001278:	40004400 	.word	0x40004400

0800127c <Error_handler>:


void Error_handler(void){
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	while(1);
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <Error_handler+0x4>

08001284 <SysTick_Handler>:

#include "interrupt.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001288:	f000 fa08 	bl	800169c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800128c:	f000 fb54 	bl	8001938 <HAL_SYSTICK_IRQHandler>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	// First call Interrupt Processing API
	HAL_TIM_IRQHandler(&htimer2);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <TIM2_IRQHandler+0x10>)
 800129a:	f001 fb6f 	bl	800297c <HAL_TIM_IRQHandler>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200001f4 	.word	0x200001f4

080012a8 <HAL_MspInit>:

#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_uart.h"


void HAL_MspInit(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
   * 1. Setup grouping of ARM-CORTEX Mx Processor
   * 2. Enable required system exceptions of the ARM-CORTEX Mx Processor
   * 3.	Configure priority for system exceptions*/

	// 1. Setup grouping
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 fae5 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable required system exceptions
	SCB->SHCSR |= 0x7 << 16; // usage fault, memory fault and bus fault
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_MspInit+0x40>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <HAL_MspInit+0x40>)
 80012b8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80012bc:	6253      	str	r3, [r2, #36]	@ 0x24

	// 3. Configure priority for system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	f06f 000b 	mvn.w	r0, #11
 80012c6:	f000 fae4 	bl	8001892 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	f06f 000a 	mvn.w	r0, #10
 80012d2:	f000 fade 	bl	8001892 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	f06f 0009 	mvn.w	r0, #9
 80012de:	f000 fad8 	bl	8001892 <HAL_NVIC_SetPriority>

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	   * 1. Enable Timer2 Clock
	   * 2. Configuring a GPIO to behave as Timer2 Channel 1
	   * 3.	NVIC Settings*/
	GPIO_InitTypeDef timer2_Channel1;
	// 1. Enable Timer2 Clock
	__HAL_RCC_TIM2_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <HAL_TIM_IC_MspInit+0x70>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	4a17      	ldr	r2, [pc, #92]	@ (800135c <HAL_TIM_IC_MspInit+0x70>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6413      	str	r3, [r2, #64]	@ 0x40
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_TIM_IC_MspInit+0x70>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <HAL_TIM_IC_MspInit+0x70>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	4a10      	ldr	r2, [pc, #64]	@ (800135c <HAL_TIM_IC_MspInit+0x70>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_TIM_IC_MspInit+0x70>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]

	// 2. ALternate function configuration: By configuring a GPIO to behave as Timer2 Channel 1

	timer2_Channel1.Pin = GPIO_PIN_0;
 800132c:	2301      	movs	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
	timer2_Channel1.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
	timer2_Channel1.Alternate = GPIO_AF1_TIM2;
 8001334:	2301      	movs	r3, #1
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &timer2_Channel1);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4808      	ldr	r0, [pc, #32]	@ (8001360 <HAL_TIM_IC_MspInit+0x74>)
 8001340:	f000 fb08 	bl	8001954 <HAL_GPIO_Init>

	// NVIC Settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	210f      	movs	r1, #15
 8001348:	201c      	movs	r0, #28
 800134a:	f000 faa2 	bl	8001892 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800134e:	201c      	movs	r0, #28
 8001350:	f000 fabb 	bl	80018ca <HAL_NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	@ 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000

08001364 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	@ 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	 * 1. Enable USART2 Peripheral clock
	 * 2. Do Pin Muxing Configuration
	 * 3. Enable IRQ and setup interrupt (NVIC Settings)*/

	// 1. Enable USART2 and GPIOA Peripheral clock
	__HAL_RCC_USART2_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <HAL_UART_MspInit+0x88>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	4a1d      	ldr	r2, [pc, #116]	@ (80013ec <HAL_UART_MspInit+0x88>)
 8001376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137a:	6413      	str	r3, [r2, #64]	@ 0x40
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <HAL_UART_MspInit+0x88>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <HAL_UART_MspInit+0x88>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001390:	4a16      	ldr	r2, [pc, #88]	@ (80013ec <HAL_UART_MspInit+0x88>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6313      	str	r3, [r2, #48]	@ 0x30
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_UART_MspInit+0x88>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

	// 2. Pin Muxing Configuration
	gpio_uart.Pin = GPIO_PIN_2; // UART2 Tx
 80013a4:	2304      	movs	r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80013b4:	2307      	movs	r3, #7
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <HAL_UART_MspInit+0x8c>)
 80013c0:	f000 fac8 	bl	8001954 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; // UART2 Rx
 80013c4:	2308      	movs	r3, #8
 80013c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4808      	ldr	r0, [pc, #32]	@ (80013f0 <HAL_UART_MspInit+0x8c>)
 80013d0:	f000 fac0 	bl	8001954 <HAL_GPIO_Init>

	// 3. Enable IRQ and setup interrupt (NVIC Settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d4:	2026      	movs	r0, #38	@ 0x26
 80013d6:	f000 fa78 	bl	80018ca <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	210f      	movs	r1, #15
 80013de:	2026      	movs	r0, #38	@ 0x26
 80013e0:	f000 fa57 	bl	8001892 <HAL_NVIC_SetPriority>

}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	@ 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000

080013f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return 1;
 80013f8:	2301      	movs	r3, #1
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_kill>:

int _kill(int pid, int sig)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800140e:	f003 f853 	bl	80044b8 <__errno>
 8001412:	4603      	mov	r3, r0
 8001414:	2216      	movs	r2, #22
 8001416:	601a      	str	r2, [r3, #0]
  return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_exit>:

void _exit (int status)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ffe7 	bl	8001404 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001436:	bf00      	nop
 8001438:	e7fd      	b.n	8001436 <_exit+0x12>

0800143a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e00a      	b.n	8001462 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800144c:	f3af 8000 	nop.w
 8001450:	4601      	mov	r1, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	60ba      	str	r2, [r7, #8]
 8001458:	b2ca      	uxtb	r2, r1
 800145a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3301      	adds	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	429a      	cmp	r2, r3
 8001468:	dbf0      	blt.n	800144c <_read+0x12>
  }

  return len;
 800146a:	687b      	ldr	r3, [r7, #4]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e009      	b.n	800149a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	60ba      	str	r2, [r7, #8]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	dbf1      	blt.n	8001486 <_write+0x12>
  }
  return len;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_close>:

int _close(int file)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014d4:	605a      	str	r2, [r3, #4]
  return 0;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_isatty>:

int _isatty(int file)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	@ (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	@ (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f002 ffb8 	bl	80044b8 <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20020000 	.word	0x20020000
 8001574:	00000400 	.word	0x00000400
 8001578:	200002a4 	.word	0x200002a4
 800157c:	200003f8 	.word	0x200003f8

08001580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015a8:	f7ff ffea 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ac:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ae:	490d      	ldr	r1, [pc, #52]	@ (80015e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c4:	4c0a      	ldr	r4, [pc, #40]	@ (80015f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d2:	f002 ff77 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d6:	f7ff fc5f 	bl	8000e98 <main>
  bx  lr    
 80015da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015e8:	08006988 	.word	0x08006988
  ldr r2, =_sbss
 80015ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015f0:	200003f8 	.word	0x200003f8

080015f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_Init+0x40>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <HAL_Init+0x40>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	@ (8001638 <HAL_Init+0x40>)
 800161a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f92b 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fe3c 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f943 	bl	80018e6 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f90b 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	@ (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000000 	.word	0x20000000
 8001694:	20000008 	.word	0x20000008
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008
 80016c0:	200002a8 	.word	0x200002a8

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200002a8 	.word	0x200002a8

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	@ (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	@ (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	@ 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b04      	cmp	r3, #4
 800190c:	d106      	bne.n	800191c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a08      	ldr	r2, [pc, #32]	@ (8001934 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800191a:	e005      	b.n	8001928 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001922:	f023 0304 	bic.w	r3, r3, #4
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800193c:	f000 f802 	bl	8001944 <HAL_SYSTICK_Callback>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	@ 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e16b      	b.n	8001c48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 815a 	bne.w	8001c42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d005      	beq.n	80019a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d130      	bne.n	8001a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 0201 	and.w	r2, r3, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d017      	beq.n	8001a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d123      	bne.n	8001a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80b4 	beq.w	8001c42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b60      	ldr	r3, [pc, #384]	@ (8001c60 <HAL_GPIO_Init+0x30c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	4a5f      	ldr	r2, [pc, #380]	@ (8001c60 <HAL_GPIO_Init+0x30c>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aea:	4b5d      	ldr	r3, [pc, #372]	@ (8001c60 <HAL_GPIO_Init+0x30c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c64 <HAL_GPIO_Init+0x310>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	@ (8001c68 <HAL_GPIO_Init+0x314>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d02b      	beq.n	8001b7a <HAL_GPIO_Init+0x226>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a51      	ldr	r2, [pc, #324]	@ (8001c6c <HAL_GPIO_Init+0x318>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d025      	beq.n	8001b76 <HAL_GPIO_Init+0x222>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a50      	ldr	r2, [pc, #320]	@ (8001c70 <HAL_GPIO_Init+0x31c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01f      	beq.n	8001b72 <HAL_GPIO_Init+0x21e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4f      	ldr	r2, [pc, #316]	@ (8001c74 <HAL_GPIO_Init+0x320>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d019      	beq.n	8001b6e <HAL_GPIO_Init+0x21a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c78 <HAL_GPIO_Init+0x324>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_GPIO_Init+0x216>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4d      	ldr	r2, [pc, #308]	@ (8001c7c <HAL_GPIO_Init+0x328>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00d      	beq.n	8001b66 <HAL_GPIO_Init+0x212>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c80 <HAL_GPIO_Init+0x32c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d007      	beq.n	8001b62 <HAL_GPIO_Init+0x20e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4b      	ldr	r2, [pc, #300]	@ (8001c84 <HAL_GPIO_Init+0x330>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d101      	bne.n	8001b5e <HAL_GPIO_Init+0x20a>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e00e      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b5e:	2308      	movs	r3, #8
 8001b60:	e00c      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b62:	2306      	movs	r3, #6
 8001b64:	e00a      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b66:	2305      	movs	r3, #5
 8001b68:	e008      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e004      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e002      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_GPIO_Init+0x228>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	f002 0203 	and.w	r2, r2, #3
 8001b82:	0092      	lsls	r2, r2, #2
 8001b84:	4093      	lsls	r3, r2
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b8c:	4935      	ldr	r1, [pc, #212]	@ (8001c64 <HAL_GPIO_Init+0x310>)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c88 <HAL_GPIO_Init+0x334>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bbe:	4a32      	ldr	r2, [pc, #200]	@ (8001c88 <HAL_GPIO_Init+0x334>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc4:	4b30      	ldr	r3, [pc, #192]	@ (8001c88 <HAL_GPIO_Init+0x334>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be8:	4a27      	ldr	r2, [pc, #156]	@ (8001c88 <HAL_GPIO_Init+0x334>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bee:	4b26      	ldr	r3, [pc, #152]	@ (8001c88 <HAL_GPIO_Init+0x334>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c12:	4a1d      	ldr	r2, [pc, #116]	@ (8001c88 <HAL_GPIO_Init+0x334>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <HAL_GPIO_Init+0x334>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c3c:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <HAL_GPIO_Init+0x334>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3301      	adds	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b0f      	cmp	r3, #15
 8001c4c:	f67f ae90 	bls.w	8001970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40013800 	.word	0x40013800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40021400 	.word	0x40021400
 8001c80:	40021800 	.word	0x40021800
 8001c84:	40021c00 	.word	0x40021c00
 8001c88:	40013c00 	.word	0x40013c00

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e267      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d075      	beq.n	8001d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001caa:	4b88      	ldr	r3, [pc, #544]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d00c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb6:	4b85      	ldr	r3, [pc, #532]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d112      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc2:	4b82      	ldr	r3, [pc, #520]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cce:	d10b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d05b      	beq.n	8001d94 <HAL_RCC_OscConfig+0x108>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d157      	bne.n	8001d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e242      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x74>
 8001cf2:	4b76      	ldr	r3, [pc, #472]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a75      	ldr	r2, [pc, #468]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e01d      	b.n	8001d3c <HAL_RCC_OscConfig+0xb0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x98>
 8001d0a:	4b70      	ldr	r3, [pc, #448]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6d      	ldr	r3, [pc, #436]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xb0>
 8001d24:	4b69      	ldr	r3, [pc, #420]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a68      	ldr	r2, [pc, #416]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b66      	ldr	r3, [pc, #408]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a65      	ldr	r2, [pc, #404]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fcbe 	bl	80016c4 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fcba 	bl	80016c4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	@ 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e207      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xc0>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fcaa 	bl	80016c4 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fca6 	bl	80016c4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	@ 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1f3      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	4b51      	ldr	r3, [pc, #324]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0xe8>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001da2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dae:	4b47      	ldr	r3, [pc, #284]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d11c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dba:	4b44      	ldr	r3, [pc, #272]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d116      	bne.n	8001df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x152>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e1c7      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4b3b      	ldr	r3, [pc, #236]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4937      	ldr	r1, [pc, #220]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfc:	4b34      	ldr	r3, [pc, #208]	@ (8001ed0 <HAL_RCC_OscConfig+0x244>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff fc5f 	bl	80016c4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fc5b 	bl	80016c4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1a8      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4925      	ldr	r1, [pc, #148]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b24      	ldr	r3, [pc, #144]	@ (8001ed0 <HAL_RCC_OscConfig+0x244>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff fc3e 	bl	80016c4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fc3a 	bl	80016c4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e187      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d036      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d016      	beq.n	8001eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_RCC_OscConfig+0x248>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff fc1e 	bl	80016c4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fc1a 	bl	80016c4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e167      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_RCC_OscConfig+0x240>)
 8001ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x200>
 8001eaa:	e01b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eac:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <HAL_RCC_OscConfig+0x248>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fc07 	bl	80016c4 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	e00e      	b.n	8001ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eba:	f7ff fc03 	bl	80016c4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d907      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e150      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	42470000 	.word	0x42470000
 8001ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed8:	4b88      	ldr	r3, [pc, #544]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ea      	bne.n	8001eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 8097 	beq.w	8002020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef6:	4b81      	ldr	r3, [pc, #516]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10f      	bne.n	8001f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	4b7d      	ldr	r3, [pc, #500]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f12:	4b7a      	ldr	r3, [pc, #488]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b77      	ldr	r3, [pc, #476]	@ (8002100 <HAL_RCC_OscConfig+0x474>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d118      	bne.n	8001f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2e:	4b74      	ldr	r3, [pc, #464]	@ (8002100 <HAL_RCC_OscConfig+0x474>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a73      	ldr	r2, [pc, #460]	@ (8002100 <HAL_RCC_OscConfig+0x474>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fbc3 	bl	80016c4 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f42:	f7ff fbbf 	bl	80016c4 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e10c      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	4b6a      	ldr	r3, [pc, #424]	@ (8002100 <HAL_RCC_OscConfig+0x474>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x2ea>
 8001f68:	4b64      	ldr	r3, [pc, #400]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6c:	4a63      	ldr	r2, [pc, #396]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f74:	e01c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x324>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x30c>
 8001f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f82:	4a5e      	ldr	r2, [pc, #376]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x324>
 8001f98:	4b58      	ldr	r3, [pc, #352]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9c:	4a57      	ldr	r2, [pc, #348]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa4:	4b55      	ldr	r3, [pc, #340]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa8:	4a54      	ldr	r2, [pc, #336]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001faa:	f023 0304 	bic.w	r3, r3, #4
 8001fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7ff fb84 	bl	80016c4 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fb80 	bl	80016c4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0cb      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd6:	4b49      	ldr	r3, [pc, #292]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0ee      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x334>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fb6e 	bl	80016c4 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fec:	f7ff fb6a 	bl	80016c4 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e0b5      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002002:	4b3e      	ldr	r3, [pc, #248]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ee      	bne.n	8001fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002014:	4b39      	ldr	r3, [pc, #228]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	4a38      	ldr	r2, [pc, #224]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 800201a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800201e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a1 	beq.w	800216c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800202a:	4b34      	ldr	r3, [pc, #208]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b08      	cmp	r3, #8
 8002034:	d05c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d141      	bne.n	80020c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b31      	ldr	r3, [pc, #196]	@ (8002104 <HAL_RCC_OscConfig+0x478>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fb3e 	bl	80016c4 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fb3a 	bl	80016c4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e087      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b27      	ldr	r3, [pc, #156]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	041b      	lsls	r3, r3, #16
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	491b      	ldr	r1, [pc, #108]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002094:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <HAL_RCC_OscConfig+0x478>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fb13 	bl	80016c4 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a2:	f7ff fb0f 	bl	80016c4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e05c      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x416>
 80020c0:	e054      	b.n	800216c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <HAL_RCC_OscConfig+0x478>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff fafc 	bl	80016c4 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d0:	f7ff faf8 	bl	80016c4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e045      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_RCC_OscConfig+0x470>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x444>
 80020ee:	e03d      	b.n	800216c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e038      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
 80020fc:	40023800 	.word	0x40023800
 8002100:	40007000 	.word	0x40007000
 8002104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_RCC_OscConfig+0x4ec>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d028      	beq.n	8002168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d121      	bne.n	8002168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d11a      	bne.n	8002168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800213e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002140:	4293      	cmp	r3, r2
 8002142:	d111      	bne.n	8002168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	3b01      	subs	r3, #1
 8002152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0cc      	b.n	800232a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b68      	ldr	r3, [pc, #416]	@ (8002334 <HAL_RCC_ClockConfig+0x1b8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d90c      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b65      	ldr	r3, [pc, #404]	@ (8002334 <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b63      	ldr	r3, [pc, #396]	@ (8002334 <HAL_RCC_ClockConfig+0x1b8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b8      	b.n	800232a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d0:	4b59      	ldr	r3, [pc, #356]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4a58      	ldr	r2, [pc, #352]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e8:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a52      	ldr	r2, [pc, #328]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b50      	ldr	r3, [pc, #320]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	494d      	ldr	r1, [pc, #308]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d044      	beq.n	800229c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b47      	ldr	r3, [pc, #284]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d119      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e07f      	b.n	800232a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d003      	beq.n	800223a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002236:	2b03      	cmp	r3, #3
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b3f      	ldr	r3, [pc, #252]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06f      	b.n	800232a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	4b3b      	ldr	r3, [pc, #236]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e067      	b.n	800232a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4934      	ldr	r1, [pc, #208]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800226c:	f7ff fa2a 	bl	80016c4 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7ff fa26 	bl	80016c4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e04f      	b.n	800232a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b2b      	ldr	r3, [pc, #172]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800229c:	4b25      	ldr	r3, [pc, #148]	@ (8002334 <HAL_RCC_ClockConfig+0x1b8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d20c      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b22      	ldr	r3, [pc, #136]	@ (8002334 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e032      	b.n	800232a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4916      	ldr	r1, [pc, #88]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	490e      	ldr	r1, [pc, #56]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002302:	f000 f889 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8002306:	4602      	mov	r2, r0
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	490a      	ldr	r1, [pc, #40]	@ (800233c <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	5ccb      	ldrb	r3, [r1, r3]
 8002316:	fa22 f303 	lsr.w	r3, r2, r3
 800231a:	4a09      	ldr	r2, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f98a 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023c00 	.word	0x40023c00
 8002338:	40023800 	.word	0x40023800
 800233c:	080065ec 	.word	0x080065ec
 8002340:	20000000 	.word	0x20000000
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	@ 0x30
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d129      	bne.n	80023ae <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a2a      	ldr	r2, [pc, #168]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b28      	ldr	r3, [pc, #160]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002376:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800237a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	481f      	ldr	r0, [pc, #124]	@ (8002410 <HAL_RCC_MCOConfig+0xc8>)
 8002394:	f7ff fade 	bl	8001954 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002398:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	4919      	ldr	r1, [pc, #100]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80023ac:	e029      	b.n	8002402 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a15      	ldr	r2, [pc, #84]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b13      	ldr	r3, [pc, #76]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80023ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	480b      	ldr	r0, [pc, #44]	@ (8002414 <HAL_RCC_MCOConfig+0xcc>)
 80023e8:	f7ff fab4 	bl	8001954 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80023ec:	4b07      	ldr	r3, [pc, #28]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	00d9      	lsls	r1, r3, #3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	430b      	orrs	r3, r1
 80023fc:	4903      	ldr	r1, [pc, #12]	@ (800240c <HAL_RCC_MCOConfig+0xc4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
}
 8002402:	bf00      	nop
 8002404:	3730      	adds	r7, #48	@ 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020800 	.word	0x40020800

08002418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800241c:	b094      	sub	sp, #80	@ 0x50
 800241e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	647b      	str	r3, [r7, #68]	@ 0x44
 8002424:	2300      	movs	r3, #0
 8002426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002428:	2300      	movs	r3, #0
 800242a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002430:	4b79      	ldr	r3, [pc, #484]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d00d      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x40>
 800243c:	2b08      	cmp	r3, #8
 800243e:	f200 80e1 	bhi.w	8002604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x34>
 8002446:	2b04      	cmp	r3, #4
 8002448:	d003      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x3a>
 800244a:	e0db      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800244c:	4b73      	ldr	r3, [pc, #460]	@ (800261c <HAL_RCC_GetSysClockFreq+0x204>)
 800244e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002450:	e0db      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002452:	4b73      	ldr	r3, [pc, #460]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x208>)
 8002454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002456:	e0d8      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002458:	4b6f      	ldr	r3, [pc, #444]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002460:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002462:	4b6d      	ldr	r3, [pc, #436]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d063      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246e:	4b6a      	ldr	r3, [pc, #424]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	099b      	lsrs	r3, r3, #6
 8002474:	2200      	movs	r2, #0
 8002476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002478:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800247a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002480:	633b      	str	r3, [r7, #48]	@ 0x30
 8002482:	2300      	movs	r3, #0
 8002484:	637b      	str	r3, [r7, #52]	@ 0x34
 8002486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800248a:	4622      	mov	r2, r4
 800248c:	462b      	mov	r3, r5
 800248e:	f04f 0000 	mov.w	r0, #0
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	0159      	lsls	r1, r3, #5
 8002498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800249c:	0150      	lsls	r0, r2, #5
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4621      	mov	r1, r4
 80024a4:	1a51      	subs	r1, r2, r1
 80024a6:	6139      	str	r1, [r7, #16]
 80024a8:	4629      	mov	r1, r5
 80024aa:	eb63 0301 	sbc.w	r3, r3, r1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024bc:	4659      	mov	r1, fp
 80024be:	018b      	lsls	r3, r1, #6
 80024c0:	4651      	mov	r1, sl
 80024c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c6:	4651      	mov	r1, sl
 80024c8:	018a      	lsls	r2, r1, #6
 80024ca:	4651      	mov	r1, sl
 80024cc:	ebb2 0801 	subs.w	r8, r2, r1
 80024d0:	4659      	mov	r1, fp
 80024d2:	eb63 0901 	sbc.w	r9, r3, r1
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ea:	4690      	mov	r8, r2
 80024ec:	4699      	mov	r9, r3
 80024ee:	4623      	mov	r3, r4
 80024f0:	eb18 0303 	adds.w	r3, r8, r3
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	462b      	mov	r3, r5
 80024f8:	eb49 0303 	adc.w	r3, r9, r3
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800250a:	4629      	mov	r1, r5
 800250c:	024b      	lsls	r3, r1, #9
 800250e:	4621      	mov	r1, r4
 8002510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002514:	4621      	mov	r1, r4
 8002516:	024a      	lsls	r2, r1, #9
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800251e:	2200      	movs	r2, #0
 8002520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002528:	f7fe fb3e 	bl	8000ba8 <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4613      	mov	r3, r2
 8002532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002534:	e058      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002536:	4b38      	ldr	r3, [pc, #224]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	099b      	lsrs	r3, r3, #6
 800253c:	2200      	movs	r2, #0
 800253e:	4618      	mov	r0, r3
 8002540:	4611      	mov	r1, r2
 8002542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002546:	623b      	str	r3, [r7, #32]
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
 800254c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002550:	4642      	mov	r2, r8
 8002552:	464b      	mov	r3, r9
 8002554:	f04f 0000 	mov.w	r0, #0
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	0159      	lsls	r1, r3, #5
 800255e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002562:	0150      	lsls	r0, r2, #5
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4641      	mov	r1, r8
 800256a:	ebb2 0a01 	subs.w	sl, r2, r1
 800256e:	4649      	mov	r1, r9
 8002570:	eb63 0b01 	sbc.w	fp, r3, r1
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002588:	ebb2 040a 	subs.w	r4, r2, sl
 800258c:	eb63 050b 	sbc.w	r5, r3, fp
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	00eb      	lsls	r3, r5, #3
 800259a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800259e:	00e2      	lsls	r2, r4, #3
 80025a0:	4614      	mov	r4, r2
 80025a2:	461d      	mov	r5, r3
 80025a4:	4643      	mov	r3, r8
 80025a6:	18e3      	adds	r3, r4, r3
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	464b      	mov	r3, r9
 80025ac:	eb45 0303 	adc.w	r3, r5, r3
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025be:	4629      	mov	r1, r5
 80025c0:	028b      	lsls	r3, r1, #10
 80025c2:	4621      	mov	r1, r4
 80025c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c8:	4621      	mov	r1, r4
 80025ca:	028a      	lsls	r2, r1, #10
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d2:	2200      	movs	r2, #0
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	61fa      	str	r2, [r7, #28]
 80025d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025dc:	f7fe fae4 	bl	8000ba8 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80025f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002602:	e002      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <HAL_RCC_GetSysClockFreq+0x204>)
 8002606:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800260c:	4618      	mov	r0, r3
 800260e:	3750      	adds	r7, #80	@ 0x50
 8002610:	46bd      	mov	sp, r7
 8002612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	00f42400 	.word	0x00f42400
 8002620:	007a1200 	.word	0x007a1200

08002624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000000 	.word	0x20000000

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a9b      	lsrs	r3, r3, #10
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4903      	ldr	r1, [pc, #12]	@ (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	080065fc 	.word	0x080065fc

08002664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002668:	f7ff ffdc 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	0b5b      	lsrs	r3, r3, #13
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4903      	ldr	r1, [pc, #12]	@ (8002688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	080065fc 	.word	0x080065fc

0800268c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e041      	b.n	8002722 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fe1a 	bl	80012ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f000 fb0a 	bl	8002ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_TIM_IC_Start_IT+0x1e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002746:	b2db      	uxtb	r3, r3
 8002748:	e013      	b.n	8002772 <HAL_TIM_IC_Start_IT+0x46>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d104      	bne.n	800275a <HAL_TIM_IC_Start_IT+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002756:	b2db      	uxtb	r3, r3
 8002758:	e00b      	b.n	8002772 <HAL_TIM_IC_Start_IT+0x46>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d104      	bne.n	800276a <HAL_TIM_IC_Start_IT+0x3e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002766:	b2db      	uxtb	r3, r3
 8002768:	e003      	b.n	8002772 <HAL_TIM_IC_Start_IT+0x46>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <HAL_TIM_IC_Start_IT+0x58>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e013      	b.n	80027ac <HAL_TIM_IC_Start_IT+0x80>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b04      	cmp	r3, #4
 8002788:	d104      	bne.n	8002794 <HAL_TIM_IC_Start_IT+0x68>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e00b      	b.n	80027ac <HAL_TIM_IC_Start_IT+0x80>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b08      	cmp	r3, #8
 8002798:	d104      	bne.n	80027a4 <HAL_TIM_IC_Start_IT+0x78>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e003      	b.n	80027ac <HAL_TIM_IC_Start_IT+0x80>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80027ae:	7bbb      	ldrb	r3, [r7, #14]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d102      	bne.n	80027ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80027b4:	7b7b      	ldrb	r3, [r7, #13]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0cc      	b.n	8002958 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_IC_Start_IT+0xa2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027cc:	e013      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0xca>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d104      	bne.n	80027de <HAL_TIM_IC_Start_IT+0xb2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027dc:	e00b      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0xca>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_IC_Start_IT+0xc2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027ec:	e003      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0xca>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d104      	bne.n	8002806 <HAL_TIM_IC_Start_IT+0xda>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002804:	e013      	b.n	800282e <HAL_TIM_IC_Start_IT+0x102>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d104      	bne.n	8002816 <HAL_TIM_IC_Start_IT+0xea>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002814:	e00b      	b.n	800282e <HAL_TIM_IC_Start_IT+0x102>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d104      	bne.n	8002826 <HAL_TIM_IC_Start_IT+0xfa>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002824:	e003      	b.n	800282e <HAL_TIM_IC_Start_IT+0x102>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d841      	bhi.n	80028b8 <HAL_TIM_IC_Start_IT+0x18c>
 8002834:	a201      	add	r2, pc, #4	@ (adr r2, 800283c <HAL_TIM_IC_Start_IT+0x110>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	08002871 	.word	0x08002871
 8002840:	080028b9 	.word	0x080028b9
 8002844:	080028b9 	.word	0x080028b9
 8002848:	080028b9 	.word	0x080028b9
 800284c:	08002883 	.word	0x08002883
 8002850:	080028b9 	.word	0x080028b9
 8002854:	080028b9 	.word	0x080028b9
 8002858:	080028b9 	.word	0x080028b9
 800285c:	08002895 	.word	0x08002895
 8002860:	080028b9 	.word	0x080028b9
 8002864:	080028b9 	.word	0x080028b9
 8002868:	080028b9 	.word	0x080028b9
 800286c:	080028a7 	.word	0x080028a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0202 	orr.w	r2, r2, #2
 800287e:	60da      	str	r2, [r3, #12]
      break;
 8002880:	e01d      	b.n	80028be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0204 	orr.w	r2, r2, #4
 8002890:	60da      	str	r2, [r3, #12]
      break;
 8002892:	e014      	b.n	80028be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0208 	orr.w	r2, r2, #8
 80028a2:	60da      	str	r2, [r3, #12]
      break;
 80028a4:	e00b      	b.n	80028be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0210 	orr.w	r2, r2, #16
 80028b4:	60da      	str	r2, [r3, #12]
      break;
 80028b6:	e002      	b.n	80028be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d148      	bne.n	8002956 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2201      	movs	r2, #1
 80028ca:	6839      	ldr	r1, [r7, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fbdf 	bl	8003090 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a22      	ldr	r2, [pc, #136]	@ (8002960 <HAL_TIM_IC_Start_IT+0x234>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d022      	beq.n	8002922 <HAL_TIM_IC_Start_IT+0x1f6>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e4:	d01d      	beq.n	8002922 <HAL_TIM_IC_Start_IT+0x1f6>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002964 <HAL_TIM_IC_Start_IT+0x238>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d018      	beq.n	8002922 <HAL_TIM_IC_Start_IT+0x1f6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002968 <HAL_TIM_IC_Start_IT+0x23c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_TIM_IC_Start_IT+0x1f6>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_TIM_IC_Start_IT+0x240>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00e      	beq.n	8002922 <HAL_TIM_IC_Start_IT+0x1f6>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a19      	ldr	r2, [pc, #100]	@ (8002970 <HAL_TIM_IC_Start_IT+0x244>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_TIM_IC_Start_IT+0x1f6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_TIM_IC_Start_IT+0x248>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_TIM_IC_Start_IT+0x1f6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a16      	ldr	r2, [pc, #88]	@ (8002978 <HAL_TIM_IC_Start_IT+0x24c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d111      	bne.n	8002946 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d010      	beq.n	8002956 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	e007      	b.n	8002956 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40010000 	.word	0x40010000
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800
 800296c:	40000c00 	.word	0x40000c00
 8002970:	40010400 	.word	0x40010400
 8002974:	40014000 	.word	0x40014000
 8002978:	40001800 	.word	0x40001800

0800297c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d020      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01b      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0202 	mvn.w	r2, #2
 80029b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fba2 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f96a 	bl	8002ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f971 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d020      	beq.n	8002a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01b      	beq.n	8002a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0204 	mvn.w	r2, #4
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fb7c 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f944 	bl	8002ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f94b 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d020      	beq.n	8002a78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01b      	beq.n	8002a78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0208 	mvn.w	r2, #8
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fb56 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f91e 	bl	8002ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f925 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d020      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0210 	mvn.w	r2, #16
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe fb30 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8f8 	bl	8002ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f8ff 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00c      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0201 	mvn.w	r2, #1
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8d6 	bl	8002c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 faf1 	bl	80030ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8d0 	bl	8002cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0220 	mvn.w	r2, #32
 8002b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fac3 	bl	80030da <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e088      	b.n	8002c8c <HAL_TIM_IC_ConfigChannel+0x130>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002b98:	f000 f950 	bl	8002e3c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 020c 	bic.w	r2, r2, #12
 8002baa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6999      	ldr	r1, [r3, #24]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	619a      	str	r2, [r3, #24]
 8002bbe:	e060      	b.n	8002c82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d11c      	bne.n	8002c00 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002bd6:	f000 f9a5 	bl	8002f24 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002be8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6999      	ldr	r1, [r3, #24]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	021a      	lsls	r2, r3, #8
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	619a      	str	r2, [r3, #24]
 8002bfe:	e040      	b.n	8002c82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d11b      	bne.n	8002c3e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002c16:	f000 f9c2 	bl	8002f9e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 020c 	bic.w	r2, r2, #12
 8002c28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69d9      	ldr	r1, [r3, #28]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	61da      	str	r2, [r3, #28]
 8002c3c:	e021      	b.n	8002c82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d11c      	bne.n	8002c7e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002c54:	f000 f9df 	bl	8003016 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002c66:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69d9      	ldr	r1, [r3, #28]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	021a      	lsls	r2, r3, #8
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	61da      	str	r2, [r3, #28]
 8002c7c:	e001      	b.n	8002c82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a46      	ldr	r2, [pc, #280]	@ (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d02:	d00f      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a43      	ldr	r2, [pc, #268]	@ (8002e14 <TIM_Base_SetConfig+0x130>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a42      	ldr	r2, [pc, #264]	@ (8002e18 <TIM_Base_SetConfig+0x134>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a41      	ldr	r2, [pc, #260]	@ (8002e1c <TIM_Base_SetConfig+0x138>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a40      	ldr	r2, [pc, #256]	@ (8002e20 <TIM_Base_SetConfig+0x13c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a35      	ldr	r2, [pc, #212]	@ (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02b      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d44:	d027      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a32      	ldr	r2, [pc, #200]	@ (8002e14 <TIM_Base_SetConfig+0x130>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d023      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a31      	ldr	r2, [pc, #196]	@ (8002e18 <TIM_Base_SetConfig+0x134>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a30      	ldr	r2, [pc, #192]	@ (8002e1c <TIM_Base_SetConfig+0x138>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01b      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2f      	ldr	r2, [pc, #188]	@ (8002e20 <TIM_Base_SetConfig+0x13c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d017      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2e      	ldr	r2, [pc, #184]	@ (8002e24 <TIM_Base_SetConfig+0x140>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2d      	ldr	r2, [pc, #180]	@ (8002e28 <TIM_Base_SetConfig+0x144>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00f      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2c      	ldr	r2, [pc, #176]	@ (8002e2c <TIM_Base_SetConfig+0x148>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00b      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a2b      	ldr	r2, [pc, #172]	@ (8002e30 <TIM_Base_SetConfig+0x14c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2a      	ldr	r2, [pc, #168]	@ (8002e34 <TIM_Base_SetConfig+0x150>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d003      	beq.n	8002d96 <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <TIM_Base_SetConfig+0x154>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d108      	bne.n	8002da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a10      	ldr	r2, [pc, #64]	@ (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <TIM_Base_SetConfig+0x13c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d103      	bne.n	8002de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f023 0201 	bic.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	611a      	str	r2, [r3, #16]
  }
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40000c00 	.word	0x40000c00
 8002e20:	40010400 	.word	0x40010400
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800
 8002e30:	40001800 	.word	0x40001800
 8002e34:	40001c00 	.word	0x40001c00
 8002e38:	40002000 	.word	0x40002000

08002e3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 0201 	bic.w	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a28      	ldr	r2, [pc, #160]	@ (8002f08 <TIM_TI1_SetConfig+0xcc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01b      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x66>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e70:	d017      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x66>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a25      	ldr	r2, [pc, #148]	@ (8002f0c <TIM_TI1_SetConfig+0xd0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x66>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a24      	ldr	r2, [pc, #144]	@ (8002f10 <TIM_TI1_SetConfig+0xd4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00f      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x66>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4a23      	ldr	r2, [pc, #140]	@ (8002f14 <TIM_TI1_SetConfig+0xd8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x66>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a22      	ldr	r2, [pc, #136]	@ (8002f18 <TIM_TI1_SetConfig+0xdc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x66>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a21      	ldr	r2, [pc, #132]	@ (8002f1c <TIM_TI1_SetConfig+0xe0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d003      	beq.n	8002ea2 <TIM_TI1_SetConfig+0x66>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4a20      	ldr	r2, [pc, #128]	@ (8002f20 <TIM_TI1_SetConfig+0xe4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <TIM_TI1_SetConfig+0x6a>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <TIM_TI1_SetConfig+0x6c>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 0303 	bic.w	r3, r3, #3
 8002eb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e003      	b.n	8002ec6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f023 030a 	bic.w	r3, r3, #10
 8002ee0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 030a 	and.w	r3, r3, #10
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40000c00 	.word	0x40000c00
 8002f18:	40010400 	.word	0x40010400
 8002f1c:	40014000 	.word	0x40014000
 8002f20:	40001800 	.word	0x40001800

08002f24 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 0210 	bic.w	r2, r3, #16
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	031b      	lsls	r3, r3, #12
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b087      	sub	sp, #28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002fee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	621a      	str	r2, [r3, #32]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003016:	b480      	push	{r7}
 8003018:	b087      	sub	sp, #28
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003042:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003054:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	031b      	lsls	r3, r3, #12
 800305a:	b29b      	uxth	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003068:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	031b      	lsls	r3, r3, #12
 800306e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	621a      	str	r2, [r3, #32]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2201      	movs	r2, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	401a      	ands	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	621a      	str	r2, [r3, #32]
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e042      	b.n	800319a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fe f91b 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2224      	movs	r2, #36	@ 0x24
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003144:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f972 	bl	8003430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800315a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800316a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800317a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b08a      	sub	sp, #40	@ 0x28
 80031a6:	af02      	add	r7, sp, #8
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d175      	bne.n	80032ae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_UART_Transmit+0x2c>
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06e      	b.n	80032b0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2221      	movs	r2, #33	@ 0x21
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031e0:	f7fe fa70 	bl	80016c4 <HAL_GetTick>
 80031e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	88fa      	ldrh	r2, [r7, #6]
 80031ea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fa:	d108      	bne.n	800320e <HAL_UART_Transmit+0x6c>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e003      	b.n	8003216 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003216:	e02e      	b.n	8003276 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2200      	movs	r2, #0
 8003220:	2180      	movs	r1, #128	@ 0x80
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f848 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e03a      	b.n	80032b0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800324e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	3302      	adds	r3, #2
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e007      	b.n	8003268 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3301      	adds	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1cb      	bne.n	8003218 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2200      	movs	r2, #0
 8003288:	2140      	movs	r1, #64	@ 0x40
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f814 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e006      	b.n	80032b0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c8:	e03b      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d037      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fe f9f7 	bl	80016c4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e03a      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d023      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b80      	cmp	r3, #128	@ 0x80
 80032fe:	d020      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b40      	cmp	r3, #64	@ 0x40
 8003304:	d01d      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b08      	cmp	r3, #8
 8003312:	d116      	bne.n	8003342 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f81d 	bl	800336a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2208      	movs	r2, #8
 8003334:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e00f      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4013      	ands	r3, r2
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	429a      	cmp	r2, r3
 8003350:	bf0c      	ite	eq
 8003352:	2301      	moveq	r3, #1
 8003354:	2300      	movne	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	429a      	cmp	r2, r3
 800335e:	d0b4      	beq.n	80032ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800336a:	b480      	push	{r7}
 800336c:	b095      	sub	sp, #84	@ 0x54
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003392:	643a      	str	r2, [r7, #64]	@ 0x40
 8003394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e5      	bne.n	8003372 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3314      	adds	r3, #20
 80033ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3314      	adds	r3, #20
 80033c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e5      	bne.n	80033a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d119      	bne.n	8003416 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f023 0310 	bic.w	r3, r3, #16
 80033f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003402:	61ba      	str	r2, [r7, #24]
 8003404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	613b      	str	r3, [r7, #16]
   return(result);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e5      	bne.n	80033e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003424:	bf00      	nop
 8003426:	3754      	adds	r7, #84	@ 0x54
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003434:	b0c0      	sub	sp, #256	@ 0x100
 8003436:	af00      	add	r7, sp, #0
 8003438:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344c:	68d9      	ldr	r1, [r3, #12]
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	ea40 0301 	orr.w	r3, r0, r1
 8003458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800345a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	431a      	orrs	r2, r3
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	431a      	orrs	r2, r3
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003488:	f021 010c 	bic.w	r1, r1, #12
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003496:	430b      	orrs	r3, r1
 8003498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034aa:	6999      	ldr	r1, [r3, #24]
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	ea40 0301 	orr.w	r3, r0, r1
 80034b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b8f      	ldr	r3, [pc, #572]	@ (80036fc <UART_SetConfig+0x2cc>)
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d005      	beq.n	80034d0 <UART_SetConfig+0xa0>
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003700 <UART_SetConfig+0x2d0>)
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d104      	bne.n	80034da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034d0:	f7ff f8c8 	bl	8002664 <HAL_RCC_GetPCLK2Freq>
 80034d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034d8:	e003      	b.n	80034e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034da:	f7ff f8af 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80034de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ec:	f040 810c 	bne.w	8003708 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003502:	4622      	mov	r2, r4
 8003504:	462b      	mov	r3, r5
 8003506:	1891      	adds	r1, r2, r2
 8003508:	65b9      	str	r1, [r7, #88]	@ 0x58
 800350a:	415b      	adcs	r3, r3
 800350c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800350e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003512:	4621      	mov	r1, r4
 8003514:	eb12 0801 	adds.w	r8, r2, r1
 8003518:	4629      	mov	r1, r5
 800351a:	eb43 0901 	adc.w	r9, r3, r1
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800352a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800352e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003532:	4690      	mov	r8, r2
 8003534:	4699      	mov	r9, r3
 8003536:	4623      	mov	r3, r4
 8003538:	eb18 0303 	adds.w	r3, r8, r3
 800353c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003540:	462b      	mov	r3, r5
 8003542:	eb49 0303 	adc.w	r3, r9, r3
 8003546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003556:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800355a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800355e:	460b      	mov	r3, r1
 8003560:	18db      	adds	r3, r3, r3
 8003562:	653b      	str	r3, [r7, #80]	@ 0x50
 8003564:	4613      	mov	r3, r2
 8003566:	eb42 0303 	adc.w	r3, r2, r3
 800356a:	657b      	str	r3, [r7, #84]	@ 0x54
 800356c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003570:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003574:	f7fd fb18 	bl	8000ba8 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4b61      	ldr	r3, [pc, #388]	@ (8003704 <UART_SetConfig+0x2d4>)
 800357e:	fba3 2302 	umull	r2, r3, r3, r2
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	011c      	lsls	r4, r3, #4
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358a:	2200      	movs	r2, #0
 800358c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003590:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003594:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003598:	4642      	mov	r2, r8
 800359a:	464b      	mov	r3, r9
 800359c:	1891      	adds	r1, r2, r2
 800359e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035a0:	415b      	adcs	r3, r3
 80035a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035a8:	4641      	mov	r1, r8
 80035aa:	eb12 0a01 	adds.w	sl, r2, r1
 80035ae:	4649      	mov	r1, r9
 80035b0:	eb43 0b01 	adc.w	fp, r3, r1
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035c8:	4692      	mov	sl, r2
 80035ca:	469b      	mov	fp, r3
 80035cc:	4643      	mov	r3, r8
 80035ce:	eb1a 0303 	adds.w	r3, sl, r3
 80035d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035d6:	464b      	mov	r3, r9
 80035d8:	eb4b 0303 	adc.w	r3, fp, r3
 80035dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035f4:	460b      	mov	r3, r1
 80035f6:	18db      	adds	r3, r3, r3
 80035f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035fa:	4613      	mov	r3, r2
 80035fc:	eb42 0303 	adc.w	r3, r2, r3
 8003600:	647b      	str	r3, [r7, #68]	@ 0x44
 8003602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003606:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800360a:	f7fd facd 	bl	8000ba8 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4611      	mov	r1, r2
 8003614:	4b3b      	ldr	r3, [pc, #236]	@ (8003704 <UART_SetConfig+0x2d4>)
 8003616:	fba3 2301 	umull	r2, r3, r3, r1
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2264      	movs	r2, #100	@ 0x64
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	1acb      	subs	r3, r1, r3
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800362a:	4b36      	ldr	r3, [pc, #216]	@ (8003704 <UART_SetConfig+0x2d4>)
 800362c:	fba3 2302 	umull	r2, r3, r3, r2
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003638:	441c      	add	r4, r3
 800363a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800363e:	2200      	movs	r2, #0
 8003640:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003644:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003648:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800364c:	4642      	mov	r2, r8
 800364e:	464b      	mov	r3, r9
 8003650:	1891      	adds	r1, r2, r2
 8003652:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003654:	415b      	adcs	r3, r3
 8003656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800365c:	4641      	mov	r1, r8
 800365e:	1851      	adds	r1, r2, r1
 8003660:	6339      	str	r1, [r7, #48]	@ 0x30
 8003662:	4649      	mov	r1, r9
 8003664:	414b      	adcs	r3, r1
 8003666:	637b      	str	r3, [r7, #52]	@ 0x34
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003674:	4659      	mov	r1, fp
 8003676:	00cb      	lsls	r3, r1, #3
 8003678:	4651      	mov	r1, sl
 800367a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800367e:	4651      	mov	r1, sl
 8003680:	00ca      	lsls	r2, r1, #3
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	4603      	mov	r3, r0
 8003688:	4642      	mov	r2, r8
 800368a:	189b      	adds	r3, r3, r2
 800368c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003690:	464b      	mov	r3, r9
 8003692:	460a      	mov	r2, r1
 8003694:	eb42 0303 	adc.w	r3, r2, r3
 8003698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036b0:	460b      	mov	r3, r1
 80036b2:	18db      	adds	r3, r3, r3
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036b6:	4613      	mov	r3, r2
 80036b8:	eb42 0303 	adc.w	r3, r2, r3
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036c6:	f7fd fa6f 	bl	8000ba8 <__aeabi_uldivmod>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003704 <UART_SetConfig+0x2d4>)
 80036d0:	fba3 1302 	umull	r1, r3, r3, r2
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	2164      	movs	r1, #100	@ 0x64
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	3332      	adds	r3, #50	@ 0x32
 80036e2:	4a08      	ldr	r2, [pc, #32]	@ (8003704 <UART_SetConfig+0x2d4>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	f003 0207 	and.w	r2, r3, #7
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4422      	add	r2, r4
 80036f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036f8:	e106      	b.n	8003908 <UART_SetConfig+0x4d8>
 80036fa:	bf00      	nop
 80036fc:	40011000 	.word	0x40011000
 8003700:	40011400 	.word	0x40011400
 8003704:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800370c:	2200      	movs	r2, #0
 800370e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003712:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003716:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800371a:	4642      	mov	r2, r8
 800371c:	464b      	mov	r3, r9
 800371e:	1891      	adds	r1, r2, r2
 8003720:	6239      	str	r1, [r7, #32]
 8003722:	415b      	adcs	r3, r3
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
 8003726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800372a:	4641      	mov	r1, r8
 800372c:	1854      	adds	r4, r2, r1
 800372e:	4649      	mov	r1, r9
 8003730:	eb43 0501 	adc.w	r5, r3, r1
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	00eb      	lsls	r3, r5, #3
 800373e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003742:	00e2      	lsls	r2, r4, #3
 8003744:	4614      	mov	r4, r2
 8003746:	461d      	mov	r5, r3
 8003748:	4643      	mov	r3, r8
 800374a:	18e3      	adds	r3, r4, r3
 800374c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003750:	464b      	mov	r3, r9
 8003752:	eb45 0303 	adc.w	r3, r5, r3
 8003756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003766:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003776:	4629      	mov	r1, r5
 8003778:	008b      	lsls	r3, r1, #2
 800377a:	4621      	mov	r1, r4
 800377c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003780:	4621      	mov	r1, r4
 8003782:	008a      	lsls	r2, r1, #2
 8003784:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003788:	f7fd fa0e 	bl	8000ba8 <__aeabi_uldivmod>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4b60      	ldr	r3, [pc, #384]	@ (8003914 <UART_SetConfig+0x4e4>)
 8003792:	fba3 2302 	umull	r2, r3, r3, r2
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	011c      	lsls	r4, r3, #4
 800379a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037ac:	4642      	mov	r2, r8
 80037ae:	464b      	mov	r3, r9
 80037b0:	1891      	adds	r1, r2, r2
 80037b2:	61b9      	str	r1, [r7, #24]
 80037b4:	415b      	adcs	r3, r3
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037bc:	4641      	mov	r1, r8
 80037be:	1851      	adds	r1, r2, r1
 80037c0:	6139      	str	r1, [r7, #16]
 80037c2:	4649      	mov	r1, r9
 80037c4:	414b      	adcs	r3, r1
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037d4:	4659      	mov	r1, fp
 80037d6:	00cb      	lsls	r3, r1, #3
 80037d8:	4651      	mov	r1, sl
 80037da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037de:	4651      	mov	r1, sl
 80037e0:	00ca      	lsls	r2, r1, #3
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	4603      	mov	r3, r0
 80037e8:	4642      	mov	r2, r8
 80037ea:	189b      	adds	r3, r3, r2
 80037ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037f0:	464b      	mov	r3, r9
 80037f2:	460a      	mov	r2, r1
 80037f4:	eb42 0303 	adc.w	r3, r2, r3
 80037f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003806:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003814:	4649      	mov	r1, r9
 8003816:	008b      	lsls	r3, r1, #2
 8003818:	4641      	mov	r1, r8
 800381a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800381e:	4641      	mov	r1, r8
 8003820:	008a      	lsls	r2, r1, #2
 8003822:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003826:	f7fd f9bf 	bl	8000ba8 <__aeabi_uldivmod>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4611      	mov	r1, r2
 8003830:	4b38      	ldr	r3, [pc, #224]	@ (8003914 <UART_SetConfig+0x4e4>)
 8003832:	fba3 2301 	umull	r2, r3, r3, r1
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2264      	movs	r2, #100	@ 0x64
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	1acb      	subs	r3, r1, r3
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	3332      	adds	r3, #50	@ 0x32
 8003844:	4a33      	ldr	r2, [pc, #204]	@ (8003914 <UART_SetConfig+0x4e4>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003850:	441c      	add	r4, r3
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003856:	2200      	movs	r2, #0
 8003858:	673b      	str	r3, [r7, #112]	@ 0x70
 800385a:	677a      	str	r2, [r7, #116]	@ 0x74
 800385c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003860:	4642      	mov	r2, r8
 8003862:	464b      	mov	r3, r9
 8003864:	1891      	adds	r1, r2, r2
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	415b      	adcs	r3, r3
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003870:	4641      	mov	r1, r8
 8003872:	1851      	adds	r1, r2, r1
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	4649      	mov	r1, r9
 8003878:	414b      	adcs	r3, r1
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003888:	4659      	mov	r1, fp
 800388a:	00cb      	lsls	r3, r1, #3
 800388c:	4651      	mov	r1, sl
 800388e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003892:	4651      	mov	r1, sl
 8003894:	00ca      	lsls	r2, r1, #3
 8003896:	4610      	mov	r0, r2
 8003898:	4619      	mov	r1, r3
 800389a:	4603      	mov	r3, r0
 800389c:	4642      	mov	r2, r8
 800389e:	189b      	adds	r3, r3, r2
 80038a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038a2:	464b      	mov	r3, r9
 80038a4:	460a      	mov	r2, r1
 80038a6:	eb42 0303 	adc.w	r3, r2, r3
 80038aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80038b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038c4:	4649      	mov	r1, r9
 80038c6:	008b      	lsls	r3, r1, #2
 80038c8:	4641      	mov	r1, r8
 80038ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ce:	4641      	mov	r1, r8
 80038d0:	008a      	lsls	r2, r1, #2
 80038d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038d6:	f7fd f967 	bl	8000ba8 <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4b0d      	ldr	r3, [pc, #52]	@ (8003914 <UART_SetConfig+0x4e4>)
 80038e0:	fba3 1302 	umull	r1, r3, r3, r2
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	2164      	movs	r1, #100	@ 0x64
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	3332      	adds	r3, #50	@ 0x32
 80038f2:	4a08      	ldr	r2, [pc, #32]	@ (8003914 <UART_SetConfig+0x4e4>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	f003 020f 	and.w	r2, r3, #15
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4422      	add	r2, r4
 8003906:	609a      	str	r2, [r3, #8]
}
 8003908:	bf00      	nop
 800390a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800390e:	46bd      	mov	sp, r7
 8003910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003914:	51eb851f 	.word	0x51eb851f

08003918 <__cvt>:
 8003918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800391c:	ec57 6b10 	vmov	r6, r7, d0
 8003920:	2f00      	cmp	r7, #0
 8003922:	460c      	mov	r4, r1
 8003924:	4619      	mov	r1, r3
 8003926:	463b      	mov	r3, r7
 8003928:	bfbb      	ittet	lt
 800392a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800392e:	461f      	movlt	r7, r3
 8003930:	2300      	movge	r3, #0
 8003932:	232d      	movlt	r3, #45	@ 0x2d
 8003934:	700b      	strb	r3, [r1, #0]
 8003936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003938:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800393c:	4691      	mov	r9, r2
 800393e:	f023 0820 	bic.w	r8, r3, #32
 8003942:	bfbc      	itt	lt
 8003944:	4632      	movlt	r2, r6
 8003946:	4616      	movlt	r6, r2
 8003948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800394c:	d005      	beq.n	800395a <__cvt+0x42>
 800394e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003952:	d100      	bne.n	8003956 <__cvt+0x3e>
 8003954:	3401      	adds	r4, #1
 8003956:	2102      	movs	r1, #2
 8003958:	e000      	b.n	800395c <__cvt+0x44>
 800395a:	2103      	movs	r1, #3
 800395c:	ab03      	add	r3, sp, #12
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	ab02      	add	r3, sp, #8
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	ec47 6b10 	vmov	d0, r6, r7
 8003968:	4653      	mov	r3, sl
 800396a:	4622      	mov	r2, r4
 800396c:	f000 fe5c 	bl	8004628 <_dtoa_r>
 8003970:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003974:	4605      	mov	r5, r0
 8003976:	d119      	bne.n	80039ac <__cvt+0x94>
 8003978:	f019 0f01 	tst.w	r9, #1
 800397c:	d00e      	beq.n	800399c <__cvt+0x84>
 800397e:	eb00 0904 	add.w	r9, r0, r4
 8003982:	2200      	movs	r2, #0
 8003984:	2300      	movs	r3, #0
 8003986:	4630      	mov	r0, r6
 8003988:	4639      	mov	r1, r7
 800398a:	f7fd f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800398e:	b108      	cbz	r0, 8003994 <__cvt+0x7c>
 8003990:	f8cd 900c 	str.w	r9, [sp, #12]
 8003994:	2230      	movs	r2, #48	@ 0x30
 8003996:	9b03      	ldr	r3, [sp, #12]
 8003998:	454b      	cmp	r3, r9
 800399a:	d31e      	bcc.n	80039da <__cvt+0xc2>
 800399c:	9b03      	ldr	r3, [sp, #12]
 800399e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80039a0:	1b5b      	subs	r3, r3, r5
 80039a2:	4628      	mov	r0, r5
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	b004      	add	sp, #16
 80039a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80039b0:	eb00 0904 	add.w	r9, r0, r4
 80039b4:	d1e5      	bne.n	8003982 <__cvt+0x6a>
 80039b6:	7803      	ldrb	r3, [r0, #0]
 80039b8:	2b30      	cmp	r3, #48	@ 0x30
 80039ba:	d10a      	bne.n	80039d2 <__cvt+0xba>
 80039bc:	2200      	movs	r2, #0
 80039be:	2300      	movs	r3, #0
 80039c0:	4630      	mov	r0, r6
 80039c2:	4639      	mov	r1, r7
 80039c4:	f7fd f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80039c8:	b918      	cbnz	r0, 80039d2 <__cvt+0xba>
 80039ca:	f1c4 0401 	rsb	r4, r4, #1
 80039ce:	f8ca 4000 	str.w	r4, [sl]
 80039d2:	f8da 3000 	ldr.w	r3, [sl]
 80039d6:	4499      	add	r9, r3
 80039d8:	e7d3      	b.n	8003982 <__cvt+0x6a>
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	9103      	str	r1, [sp, #12]
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e7d9      	b.n	8003996 <__cvt+0x7e>

080039e2 <__exponent>:
 80039e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039e4:	2900      	cmp	r1, #0
 80039e6:	bfba      	itte	lt
 80039e8:	4249      	neglt	r1, r1
 80039ea:	232d      	movlt	r3, #45	@ 0x2d
 80039ec:	232b      	movge	r3, #43	@ 0x2b
 80039ee:	2909      	cmp	r1, #9
 80039f0:	7002      	strb	r2, [r0, #0]
 80039f2:	7043      	strb	r3, [r0, #1]
 80039f4:	dd29      	ble.n	8003a4a <__exponent+0x68>
 80039f6:	f10d 0307 	add.w	r3, sp, #7
 80039fa:	461d      	mov	r5, r3
 80039fc:	270a      	movs	r7, #10
 80039fe:	461a      	mov	r2, r3
 8003a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8003a04:	fb07 1416 	mls	r4, r7, r6, r1
 8003a08:	3430      	adds	r4, #48	@ 0x30
 8003a0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003a0e:	460c      	mov	r4, r1
 8003a10:	2c63      	cmp	r4, #99	@ 0x63
 8003a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a16:	4631      	mov	r1, r6
 8003a18:	dcf1      	bgt.n	80039fe <__exponent+0x1c>
 8003a1a:	3130      	adds	r1, #48	@ 0x30
 8003a1c:	1e94      	subs	r4, r2, #2
 8003a1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a22:	1c41      	adds	r1, r0, #1
 8003a24:	4623      	mov	r3, r4
 8003a26:	42ab      	cmp	r3, r5
 8003a28:	d30a      	bcc.n	8003a40 <__exponent+0x5e>
 8003a2a:	f10d 0309 	add.w	r3, sp, #9
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	42ac      	cmp	r4, r5
 8003a32:	bf88      	it	hi
 8003a34:	2300      	movhi	r3, #0
 8003a36:	3302      	adds	r3, #2
 8003a38:	4403      	add	r3, r0
 8003a3a:	1a18      	subs	r0, r3, r0
 8003a3c:	b003      	add	sp, #12
 8003a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003a44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003a48:	e7ed      	b.n	8003a26 <__exponent+0x44>
 8003a4a:	2330      	movs	r3, #48	@ 0x30
 8003a4c:	3130      	adds	r1, #48	@ 0x30
 8003a4e:	7083      	strb	r3, [r0, #2]
 8003a50:	70c1      	strb	r1, [r0, #3]
 8003a52:	1d03      	adds	r3, r0, #4
 8003a54:	e7f1      	b.n	8003a3a <__exponent+0x58>
	...

08003a58 <_printf_float>:
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	b08d      	sub	sp, #52	@ 0x34
 8003a5e:	460c      	mov	r4, r1
 8003a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003a64:	4616      	mov	r6, r2
 8003a66:	461f      	mov	r7, r3
 8003a68:	4605      	mov	r5, r0
 8003a6a:	f000 fcdb 	bl	8004424 <_localeconv_r>
 8003a6e:	6803      	ldr	r3, [r0, #0]
 8003a70:	9304      	str	r3, [sp, #16]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fbfc 	bl	8000270 <strlen>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a80:	9005      	str	r0, [sp, #20]
 8003a82:	3307      	adds	r3, #7
 8003a84:	f023 0307 	bic.w	r3, r3, #7
 8003a88:	f103 0208 	add.w	r2, r3, #8
 8003a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003a90:	f8d4 b000 	ldr.w	fp, [r4]
 8003a94:	f8c8 2000 	str.w	r2, [r8]
 8003a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003aa0:	9307      	str	r3, [sp, #28]
 8003aa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8003aa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003aae:	4b9c      	ldr	r3, [pc, #624]	@ (8003d20 <_printf_float+0x2c8>)
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab4:	f7fd f83a 	bl	8000b2c <__aeabi_dcmpun>
 8003ab8:	bb70      	cbnz	r0, 8003b18 <_printf_float+0xc0>
 8003aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003abe:	4b98      	ldr	r3, [pc, #608]	@ (8003d20 <_printf_float+0x2c8>)
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac4:	f7fd f814 	bl	8000af0 <__aeabi_dcmple>
 8003ac8:	bb30      	cbnz	r0, 8003b18 <_printf_float+0xc0>
 8003aca:	2200      	movs	r2, #0
 8003acc:	2300      	movs	r3, #0
 8003ace:	4640      	mov	r0, r8
 8003ad0:	4649      	mov	r1, r9
 8003ad2:	f7fd f803 	bl	8000adc <__aeabi_dcmplt>
 8003ad6:	b110      	cbz	r0, 8003ade <_printf_float+0x86>
 8003ad8:	232d      	movs	r3, #45	@ 0x2d
 8003ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ade:	4a91      	ldr	r2, [pc, #580]	@ (8003d24 <_printf_float+0x2cc>)
 8003ae0:	4b91      	ldr	r3, [pc, #580]	@ (8003d28 <_printf_float+0x2d0>)
 8003ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003ae6:	bf94      	ite	ls
 8003ae8:	4690      	movls	r8, r2
 8003aea:	4698      	movhi	r8, r3
 8003aec:	2303      	movs	r3, #3
 8003aee:	6123      	str	r3, [r4, #16]
 8003af0:	f02b 0304 	bic.w	r3, fp, #4
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	f04f 0900 	mov.w	r9, #0
 8003afa:	9700      	str	r7, [sp, #0]
 8003afc:	4633      	mov	r3, r6
 8003afe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003b00:	4621      	mov	r1, r4
 8003b02:	4628      	mov	r0, r5
 8003b04:	f000 f9d2 	bl	8003eac <_printf_common>
 8003b08:	3001      	adds	r0, #1
 8003b0a:	f040 808d 	bne.w	8003c28 <_printf_float+0x1d0>
 8003b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b12:	b00d      	add	sp, #52	@ 0x34
 8003b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	4649      	mov	r1, r9
 8003b20:	f7fd f804 	bl	8000b2c <__aeabi_dcmpun>
 8003b24:	b140      	cbz	r0, 8003b38 <_printf_float+0xe0>
 8003b26:	464b      	mov	r3, r9
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bfbc      	itt	lt
 8003b2c:	232d      	movlt	r3, #45	@ 0x2d
 8003b2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003b32:	4a7e      	ldr	r2, [pc, #504]	@ (8003d2c <_printf_float+0x2d4>)
 8003b34:	4b7e      	ldr	r3, [pc, #504]	@ (8003d30 <_printf_float+0x2d8>)
 8003b36:	e7d4      	b.n	8003ae2 <_printf_float+0x8a>
 8003b38:	6863      	ldr	r3, [r4, #4]
 8003b3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003b3e:	9206      	str	r2, [sp, #24]
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	d13b      	bne.n	8003bbc <_printf_float+0x164>
 8003b44:	2306      	movs	r3, #6
 8003b46:	6063      	str	r3, [r4, #4]
 8003b48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6022      	str	r2, [r4, #0]
 8003b50:	9303      	str	r3, [sp, #12]
 8003b52:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003b58:	ab09      	add	r3, sp, #36	@ 0x24
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	6861      	ldr	r1, [r4, #4]
 8003b5e:	ec49 8b10 	vmov	d0, r8, r9
 8003b62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003b66:	4628      	mov	r0, r5
 8003b68:	f7ff fed6 	bl	8003918 <__cvt>
 8003b6c:	9b06      	ldr	r3, [sp, #24]
 8003b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003b70:	2b47      	cmp	r3, #71	@ 0x47
 8003b72:	4680      	mov	r8, r0
 8003b74:	d129      	bne.n	8003bca <_printf_float+0x172>
 8003b76:	1cc8      	adds	r0, r1, #3
 8003b78:	db02      	blt.n	8003b80 <_printf_float+0x128>
 8003b7a:	6863      	ldr	r3, [r4, #4]
 8003b7c:	4299      	cmp	r1, r3
 8003b7e:	dd41      	ble.n	8003c04 <_printf_float+0x1ac>
 8003b80:	f1aa 0a02 	sub.w	sl, sl, #2
 8003b84:	fa5f fa8a 	uxtb.w	sl, sl
 8003b88:	3901      	subs	r1, #1
 8003b8a:	4652      	mov	r2, sl
 8003b8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003b90:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b92:	f7ff ff26 	bl	80039e2 <__exponent>
 8003b96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b98:	1813      	adds	r3, r2, r0
 8003b9a:	2a01      	cmp	r2, #1
 8003b9c:	4681      	mov	r9, r0
 8003b9e:	6123      	str	r3, [r4, #16]
 8003ba0:	dc02      	bgt.n	8003ba8 <_printf_float+0x150>
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	07d2      	lsls	r2, r2, #31
 8003ba6:	d501      	bpl.n	8003bac <_printf_float+0x154>
 8003ba8:	3301      	adds	r3, #1
 8003baa:	6123      	str	r3, [r4, #16]
 8003bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0a2      	beq.n	8003afa <_printf_float+0xa2>
 8003bb4:	232d      	movs	r3, #45	@ 0x2d
 8003bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bba:	e79e      	b.n	8003afa <_printf_float+0xa2>
 8003bbc:	9a06      	ldr	r2, [sp, #24]
 8003bbe:	2a47      	cmp	r2, #71	@ 0x47
 8003bc0:	d1c2      	bne.n	8003b48 <_printf_float+0xf0>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1c0      	bne.n	8003b48 <_printf_float+0xf0>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e7bd      	b.n	8003b46 <_printf_float+0xee>
 8003bca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003bce:	d9db      	bls.n	8003b88 <_printf_float+0x130>
 8003bd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003bd4:	d118      	bne.n	8003c08 <_printf_float+0x1b0>
 8003bd6:	2900      	cmp	r1, #0
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	dd0b      	ble.n	8003bf4 <_printf_float+0x19c>
 8003bdc:	6121      	str	r1, [r4, #16]
 8003bde:	b913      	cbnz	r3, 8003be6 <_printf_float+0x18e>
 8003be0:	6822      	ldr	r2, [r4, #0]
 8003be2:	07d0      	lsls	r0, r2, #31
 8003be4:	d502      	bpl.n	8003bec <_printf_float+0x194>
 8003be6:	3301      	adds	r3, #1
 8003be8:	440b      	add	r3, r1
 8003bea:	6123      	str	r3, [r4, #16]
 8003bec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003bee:	f04f 0900 	mov.w	r9, #0
 8003bf2:	e7db      	b.n	8003bac <_printf_float+0x154>
 8003bf4:	b913      	cbnz	r3, 8003bfc <_printf_float+0x1a4>
 8003bf6:	6822      	ldr	r2, [r4, #0]
 8003bf8:	07d2      	lsls	r2, r2, #31
 8003bfa:	d501      	bpl.n	8003c00 <_printf_float+0x1a8>
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	e7f4      	b.n	8003bea <_printf_float+0x192>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e7f2      	b.n	8003bea <_printf_float+0x192>
 8003c04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c0a:	4299      	cmp	r1, r3
 8003c0c:	db05      	blt.n	8003c1a <_printf_float+0x1c2>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	6121      	str	r1, [r4, #16]
 8003c12:	07d8      	lsls	r0, r3, #31
 8003c14:	d5ea      	bpl.n	8003bec <_printf_float+0x194>
 8003c16:	1c4b      	adds	r3, r1, #1
 8003c18:	e7e7      	b.n	8003bea <_printf_float+0x192>
 8003c1a:	2900      	cmp	r1, #0
 8003c1c:	bfd4      	ite	le
 8003c1e:	f1c1 0202 	rsble	r2, r1, #2
 8003c22:	2201      	movgt	r2, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	e7e0      	b.n	8003bea <_printf_float+0x192>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	055a      	lsls	r2, r3, #21
 8003c2c:	d407      	bmi.n	8003c3e <_printf_float+0x1e6>
 8003c2e:	6923      	ldr	r3, [r4, #16]
 8003c30:	4642      	mov	r2, r8
 8003c32:	4631      	mov	r1, r6
 8003c34:	4628      	mov	r0, r5
 8003c36:	47b8      	blx	r7
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d12b      	bne.n	8003c94 <_printf_float+0x23c>
 8003c3c:	e767      	b.n	8003b0e <_printf_float+0xb6>
 8003c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c42:	f240 80dd 	bls.w	8003e00 <_printf_float+0x3a8>
 8003c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f7fc ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d033      	beq.n	8003cbe <_printf_float+0x266>
 8003c56:	4a37      	ldr	r2, [pc, #220]	@ (8003d34 <_printf_float+0x2dc>)
 8003c58:	2301      	movs	r3, #1
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	47b8      	blx	r7
 8003c60:	3001      	adds	r0, #1
 8003c62:	f43f af54 	beq.w	8003b0e <_printf_float+0xb6>
 8003c66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003c6a:	4543      	cmp	r3, r8
 8003c6c:	db02      	blt.n	8003c74 <_printf_float+0x21c>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	07d8      	lsls	r0, r3, #31
 8003c72:	d50f      	bpl.n	8003c94 <_printf_float+0x23c>
 8003c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c78:	4631      	mov	r1, r6
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	47b8      	blx	r7
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f43f af45 	beq.w	8003b0e <_printf_float+0xb6>
 8003c84:	f04f 0900 	mov.w	r9, #0
 8003c88:	f108 38ff 	add.w	r8, r8, #4294967295
 8003c8c:	f104 0a1a 	add.w	sl, r4, #26
 8003c90:	45c8      	cmp	r8, r9
 8003c92:	dc09      	bgt.n	8003ca8 <_printf_float+0x250>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	079b      	lsls	r3, r3, #30
 8003c98:	f100 8103 	bmi.w	8003ea2 <_printf_float+0x44a>
 8003c9c:	68e0      	ldr	r0, [r4, #12]
 8003c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ca0:	4298      	cmp	r0, r3
 8003ca2:	bfb8      	it	lt
 8003ca4:	4618      	movlt	r0, r3
 8003ca6:	e734      	b.n	8003b12 <_printf_float+0xba>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4652      	mov	r2, sl
 8003cac:	4631      	mov	r1, r6
 8003cae:	4628      	mov	r0, r5
 8003cb0:	47b8      	blx	r7
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	f43f af2b 	beq.w	8003b0e <_printf_float+0xb6>
 8003cb8:	f109 0901 	add.w	r9, r9, #1
 8003cbc:	e7e8      	b.n	8003c90 <_printf_float+0x238>
 8003cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	dc39      	bgt.n	8003d38 <_printf_float+0x2e0>
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d34 <_printf_float+0x2dc>)
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	4631      	mov	r1, r6
 8003cca:	4628      	mov	r0, r5
 8003ccc:	47b8      	blx	r7
 8003cce:	3001      	adds	r0, #1
 8003cd0:	f43f af1d 	beq.w	8003b0e <_printf_float+0xb6>
 8003cd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003cd8:	ea59 0303 	orrs.w	r3, r9, r3
 8003cdc:	d102      	bne.n	8003ce4 <_printf_float+0x28c>
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	07d9      	lsls	r1, r3, #31
 8003ce2:	d5d7      	bpl.n	8003c94 <_printf_float+0x23c>
 8003ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ce8:	4631      	mov	r1, r6
 8003cea:	4628      	mov	r0, r5
 8003cec:	47b8      	blx	r7
 8003cee:	3001      	adds	r0, #1
 8003cf0:	f43f af0d 	beq.w	8003b0e <_printf_float+0xb6>
 8003cf4:	f04f 0a00 	mov.w	sl, #0
 8003cf8:	f104 0b1a 	add.w	fp, r4, #26
 8003cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cfe:	425b      	negs	r3, r3
 8003d00:	4553      	cmp	r3, sl
 8003d02:	dc01      	bgt.n	8003d08 <_printf_float+0x2b0>
 8003d04:	464b      	mov	r3, r9
 8003d06:	e793      	b.n	8003c30 <_printf_float+0x1d8>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	465a      	mov	r2, fp
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4628      	mov	r0, r5
 8003d10:	47b8      	blx	r7
 8003d12:	3001      	adds	r0, #1
 8003d14:	f43f aefb 	beq.w	8003b0e <_printf_float+0xb6>
 8003d18:	f10a 0a01 	add.w	sl, sl, #1
 8003d1c:	e7ee      	b.n	8003cfc <_printf_float+0x2a4>
 8003d1e:	bf00      	nop
 8003d20:	7fefffff 	.word	0x7fefffff
 8003d24:	08006604 	.word	0x08006604
 8003d28:	08006608 	.word	0x08006608
 8003d2c:	0800660c 	.word	0x0800660c
 8003d30:	08006610 	.word	0x08006610
 8003d34:	08006614 	.word	0x08006614
 8003d38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d3e:	4553      	cmp	r3, sl
 8003d40:	bfa8      	it	ge
 8003d42:	4653      	movge	r3, sl
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	4699      	mov	r9, r3
 8003d48:	dc36      	bgt.n	8003db8 <_printf_float+0x360>
 8003d4a:	f04f 0b00 	mov.w	fp, #0
 8003d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d52:	f104 021a 	add.w	r2, r4, #26
 8003d56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d58:	9306      	str	r3, [sp, #24]
 8003d5a:	eba3 0309 	sub.w	r3, r3, r9
 8003d5e:	455b      	cmp	r3, fp
 8003d60:	dc31      	bgt.n	8003dc6 <_printf_float+0x36e>
 8003d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d64:	459a      	cmp	sl, r3
 8003d66:	dc3a      	bgt.n	8003dde <_printf_float+0x386>
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	07da      	lsls	r2, r3, #31
 8003d6c:	d437      	bmi.n	8003dde <_printf_float+0x386>
 8003d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d70:	ebaa 0903 	sub.w	r9, sl, r3
 8003d74:	9b06      	ldr	r3, [sp, #24]
 8003d76:	ebaa 0303 	sub.w	r3, sl, r3
 8003d7a:	4599      	cmp	r9, r3
 8003d7c:	bfa8      	it	ge
 8003d7e:	4699      	movge	r9, r3
 8003d80:	f1b9 0f00 	cmp.w	r9, #0
 8003d84:	dc33      	bgt.n	8003dee <_printf_float+0x396>
 8003d86:	f04f 0800 	mov.w	r8, #0
 8003d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d8e:	f104 0b1a 	add.w	fp, r4, #26
 8003d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d94:	ebaa 0303 	sub.w	r3, sl, r3
 8003d98:	eba3 0309 	sub.w	r3, r3, r9
 8003d9c:	4543      	cmp	r3, r8
 8003d9e:	f77f af79 	ble.w	8003c94 <_printf_float+0x23c>
 8003da2:	2301      	movs	r3, #1
 8003da4:	465a      	mov	r2, fp
 8003da6:	4631      	mov	r1, r6
 8003da8:	4628      	mov	r0, r5
 8003daa:	47b8      	blx	r7
 8003dac:	3001      	adds	r0, #1
 8003dae:	f43f aeae 	beq.w	8003b0e <_printf_float+0xb6>
 8003db2:	f108 0801 	add.w	r8, r8, #1
 8003db6:	e7ec      	b.n	8003d92 <_printf_float+0x33a>
 8003db8:	4642      	mov	r2, r8
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	47b8      	blx	r7
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d1c2      	bne.n	8003d4a <_printf_float+0x2f2>
 8003dc4:	e6a3      	b.n	8003b0e <_printf_float+0xb6>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4631      	mov	r1, r6
 8003dca:	4628      	mov	r0, r5
 8003dcc:	9206      	str	r2, [sp, #24]
 8003dce:	47b8      	blx	r7
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	f43f ae9c 	beq.w	8003b0e <_printf_float+0xb6>
 8003dd6:	9a06      	ldr	r2, [sp, #24]
 8003dd8:	f10b 0b01 	add.w	fp, fp, #1
 8003ddc:	e7bb      	b.n	8003d56 <_printf_float+0x2fe>
 8003dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003de2:	4631      	mov	r1, r6
 8003de4:	4628      	mov	r0, r5
 8003de6:	47b8      	blx	r7
 8003de8:	3001      	adds	r0, #1
 8003dea:	d1c0      	bne.n	8003d6e <_printf_float+0x316>
 8003dec:	e68f      	b.n	8003b0e <_printf_float+0xb6>
 8003dee:	9a06      	ldr	r2, [sp, #24]
 8003df0:	464b      	mov	r3, r9
 8003df2:	4442      	add	r2, r8
 8003df4:	4631      	mov	r1, r6
 8003df6:	4628      	mov	r0, r5
 8003df8:	47b8      	blx	r7
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d1c3      	bne.n	8003d86 <_printf_float+0x32e>
 8003dfe:	e686      	b.n	8003b0e <_printf_float+0xb6>
 8003e00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e04:	f1ba 0f01 	cmp.w	sl, #1
 8003e08:	dc01      	bgt.n	8003e0e <_printf_float+0x3b6>
 8003e0a:	07db      	lsls	r3, r3, #31
 8003e0c:	d536      	bpl.n	8003e7c <_printf_float+0x424>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4642      	mov	r2, r8
 8003e12:	4631      	mov	r1, r6
 8003e14:	4628      	mov	r0, r5
 8003e16:	47b8      	blx	r7
 8003e18:	3001      	adds	r0, #1
 8003e1a:	f43f ae78 	beq.w	8003b0e <_printf_float+0xb6>
 8003e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	47b8      	blx	r7
 8003e28:	3001      	adds	r0, #1
 8003e2a:	f43f ae70 	beq.w	8003b0e <_printf_float+0xb6>
 8003e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e32:	2200      	movs	r2, #0
 8003e34:	2300      	movs	r3, #0
 8003e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e3a:	f7fc fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e3e:	b9c0      	cbnz	r0, 8003e72 <_printf_float+0x41a>
 8003e40:	4653      	mov	r3, sl
 8003e42:	f108 0201 	add.w	r2, r8, #1
 8003e46:	4631      	mov	r1, r6
 8003e48:	4628      	mov	r0, r5
 8003e4a:	47b8      	blx	r7
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d10c      	bne.n	8003e6a <_printf_float+0x412>
 8003e50:	e65d      	b.n	8003b0e <_printf_float+0xb6>
 8003e52:	2301      	movs	r3, #1
 8003e54:	465a      	mov	r2, fp
 8003e56:	4631      	mov	r1, r6
 8003e58:	4628      	mov	r0, r5
 8003e5a:	47b8      	blx	r7
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	f43f ae56 	beq.w	8003b0e <_printf_float+0xb6>
 8003e62:	f108 0801 	add.w	r8, r8, #1
 8003e66:	45d0      	cmp	r8, sl
 8003e68:	dbf3      	blt.n	8003e52 <_printf_float+0x3fa>
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003e70:	e6df      	b.n	8003c32 <_printf_float+0x1da>
 8003e72:	f04f 0800 	mov.w	r8, #0
 8003e76:	f104 0b1a 	add.w	fp, r4, #26
 8003e7a:	e7f4      	b.n	8003e66 <_printf_float+0x40e>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	4642      	mov	r2, r8
 8003e80:	e7e1      	b.n	8003e46 <_printf_float+0x3ee>
 8003e82:	2301      	movs	r3, #1
 8003e84:	464a      	mov	r2, r9
 8003e86:	4631      	mov	r1, r6
 8003e88:	4628      	mov	r0, r5
 8003e8a:	47b8      	blx	r7
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	f43f ae3e 	beq.w	8003b0e <_printf_float+0xb6>
 8003e92:	f108 0801 	add.w	r8, r8, #1
 8003e96:	68e3      	ldr	r3, [r4, #12]
 8003e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003e9a:	1a5b      	subs	r3, r3, r1
 8003e9c:	4543      	cmp	r3, r8
 8003e9e:	dcf0      	bgt.n	8003e82 <_printf_float+0x42a>
 8003ea0:	e6fc      	b.n	8003c9c <_printf_float+0x244>
 8003ea2:	f04f 0800 	mov.w	r8, #0
 8003ea6:	f104 0919 	add.w	r9, r4, #25
 8003eaa:	e7f4      	b.n	8003e96 <_printf_float+0x43e>

08003eac <_printf_common>:
 8003eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	4698      	mov	r8, r3
 8003eb4:	688a      	ldr	r2, [r1, #8]
 8003eb6:	690b      	ldr	r3, [r1, #16]
 8003eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bfb8      	it	lt
 8003ec0:	4613      	movlt	r3, r2
 8003ec2:	6033      	str	r3, [r6, #0]
 8003ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ec8:	4607      	mov	r7, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	b10a      	cbz	r2, 8003ed2 <_printf_common+0x26>
 8003ece:	3301      	adds	r3, #1
 8003ed0:	6033      	str	r3, [r6, #0]
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	0699      	lsls	r1, r3, #26
 8003ed6:	bf42      	ittt	mi
 8003ed8:	6833      	ldrmi	r3, [r6, #0]
 8003eda:	3302      	addmi	r3, #2
 8003edc:	6033      	strmi	r3, [r6, #0]
 8003ede:	6825      	ldr	r5, [r4, #0]
 8003ee0:	f015 0506 	ands.w	r5, r5, #6
 8003ee4:	d106      	bne.n	8003ef4 <_printf_common+0x48>
 8003ee6:	f104 0a19 	add.w	sl, r4, #25
 8003eea:	68e3      	ldr	r3, [r4, #12]
 8003eec:	6832      	ldr	r2, [r6, #0]
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	42ab      	cmp	r3, r5
 8003ef2:	dc26      	bgt.n	8003f42 <_printf_common+0x96>
 8003ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ef8:	6822      	ldr	r2, [r4, #0]
 8003efa:	3b00      	subs	r3, #0
 8003efc:	bf18      	it	ne
 8003efe:	2301      	movne	r3, #1
 8003f00:	0692      	lsls	r2, r2, #26
 8003f02:	d42b      	bmi.n	8003f5c <_printf_common+0xb0>
 8003f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f08:	4641      	mov	r1, r8
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	47c8      	blx	r9
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d01e      	beq.n	8003f50 <_printf_common+0xa4>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	6922      	ldr	r2, [r4, #16]
 8003f16:	f003 0306 	and.w	r3, r3, #6
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	bf02      	ittt	eq
 8003f1e:	68e5      	ldreq	r5, [r4, #12]
 8003f20:	6833      	ldreq	r3, [r6, #0]
 8003f22:	1aed      	subeq	r5, r5, r3
 8003f24:	68a3      	ldr	r3, [r4, #8]
 8003f26:	bf0c      	ite	eq
 8003f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f2c:	2500      	movne	r5, #0
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	bfc4      	itt	gt
 8003f32:	1a9b      	subgt	r3, r3, r2
 8003f34:	18ed      	addgt	r5, r5, r3
 8003f36:	2600      	movs	r6, #0
 8003f38:	341a      	adds	r4, #26
 8003f3a:	42b5      	cmp	r5, r6
 8003f3c:	d11a      	bne.n	8003f74 <_printf_common+0xc8>
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e008      	b.n	8003f54 <_printf_common+0xa8>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4652      	mov	r2, sl
 8003f46:	4641      	mov	r1, r8
 8003f48:	4638      	mov	r0, r7
 8003f4a:	47c8      	blx	r9
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d103      	bne.n	8003f58 <_printf_common+0xac>
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f58:	3501      	adds	r5, #1
 8003f5a:	e7c6      	b.n	8003eea <_printf_common+0x3e>
 8003f5c:	18e1      	adds	r1, r4, r3
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	2030      	movs	r0, #48	@ 0x30
 8003f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f66:	4422      	add	r2, r4
 8003f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f70:	3302      	adds	r3, #2
 8003f72:	e7c7      	b.n	8003f04 <_printf_common+0x58>
 8003f74:	2301      	movs	r3, #1
 8003f76:	4622      	mov	r2, r4
 8003f78:	4641      	mov	r1, r8
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c8      	blx	r9
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d0e6      	beq.n	8003f50 <_printf_common+0xa4>
 8003f82:	3601      	adds	r6, #1
 8003f84:	e7d9      	b.n	8003f3a <_printf_common+0x8e>
	...

08003f88 <_printf_i>:
 8003f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	7e0f      	ldrb	r7, [r1, #24]
 8003f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f90:	2f78      	cmp	r7, #120	@ 0x78
 8003f92:	4691      	mov	r9, r2
 8003f94:	4680      	mov	r8, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	469a      	mov	sl, r3
 8003f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f9e:	d807      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fa0:	2f62      	cmp	r7, #98	@ 0x62
 8003fa2:	d80a      	bhi.n	8003fba <_printf_i+0x32>
 8003fa4:	2f00      	cmp	r7, #0
 8003fa6:	f000 80d2 	beq.w	800414e <_printf_i+0x1c6>
 8003faa:	2f58      	cmp	r7, #88	@ 0x58
 8003fac:	f000 80b9 	beq.w	8004122 <_printf_i+0x19a>
 8003fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fb8:	e03a      	b.n	8004030 <_printf_i+0xa8>
 8003fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fbe:	2b15      	cmp	r3, #21
 8003fc0:	d8f6      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8003fc8 <_printf_i+0x40>)
 8003fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004035 	.word	0x08004035
 8003fd0:	08003fb1 	.word	0x08003fb1
 8003fd4:	08003fb1 	.word	0x08003fb1
 8003fd8:	08003fb1 	.word	0x08003fb1
 8003fdc:	08003fb1 	.word	0x08003fb1
 8003fe0:	08004035 	.word	0x08004035
 8003fe4:	08003fb1 	.word	0x08003fb1
 8003fe8:	08003fb1 	.word	0x08003fb1
 8003fec:	08003fb1 	.word	0x08003fb1
 8003ff0:	08003fb1 	.word	0x08003fb1
 8003ff4:	08004135 	.word	0x08004135
 8003ff8:	0800405f 	.word	0x0800405f
 8003ffc:	080040ef 	.word	0x080040ef
 8004000:	08003fb1 	.word	0x08003fb1
 8004004:	08003fb1 	.word	0x08003fb1
 8004008:	08004157 	.word	0x08004157
 800400c:	08003fb1 	.word	0x08003fb1
 8004010:	0800405f 	.word	0x0800405f
 8004014:	08003fb1 	.word	0x08003fb1
 8004018:	08003fb1 	.word	0x08003fb1
 800401c:	080040f7 	.word	0x080040f7
 8004020:	6833      	ldr	r3, [r6, #0]
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6032      	str	r2, [r6, #0]
 8004028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800402c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004030:	2301      	movs	r3, #1
 8004032:	e09d      	b.n	8004170 <_printf_i+0x1e8>
 8004034:	6833      	ldr	r3, [r6, #0]
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	1d19      	adds	r1, r3, #4
 800403a:	6031      	str	r1, [r6, #0]
 800403c:	0606      	lsls	r6, r0, #24
 800403e:	d501      	bpl.n	8004044 <_printf_i+0xbc>
 8004040:	681d      	ldr	r5, [r3, #0]
 8004042:	e003      	b.n	800404c <_printf_i+0xc4>
 8004044:	0645      	lsls	r5, r0, #25
 8004046:	d5fb      	bpl.n	8004040 <_printf_i+0xb8>
 8004048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800404c:	2d00      	cmp	r5, #0
 800404e:	da03      	bge.n	8004058 <_printf_i+0xd0>
 8004050:	232d      	movs	r3, #45	@ 0x2d
 8004052:	426d      	negs	r5, r5
 8004054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004058:	4859      	ldr	r0, [pc, #356]	@ (80041c0 <_printf_i+0x238>)
 800405a:	230a      	movs	r3, #10
 800405c:	e011      	b.n	8004082 <_printf_i+0xfa>
 800405e:	6821      	ldr	r1, [r4, #0]
 8004060:	6833      	ldr	r3, [r6, #0]
 8004062:	0608      	lsls	r0, r1, #24
 8004064:	f853 5b04 	ldr.w	r5, [r3], #4
 8004068:	d402      	bmi.n	8004070 <_printf_i+0xe8>
 800406a:	0649      	lsls	r1, r1, #25
 800406c:	bf48      	it	mi
 800406e:	b2ad      	uxthmi	r5, r5
 8004070:	2f6f      	cmp	r7, #111	@ 0x6f
 8004072:	4853      	ldr	r0, [pc, #332]	@ (80041c0 <_printf_i+0x238>)
 8004074:	6033      	str	r3, [r6, #0]
 8004076:	bf14      	ite	ne
 8004078:	230a      	movne	r3, #10
 800407a:	2308      	moveq	r3, #8
 800407c:	2100      	movs	r1, #0
 800407e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004082:	6866      	ldr	r6, [r4, #4]
 8004084:	60a6      	str	r6, [r4, #8]
 8004086:	2e00      	cmp	r6, #0
 8004088:	bfa2      	ittt	ge
 800408a:	6821      	ldrge	r1, [r4, #0]
 800408c:	f021 0104 	bicge.w	r1, r1, #4
 8004090:	6021      	strge	r1, [r4, #0]
 8004092:	b90d      	cbnz	r5, 8004098 <_printf_i+0x110>
 8004094:	2e00      	cmp	r6, #0
 8004096:	d04b      	beq.n	8004130 <_printf_i+0x1a8>
 8004098:	4616      	mov	r6, r2
 800409a:	fbb5 f1f3 	udiv	r1, r5, r3
 800409e:	fb03 5711 	mls	r7, r3, r1, r5
 80040a2:	5dc7      	ldrb	r7, [r0, r7]
 80040a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040a8:	462f      	mov	r7, r5
 80040aa:	42bb      	cmp	r3, r7
 80040ac:	460d      	mov	r5, r1
 80040ae:	d9f4      	bls.n	800409a <_printf_i+0x112>
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d10b      	bne.n	80040cc <_printf_i+0x144>
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	07df      	lsls	r7, r3, #31
 80040b8:	d508      	bpl.n	80040cc <_printf_i+0x144>
 80040ba:	6923      	ldr	r3, [r4, #16]
 80040bc:	6861      	ldr	r1, [r4, #4]
 80040be:	4299      	cmp	r1, r3
 80040c0:	bfde      	ittt	le
 80040c2:	2330      	movle	r3, #48	@ 0x30
 80040c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040cc:	1b92      	subs	r2, r2, r6
 80040ce:	6122      	str	r2, [r4, #16]
 80040d0:	f8cd a000 	str.w	sl, [sp]
 80040d4:	464b      	mov	r3, r9
 80040d6:	aa03      	add	r2, sp, #12
 80040d8:	4621      	mov	r1, r4
 80040da:	4640      	mov	r0, r8
 80040dc:	f7ff fee6 	bl	8003eac <_printf_common>
 80040e0:	3001      	adds	r0, #1
 80040e2:	d14a      	bne.n	800417a <_printf_i+0x1f2>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	b004      	add	sp, #16
 80040ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	f043 0320 	orr.w	r3, r3, #32
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	4833      	ldr	r0, [pc, #204]	@ (80041c4 <_printf_i+0x23c>)
 80040f8:	2778      	movs	r7, #120	@ 0x78
 80040fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	6831      	ldr	r1, [r6, #0]
 8004102:	061f      	lsls	r7, r3, #24
 8004104:	f851 5b04 	ldr.w	r5, [r1], #4
 8004108:	d402      	bmi.n	8004110 <_printf_i+0x188>
 800410a:	065f      	lsls	r7, r3, #25
 800410c:	bf48      	it	mi
 800410e:	b2ad      	uxthmi	r5, r5
 8004110:	6031      	str	r1, [r6, #0]
 8004112:	07d9      	lsls	r1, r3, #31
 8004114:	bf44      	itt	mi
 8004116:	f043 0320 	orrmi.w	r3, r3, #32
 800411a:	6023      	strmi	r3, [r4, #0]
 800411c:	b11d      	cbz	r5, 8004126 <_printf_i+0x19e>
 800411e:	2310      	movs	r3, #16
 8004120:	e7ac      	b.n	800407c <_printf_i+0xf4>
 8004122:	4827      	ldr	r0, [pc, #156]	@ (80041c0 <_printf_i+0x238>)
 8004124:	e7e9      	b.n	80040fa <_printf_i+0x172>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	f023 0320 	bic.w	r3, r3, #32
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	e7f6      	b.n	800411e <_printf_i+0x196>
 8004130:	4616      	mov	r6, r2
 8004132:	e7bd      	b.n	80040b0 <_printf_i+0x128>
 8004134:	6833      	ldr	r3, [r6, #0]
 8004136:	6825      	ldr	r5, [r4, #0]
 8004138:	6961      	ldr	r1, [r4, #20]
 800413a:	1d18      	adds	r0, r3, #4
 800413c:	6030      	str	r0, [r6, #0]
 800413e:	062e      	lsls	r6, r5, #24
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	d501      	bpl.n	8004148 <_printf_i+0x1c0>
 8004144:	6019      	str	r1, [r3, #0]
 8004146:	e002      	b.n	800414e <_printf_i+0x1c6>
 8004148:	0668      	lsls	r0, r5, #25
 800414a:	d5fb      	bpl.n	8004144 <_printf_i+0x1bc>
 800414c:	8019      	strh	r1, [r3, #0]
 800414e:	2300      	movs	r3, #0
 8004150:	6123      	str	r3, [r4, #16]
 8004152:	4616      	mov	r6, r2
 8004154:	e7bc      	b.n	80040d0 <_printf_i+0x148>
 8004156:	6833      	ldr	r3, [r6, #0]
 8004158:	1d1a      	adds	r2, r3, #4
 800415a:	6032      	str	r2, [r6, #0]
 800415c:	681e      	ldr	r6, [r3, #0]
 800415e:	6862      	ldr	r2, [r4, #4]
 8004160:	2100      	movs	r1, #0
 8004162:	4630      	mov	r0, r6
 8004164:	f7fc f834 	bl	80001d0 <memchr>
 8004168:	b108      	cbz	r0, 800416e <_printf_i+0x1e6>
 800416a:	1b80      	subs	r0, r0, r6
 800416c:	6060      	str	r0, [r4, #4]
 800416e:	6863      	ldr	r3, [r4, #4]
 8004170:	6123      	str	r3, [r4, #16]
 8004172:	2300      	movs	r3, #0
 8004174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004178:	e7aa      	b.n	80040d0 <_printf_i+0x148>
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	4632      	mov	r2, r6
 800417e:	4649      	mov	r1, r9
 8004180:	4640      	mov	r0, r8
 8004182:	47d0      	blx	sl
 8004184:	3001      	adds	r0, #1
 8004186:	d0ad      	beq.n	80040e4 <_printf_i+0x15c>
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	079b      	lsls	r3, r3, #30
 800418c:	d413      	bmi.n	80041b6 <_printf_i+0x22e>
 800418e:	68e0      	ldr	r0, [r4, #12]
 8004190:	9b03      	ldr	r3, [sp, #12]
 8004192:	4298      	cmp	r0, r3
 8004194:	bfb8      	it	lt
 8004196:	4618      	movlt	r0, r3
 8004198:	e7a6      	b.n	80040e8 <_printf_i+0x160>
 800419a:	2301      	movs	r3, #1
 800419c:	4632      	mov	r2, r6
 800419e:	4649      	mov	r1, r9
 80041a0:	4640      	mov	r0, r8
 80041a2:	47d0      	blx	sl
 80041a4:	3001      	adds	r0, #1
 80041a6:	d09d      	beq.n	80040e4 <_printf_i+0x15c>
 80041a8:	3501      	adds	r5, #1
 80041aa:	68e3      	ldr	r3, [r4, #12]
 80041ac:	9903      	ldr	r1, [sp, #12]
 80041ae:	1a5b      	subs	r3, r3, r1
 80041b0:	42ab      	cmp	r3, r5
 80041b2:	dcf2      	bgt.n	800419a <_printf_i+0x212>
 80041b4:	e7eb      	b.n	800418e <_printf_i+0x206>
 80041b6:	2500      	movs	r5, #0
 80041b8:	f104 0619 	add.w	r6, r4, #25
 80041bc:	e7f5      	b.n	80041aa <_printf_i+0x222>
 80041be:	bf00      	nop
 80041c0:	08006616 	.word	0x08006616
 80041c4:	08006627 	.word	0x08006627

080041c8 <std>:
 80041c8:	2300      	movs	r3, #0
 80041ca:	b510      	push	{r4, lr}
 80041cc:	4604      	mov	r4, r0
 80041ce:	e9c0 3300 	strd	r3, r3, [r0]
 80041d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041d6:	6083      	str	r3, [r0, #8]
 80041d8:	8181      	strh	r1, [r0, #12]
 80041da:	6643      	str	r3, [r0, #100]	@ 0x64
 80041dc:	81c2      	strh	r2, [r0, #14]
 80041de:	6183      	str	r3, [r0, #24]
 80041e0:	4619      	mov	r1, r3
 80041e2:	2208      	movs	r2, #8
 80041e4:	305c      	adds	r0, #92	@ 0x5c
 80041e6:	f000 f914 	bl	8004412 <memset>
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <std+0x58>)
 80041ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80041ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004224 <std+0x5c>)
 80041f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <std+0x60>)
 80041f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <std+0x64>)
 80041f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80041fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004230 <std+0x68>)
 80041fc:	6224      	str	r4, [r4, #32]
 80041fe:	429c      	cmp	r4, r3
 8004200:	d006      	beq.n	8004210 <std+0x48>
 8004202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004206:	4294      	cmp	r4, r2
 8004208:	d002      	beq.n	8004210 <std+0x48>
 800420a:	33d0      	adds	r3, #208	@ 0xd0
 800420c:	429c      	cmp	r4, r3
 800420e:	d105      	bne.n	800421c <std+0x54>
 8004210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004218:	f000 b978 	b.w	800450c <__retarget_lock_init_recursive>
 800421c:	bd10      	pop	{r4, pc}
 800421e:	bf00      	nop
 8004220:	0800438d 	.word	0x0800438d
 8004224:	080043af 	.word	0x080043af
 8004228:	080043e7 	.word	0x080043e7
 800422c:	0800440b 	.word	0x0800440b
 8004230:	200002ac 	.word	0x200002ac

08004234 <stdio_exit_handler>:
 8004234:	4a02      	ldr	r2, [pc, #8]	@ (8004240 <stdio_exit_handler+0xc>)
 8004236:	4903      	ldr	r1, [pc, #12]	@ (8004244 <stdio_exit_handler+0x10>)
 8004238:	4803      	ldr	r0, [pc, #12]	@ (8004248 <stdio_exit_handler+0x14>)
 800423a:	f000 b869 	b.w	8004310 <_fwalk_sglue>
 800423e:	bf00      	nop
 8004240:	2000000c 	.word	0x2000000c
 8004244:	08005e6d 	.word	0x08005e6d
 8004248:	2000001c 	.word	0x2000001c

0800424c <cleanup_stdio>:
 800424c:	6841      	ldr	r1, [r0, #4]
 800424e:	4b0c      	ldr	r3, [pc, #48]	@ (8004280 <cleanup_stdio+0x34>)
 8004250:	4299      	cmp	r1, r3
 8004252:	b510      	push	{r4, lr}
 8004254:	4604      	mov	r4, r0
 8004256:	d001      	beq.n	800425c <cleanup_stdio+0x10>
 8004258:	f001 fe08 	bl	8005e6c <_fflush_r>
 800425c:	68a1      	ldr	r1, [r4, #8]
 800425e:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <cleanup_stdio+0x38>)
 8004260:	4299      	cmp	r1, r3
 8004262:	d002      	beq.n	800426a <cleanup_stdio+0x1e>
 8004264:	4620      	mov	r0, r4
 8004266:	f001 fe01 	bl	8005e6c <_fflush_r>
 800426a:	68e1      	ldr	r1, [r4, #12]
 800426c:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <cleanup_stdio+0x3c>)
 800426e:	4299      	cmp	r1, r3
 8004270:	d004      	beq.n	800427c <cleanup_stdio+0x30>
 8004272:	4620      	mov	r0, r4
 8004274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004278:	f001 bdf8 	b.w	8005e6c <_fflush_r>
 800427c:	bd10      	pop	{r4, pc}
 800427e:	bf00      	nop
 8004280:	200002ac 	.word	0x200002ac
 8004284:	20000314 	.word	0x20000314
 8004288:	2000037c 	.word	0x2000037c

0800428c <global_stdio_init.part.0>:
 800428c:	b510      	push	{r4, lr}
 800428e:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <global_stdio_init.part.0+0x30>)
 8004290:	4c0b      	ldr	r4, [pc, #44]	@ (80042c0 <global_stdio_init.part.0+0x34>)
 8004292:	4a0c      	ldr	r2, [pc, #48]	@ (80042c4 <global_stdio_init.part.0+0x38>)
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	4620      	mov	r0, r4
 8004298:	2200      	movs	r2, #0
 800429a:	2104      	movs	r1, #4
 800429c:	f7ff ff94 	bl	80041c8 <std>
 80042a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042a4:	2201      	movs	r2, #1
 80042a6:	2109      	movs	r1, #9
 80042a8:	f7ff ff8e 	bl	80041c8 <std>
 80042ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042b0:	2202      	movs	r2, #2
 80042b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b6:	2112      	movs	r1, #18
 80042b8:	f7ff bf86 	b.w	80041c8 <std>
 80042bc:	200003e4 	.word	0x200003e4
 80042c0:	200002ac 	.word	0x200002ac
 80042c4:	08004235 	.word	0x08004235

080042c8 <__sfp_lock_acquire>:
 80042c8:	4801      	ldr	r0, [pc, #4]	@ (80042d0 <__sfp_lock_acquire+0x8>)
 80042ca:	f000 b920 	b.w	800450e <__retarget_lock_acquire_recursive>
 80042ce:	bf00      	nop
 80042d0:	200003ed 	.word	0x200003ed

080042d4 <__sfp_lock_release>:
 80042d4:	4801      	ldr	r0, [pc, #4]	@ (80042dc <__sfp_lock_release+0x8>)
 80042d6:	f000 b91b 	b.w	8004510 <__retarget_lock_release_recursive>
 80042da:	bf00      	nop
 80042dc:	200003ed 	.word	0x200003ed

080042e0 <__sinit>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4604      	mov	r4, r0
 80042e4:	f7ff fff0 	bl	80042c8 <__sfp_lock_acquire>
 80042e8:	6a23      	ldr	r3, [r4, #32]
 80042ea:	b11b      	cbz	r3, 80042f4 <__sinit+0x14>
 80042ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f0:	f7ff bff0 	b.w	80042d4 <__sfp_lock_release>
 80042f4:	4b04      	ldr	r3, [pc, #16]	@ (8004308 <__sinit+0x28>)
 80042f6:	6223      	str	r3, [r4, #32]
 80042f8:	4b04      	ldr	r3, [pc, #16]	@ (800430c <__sinit+0x2c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f5      	bne.n	80042ec <__sinit+0xc>
 8004300:	f7ff ffc4 	bl	800428c <global_stdio_init.part.0>
 8004304:	e7f2      	b.n	80042ec <__sinit+0xc>
 8004306:	bf00      	nop
 8004308:	0800424d 	.word	0x0800424d
 800430c:	200003e4 	.word	0x200003e4

08004310 <_fwalk_sglue>:
 8004310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004314:	4607      	mov	r7, r0
 8004316:	4688      	mov	r8, r1
 8004318:	4614      	mov	r4, r2
 800431a:	2600      	movs	r6, #0
 800431c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004320:	f1b9 0901 	subs.w	r9, r9, #1
 8004324:	d505      	bpl.n	8004332 <_fwalk_sglue+0x22>
 8004326:	6824      	ldr	r4, [r4, #0]
 8004328:	2c00      	cmp	r4, #0
 800432a:	d1f7      	bne.n	800431c <_fwalk_sglue+0xc>
 800432c:	4630      	mov	r0, r6
 800432e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004332:	89ab      	ldrh	r3, [r5, #12]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d907      	bls.n	8004348 <_fwalk_sglue+0x38>
 8004338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800433c:	3301      	adds	r3, #1
 800433e:	d003      	beq.n	8004348 <_fwalk_sglue+0x38>
 8004340:	4629      	mov	r1, r5
 8004342:	4638      	mov	r0, r7
 8004344:	47c0      	blx	r8
 8004346:	4306      	orrs	r6, r0
 8004348:	3568      	adds	r5, #104	@ 0x68
 800434a:	e7e9      	b.n	8004320 <_fwalk_sglue+0x10>

0800434c <siprintf>:
 800434c:	b40e      	push	{r1, r2, r3}
 800434e:	b500      	push	{lr}
 8004350:	b09c      	sub	sp, #112	@ 0x70
 8004352:	ab1d      	add	r3, sp, #116	@ 0x74
 8004354:	9002      	str	r0, [sp, #8]
 8004356:	9006      	str	r0, [sp, #24]
 8004358:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800435c:	4809      	ldr	r0, [pc, #36]	@ (8004384 <siprintf+0x38>)
 800435e:	9107      	str	r1, [sp, #28]
 8004360:	9104      	str	r1, [sp, #16]
 8004362:	4909      	ldr	r1, [pc, #36]	@ (8004388 <siprintf+0x3c>)
 8004364:	f853 2b04 	ldr.w	r2, [r3], #4
 8004368:	9105      	str	r1, [sp, #20]
 800436a:	6800      	ldr	r0, [r0, #0]
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	a902      	add	r1, sp, #8
 8004370:	f001 fbfc 	bl	8005b6c <_svfiprintf_r>
 8004374:	9b02      	ldr	r3, [sp, #8]
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	b01c      	add	sp, #112	@ 0x70
 800437c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004380:	b003      	add	sp, #12
 8004382:	4770      	bx	lr
 8004384:	20000018 	.word	0x20000018
 8004388:	ffff0208 	.word	0xffff0208

0800438c <__sread>:
 800438c:	b510      	push	{r4, lr}
 800438e:	460c      	mov	r4, r1
 8004390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004394:	f000 f86c 	bl	8004470 <_read_r>
 8004398:	2800      	cmp	r0, #0
 800439a:	bfab      	itete	ge
 800439c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800439e:	89a3      	ldrhlt	r3, [r4, #12]
 80043a0:	181b      	addge	r3, r3, r0
 80043a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043a6:	bfac      	ite	ge
 80043a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043aa:	81a3      	strhlt	r3, [r4, #12]
 80043ac:	bd10      	pop	{r4, pc}

080043ae <__swrite>:
 80043ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b2:	461f      	mov	r7, r3
 80043b4:	898b      	ldrh	r3, [r1, #12]
 80043b6:	05db      	lsls	r3, r3, #23
 80043b8:	4605      	mov	r5, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	4616      	mov	r6, r2
 80043be:	d505      	bpl.n	80043cc <__swrite+0x1e>
 80043c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c4:	2302      	movs	r3, #2
 80043c6:	2200      	movs	r2, #0
 80043c8:	f000 f840 	bl	800444c <_lseek_r>
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043d6:	81a3      	strh	r3, [r4, #12]
 80043d8:	4632      	mov	r2, r6
 80043da:	463b      	mov	r3, r7
 80043dc:	4628      	mov	r0, r5
 80043de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043e2:	f000 b857 	b.w	8004494 <_write_r>

080043e6 <__sseek>:
 80043e6:	b510      	push	{r4, lr}
 80043e8:	460c      	mov	r4, r1
 80043ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ee:	f000 f82d 	bl	800444c <_lseek_r>
 80043f2:	1c43      	adds	r3, r0, #1
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	bf15      	itete	ne
 80043f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004402:	81a3      	strheq	r3, [r4, #12]
 8004404:	bf18      	it	ne
 8004406:	81a3      	strhne	r3, [r4, #12]
 8004408:	bd10      	pop	{r4, pc}

0800440a <__sclose>:
 800440a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440e:	f000 b80d 	b.w	800442c <_close_r>

08004412 <memset>:
 8004412:	4402      	add	r2, r0
 8004414:	4603      	mov	r3, r0
 8004416:	4293      	cmp	r3, r2
 8004418:	d100      	bne.n	800441c <memset+0xa>
 800441a:	4770      	bx	lr
 800441c:	f803 1b01 	strb.w	r1, [r3], #1
 8004420:	e7f9      	b.n	8004416 <memset+0x4>
	...

08004424 <_localeconv_r>:
 8004424:	4800      	ldr	r0, [pc, #0]	@ (8004428 <_localeconv_r+0x4>)
 8004426:	4770      	bx	lr
 8004428:	20000158 	.word	0x20000158

0800442c <_close_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4d06      	ldr	r5, [pc, #24]	@ (8004448 <_close_r+0x1c>)
 8004430:	2300      	movs	r3, #0
 8004432:	4604      	mov	r4, r0
 8004434:	4608      	mov	r0, r1
 8004436:	602b      	str	r3, [r5, #0]
 8004438:	f7fd f838 	bl	80014ac <_close>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_close_r+0x1a>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_close_r+0x1a>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	200003e8 	.word	0x200003e8

0800444c <_lseek_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4d07      	ldr	r5, [pc, #28]	@ (800446c <_lseek_r+0x20>)
 8004450:	4604      	mov	r4, r0
 8004452:	4608      	mov	r0, r1
 8004454:	4611      	mov	r1, r2
 8004456:	2200      	movs	r2, #0
 8004458:	602a      	str	r2, [r5, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	f7fd f84d 	bl	80014fa <_lseek>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d102      	bne.n	800446a <_lseek_r+0x1e>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	b103      	cbz	r3, 800446a <_lseek_r+0x1e>
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	200003e8 	.word	0x200003e8

08004470 <_read_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4d07      	ldr	r5, [pc, #28]	@ (8004490 <_read_r+0x20>)
 8004474:	4604      	mov	r4, r0
 8004476:	4608      	mov	r0, r1
 8004478:	4611      	mov	r1, r2
 800447a:	2200      	movs	r2, #0
 800447c:	602a      	str	r2, [r5, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	f7fc ffdb 	bl	800143a <_read>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_read_r+0x1e>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_read_r+0x1e>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	200003e8 	.word	0x200003e8

08004494 <_write_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4d07      	ldr	r5, [pc, #28]	@ (80044b4 <_write_r+0x20>)
 8004498:	4604      	mov	r4, r0
 800449a:	4608      	mov	r0, r1
 800449c:	4611      	mov	r1, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	602a      	str	r2, [r5, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f7fc ffe6 	bl	8001474 <_write>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d102      	bne.n	80044b2 <_write_r+0x1e>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	b103      	cbz	r3, 80044b2 <_write_r+0x1e>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	200003e8 	.word	0x200003e8

080044b8 <__errno>:
 80044b8:	4b01      	ldr	r3, [pc, #4]	@ (80044c0 <__errno+0x8>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000018 	.word	0x20000018

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4d0d      	ldr	r5, [pc, #52]	@ (80044fc <__libc_init_array+0x38>)
 80044c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004500 <__libc_init_array+0x3c>)
 80044ca:	1b64      	subs	r4, r4, r5
 80044cc:	10a4      	asrs	r4, r4, #2
 80044ce:	2600      	movs	r6, #0
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004504 <__libc_init_array+0x40>)
 80044d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004508 <__libc_init_array+0x44>)
 80044d8:	f002 f866 	bl	80065a8 <_init>
 80044dc:	1b64      	subs	r4, r4, r5
 80044de:	10a4      	asrs	r4, r4, #2
 80044e0:	2600      	movs	r6, #0
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	08006980 	.word	0x08006980
 8004500:	08006980 	.word	0x08006980
 8004504:	08006980 	.word	0x08006980
 8004508:	08006984 	.word	0x08006984

0800450c <__retarget_lock_init_recursive>:
 800450c:	4770      	bx	lr

0800450e <__retarget_lock_acquire_recursive>:
 800450e:	4770      	bx	lr

08004510 <__retarget_lock_release_recursive>:
 8004510:	4770      	bx	lr

08004512 <quorem>:
 8004512:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004516:	6903      	ldr	r3, [r0, #16]
 8004518:	690c      	ldr	r4, [r1, #16]
 800451a:	42a3      	cmp	r3, r4
 800451c:	4607      	mov	r7, r0
 800451e:	db7e      	blt.n	800461e <quorem+0x10c>
 8004520:	3c01      	subs	r4, #1
 8004522:	f101 0814 	add.w	r8, r1, #20
 8004526:	00a3      	lsls	r3, r4, #2
 8004528:	f100 0514 	add.w	r5, r0, #20
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800453c:	3301      	adds	r3, #1
 800453e:	429a      	cmp	r2, r3
 8004540:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004544:	fbb2 f6f3 	udiv	r6, r2, r3
 8004548:	d32e      	bcc.n	80045a8 <quorem+0x96>
 800454a:	f04f 0a00 	mov.w	sl, #0
 800454e:	46c4      	mov	ip, r8
 8004550:	46ae      	mov	lr, r5
 8004552:	46d3      	mov	fp, sl
 8004554:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004558:	b298      	uxth	r0, r3
 800455a:	fb06 a000 	mla	r0, r6, r0, sl
 800455e:	0c02      	lsrs	r2, r0, #16
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	fb06 2303 	mla	r3, r6, r3, r2
 8004566:	f8de 2000 	ldr.w	r2, [lr]
 800456a:	b280      	uxth	r0, r0
 800456c:	b292      	uxth	r2, r2
 800456e:	1a12      	subs	r2, r2, r0
 8004570:	445a      	add	r2, fp
 8004572:	f8de 0000 	ldr.w	r0, [lr]
 8004576:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800457a:	b29b      	uxth	r3, r3
 800457c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004580:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004584:	b292      	uxth	r2, r2
 8004586:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800458a:	45e1      	cmp	r9, ip
 800458c:	f84e 2b04 	str.w	r2, [lr], #4
 8004590:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004594:	d2de      	bcs.n	8004554 <quorem+0x42>
 8004596:	9b00      	ldr	r3, [sp, #0]
 8004598:	58eb      	ldr	r3, [r5, r3]
 800459a:	b92b      	cbnz	r3, 80045a8 <quorem+0x96>
 800459c:	9b01      	ldr	r3, [sp, #4]
 800459e:	3b04      	subs	r3, #4
 80045a0:	429d      	cmp	r5, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	d32f      	bcc.n	8004606 <quorem+0xf4>
 80045a6:	613c      	str	r4, [r7, #16]
 80045a8:	4638      	mov	r0, r7
 80045aa:	f001 f97b 	bl	80058a4 <__mcmp>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	db25      	blt.n	80045fe <quorem+0xec>
 80045b2:	4629      	mov	r1, r5
 80045b4:	2000      	movs	r0, #0
 80045b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80045ba:	f8d1 c000 	ldr.w	ip, [r1]
 80045be:	fa1f fe82 	uxth.w	lr, r2
 80045c2:	fa1f f38c 	uxth.w	r3, ip
 80045c6:	eba3 030e 	sub.w	r3, r3, lr
 80045ca:	4403      	add	r3, r0
 80045cc:	0c12      	lsrs	r2, r2, #16
 80045ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80045d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045dc:	45c1      	cmp	r9, r8
 80045de:	f841 3b04 	str.w	r3, [r1], #4
 80045e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80045e6:	d2e6      	bcs.n	80045b6 <quorem+0xa4>
 80045e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045f0:	b922      	cbnz	r2, 80045fc <quorem+0xea>
 80045f2:	3b04      	subs	r3, #4
 80045f4:	429d      	cmp	r5, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	d30b      	bcc.n	8004612 <quorem+0x100>
 80045fa:	613c      	str	r4, [r7, #16]
 80045fc:	3601      	adds	r6, #1
 80045fe:	4630      	mov	r0, r6
 8004600:	b003      	add	sp, #12
 8004602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	3b04      	subs	r3, #4
 800460a:	2a00      	cmp	r2, #0
 800460c:	d1cb      	bne.n	80045a6 <quorem+0x94>
 800460e:	3c01      	subs	r4, #1
 8004610:	e7c6      	b.n	80045a0 <quorem+0x8e>
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	3b04      	subs	r3, #4
 8004616:	2a00      	cmp	r2, #0
 8004618:	d1ef      	bne.n	80045fa <quorem+0xe8>
 800461a:	3c01      	subs	r4, #1
 800461c:	e7ea      	b.n	80045f4 <quorem+0xe2>
 800461e:	2000      	movs	r0, #0
 8004620:	e7ee      	b.n	8004600 <quorem+0xee>
 8004622:	0000      	movs	r0, r0
 8004624:	0000      	movs	r0, r0
	...

08004628 <_dtoa_r>:
 8004628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462c:	69c7      	ldr	r7, [r0, #28]
 800462e:	b099      	sub	sp, #100	@ 0x64
 8004630:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004634:	ec55 4b10 	vmov	r4, r5, d0
 8004638:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800463a:	9109      	str	r1, [sp, #36]	@ 0x24
 800463c:	4683      	mov	fp, r0
 800463e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004640:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004642:	b97f      	cbnz	r7, 8004664 <_dtoa_r+0x3c>
 8004644:	2010      	movs	r0, #16
 8004646:	f000 fdfd 	bl	8005244 <malloc>
 800464a:	4602      	mov	r2, r0
 800464c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004650:	b920      	cbnz	r0, 800465c <_dtoa_r+0x34>
 8004652:	4ba7      	ldr	r3, [pc, #668]	@ (80048f0 <_dtoa_r+0x2c8>)
 8004654:	21ef      	movs	r1, #239	@ 0xef
 8004656:	48a7      	ldr	r0, [pc, #668]	@ (80048f4 <_dtoa_r+0x2cc>)
 8004658:	f001 fc68 	bl	8005f2c <__assert_func>
 800465c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004660:	6007      	str	r7, [r0, #0]
 8004662:	60c7      	str	r7, [r0, #12]
 8004664:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	b159      	cbz	r1, 8004684 <_dtoa_r+0x5c>
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	604a      	str	r2, [r1, #4]
 8004670:	2301      	movs	r3, #1
 8004672:	4093      	lsls	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
 8004676:	4658      	mov	r0, fp
 8004678:	f000 feda 	bl	8005430 <_Bfree>
 800467c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	1e2b      	subs	r3, r5, #0
 8004686:	bfb9      	ittee	lt
 8004688:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800468c:	9303      	strlt	r3, [sp, #12]
 800468e:	2300      	movge	r3, #0
 8004690:	6033      	strge	r3, [r6, #0]
 8004692:	9f03      	ldr	r7, [sp, #12]
 8004694:	4b98      	ldr	r3, [pc, #608]	@ (80048f8 <_dtoa_r+0x2d0>)
 8004696:	bfbc      	itt	lt
 8004698:	2201      	movlt	r2, #1
 800469a:	6032      	strlt	r2, [r6, #0]
 800469c:	43bb      	bics	r3, r7
 800469e:	d112      	bne.n	80046c6 <_dtoa_r+0x9e>
 80046a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80046a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80046ac:	4323      	orrs	r3, r4
 80046ae:	f000 854d 	beq.w	800514c <_dtoa_r+0xb24>
 80046b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800490c <_dtoa_r+0x2e4>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 854f 	beq.w	800515c <_dtoa_r+0xb34>
 80046be:	f10a 0303 	add.w	r3, sl, #3
 80046c2:	f000 bd49 	b.w	8005158 <_dtoa_r+0xb30>
 80046c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	ec51 0b17 	vmov	r0, r1, d7
 80046d0:	2300      	movs	r3, #0
 80046d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80046d6:	f7fc f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80046da:	4680      	mov	r8, r0
 80046dc:	b158      	cbz	r0, 80046f6 <_dtoa_r+0xce>
 80046de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80046e0:	2301      	movs	r3, #1
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046e6:	b113      	cbz	r3, 80046ee <_dtoa_r+0xc6>
 80046e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80046ea:	4b84      	ldr	r3, [pc, #528]	@ (80048fc <_dtoa_r+0x2d4>)
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004910 <_dtoa_r+0x2e8>
 80046f2:	f000 bd33 	b.w	800515c <_dtoa_r+0xb34>
 80046f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80046fa:	aa16      	add	r2, sp, #88	@ 0x58
 80046fc:	a917      	add	r1, sp, #92	@ 0x5c
 80046fe:	4658      	mov	r0, fp
 8004700:	f001 f980 	bl	8005a04 <__d2b>
 8004704:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004708:	4681      	mov	r9, r0
 800470a:	2e00      	cmp	r6, #0
 800470c:	d077      	beq.n	80047fe <_dtoa_r+0x1d6>
 800470e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004710:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800471c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004720:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004724:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004728:	4619      	mov	r1, r3
 800472a:	2200      	movs	r2, #0
 800472c:	4b74      	ldr	r3, [pc, #464]	@ (8004900 <_dtoa_r+0x2d8>)
 800472e:	f7fb fdab 	bl	8000288 <__aeabi_dsub>
 8004732:	a369      	add	r3, pc, #420	@ (adr r3, 80048d8 <_dtoa_r+0x2b0>)
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f7fb ff5e 	bl	80005f8 <__aeabi_dmul>
 800473c:	a368      	add	r3, pc, #416	@ (adr r3, 80048e0 <_dtoa_r+0x2b8>)
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f7fb fda3 	bl	800028c <__adddf3>
 8004746:	4604      	mov	r4, r0
 8004748:	4630      	mov	r0, r6
 800474a:	460d      	mov	r5, r1
 800474c:	f7fb feea 	bl	8000524 <__aeabi_i2d>
 8004750:	a365      	add	r3, pc, #404	@ (adr r3, 80048e8 <_dtoa_r+0x2c0>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fb ff4f 	bl	80005f8 <__aeabi_dmul>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4620      	mov	r0, r4
 8004760:	4629      	mov	r1, r5
 8004762:	f7fb fd93 	bl	800028c <__adddf3>
 8004766:	4604      	mov	r4, r0
 8004768:	460d      	mov	r5, r1
 800476a:	f7fc f9f5 	bl	8000b58 <__aeabi_d2iz>
 800476e:	2200      	movs	r2, #0
 8004770:	4607      	mov	r7, r0
 8004772:	2300      	movs	r3, #0
 8004774:	4620      	mov	r0, r4
 8004776:	4629      	mov	r1, r5
 8004778:	f7fc f9b0 	bl	8000adc <__aeabi_dcmplt>
 800477c:	b140      	cbz	r0, 8004790 <_dtoa_r+0x168>
 800477e:	4638      	mov	r0, r7
 8004780:	f7fb fed0 	bl	8000524 <__aeabi_i2d>
 8004784:	4622      	mov	r2, r4
 8004786:	462b      	mov	r3, r5
 8004788:	f7fc f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 800478c:	b900      	cbnz	r0, 8004790 <_dtoa_r+0x168>
 800478e:	3f01      	subs	r7, #1
 8004790:	2f16      	cmp	r7, #22
 8004792:	d851      	bhi.n	8004838 <_dtoa_r+0x210>
 8004794:	4b5b      	ldr	r3, [pc, #364]	@ (8004904 <_dtoa_r+0x2dc>)
 8004796:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047a2:	f7fc f99b 	bl	8000adc <__aeabi_dcmplt>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d048      	beq.n	800483c <_dtoa_r+0x214>
 80047aa:	3f01      	subs	r7, #1
 80047ac:	2300      	movs	r3, #0
 80047ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80047b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80047b2:	1b9b      	subs	r3, r3, r6
 80047b4:	1e5a      	subs	r2, r3, #1
 80047b6:	bf44      	itt	mi
 80047b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80047bc:	2300      	movmi	r3, #0
 80047be:	9208      	str	r2, [sp, #32]
 80047c0:	bf54      	ite	pl
 80047c2:	f04f 0800 	movpl.w	r8, #0
 80047c6:	9308      	strmi	r3, [sp, #32]
 80047c8:	2f00      	cmp	r7, #0
 80047ca:	db39      	blt.n	8004840 <_dtoa_r+0x218>
 80047cc:	9b08      	ldr	r3, [sp, #32]
 80047ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80047d0:	443b      	add	r3, r7
 80047d2:	9308      	str	r3, [sp, #32]
 80047d4:	2300      	movs	r3, #0
 80047d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80047d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047da:	2b09      	cmp	r3, #9
 80047dc:	d864      	bhi.n	80048a8 <_dtoa_r+0x280>
 80047de:	2b05      	cmp	r3, #5
 80047e0:	bfc4      	itt	gt
 80047e2:	3b04      	subgt	r3, #4
 80047e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80047e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047e8:	f1a3 0302 	sub.w	r3, r3, #2
 80047ec:	bfcc      	ite	gt
 80047ee:	2400      	movgt	r4, #0
 80047f0:	2401      	movle	r4, #1
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d863      	bhi.n	80048be <_dtoa_r+0x296>
 80047f6:	e8df f003 	tbb	[pc, r3]
 80047fa:	372a      	.short	0x372a
 80047fc:	5535      	.short	0x5535
 80047fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004802:	441e      	add	r6, r3
 8004804:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004808:	2b20      	cmp	r3, #32
 800480a:	bfc1      	itttt	gt
 800480c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004810:	409f      	lslgt	r7, r3
 8004812:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004816:	fa24 f303 	lsrgt.w	r3, r4, r3
 800481a:	bfd6      	itet	le
 800481c:	f1c3 0320 	rsble	r3, r3, #32
 8004820:	ea47 0003 	orrgt.w	r0, r7, r3
 8004824:	fa04 f003 	lslle.w	r0, r4, r3
 8004828:	f7fb fe6c 	bl	8000504 <__aeabi_ui2d>
 800482c:	2201      	movs	r2, #1
 800482e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004832:	3e01      	subs	r6, #1
 8004834:	9214      	str	r2, [sp, #80]	@ 0x50
 8004836:	e777      	b.n	8004728 <_dtoa_r+0x100>
 8004838:	2301      	movs	r3, #1
 800483a:	e7b8      	b.n	80047ae <_dtoa_r+0x186>
 800483c:	9012      	str	r0, [sp, #72]	@ 0x48
 800483e:	e7b7      	b.n	80047b0 <_dtoa_r+0x188>
 8004840:	427b      	negs	r3, r7
 8004842:	930a      	str	r3, [sp, #40]	@ 0x28
 8004844:	2300      	movs	r3, #0
 8004846:	eba8 0807 	sub.w	r8, r8, r7
 800484a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800484c:	e7c4      	b.n	80047d8 <_dtoa_r+0x1b0>
 800484e:	2300      	movs	r3, #0
 8004850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	dc35      	bgt.n	80048c4 <_dtoa_r+0x29c>
 8004858:	2301      	movs	r3, #1
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	9307      	str	r3, [sp, #28]
 800485e:	461a      	mov	r2, r3
 8004860:	920e      	str	r2, [sp, #56]	@ 0x38
 8004862:	e00b      	b.n	800487c <_dtoa_r+0x254>
 8004864:	2301      	movs	r3, #1
 8004866:	e7f3      	b.n	8004850 <_dtoa_r+0x228>
 8004868:	2300      	movs	r3, #0
 800486a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800486c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	9307      	str	r3, [sp, #28]
 8004878:	bfb8      	it	lt
 800487a:	2301      	movlt	r3, #1
 800487c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004880:	2100      	movs	r1, #0
 8004882:	2204      	movs	r2, #4
 8004884:	f102 0514 	add.w	r5, r2, #20
 8004888:	429d      	cmp	r5, r3
 800488a:	d91f      	bls.n	80048cc <_dtoa_r+0x2a4>
 800488c:	6041      	str	r1, [r0, #4]
 800488e:	4658      	mov	r0, fp
 8004890:	f000 fd8e 	bl	80053b0 <_Balloc>
 8004894:	4682      	mov	sl, r0
 8004896:	2800      	cmp	r0, #0
 8004898:	d13c      	bne.n	8004914 <_dtoa_r+0x2ec>
 800489a:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <_dtoa_r+0x2e0>)
 800489c:	4602      	mov	r2, r0
 800489e:	f240 11af 	movw	r1, #431	@ 0x1af
 80048a2:	e6d8      	b.n	8004656 <_dtoa_r+0x2e>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e7e0      	b.n	800486a <_dtoa_r+0x242>
 80048a8:	2401      	movs	r4, #1
 80048aa:	2300      	movs	r3, #0
 80048ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80048b0:	f04f 33ff 	mov.w	r3, #4294967295
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	9307      	str	r3, [sp, #28]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2312      	movs	r3, #18
 80048bc:	e7d0      	b.n	8004860 <_dtoa_r+0x238>
 80048be:	2301      	movs	r3, #1
 80048c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048c2:	e7f5      	b.n	80048b0 <_dtoa_r+0x288>
 80048c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	9307      	str	r3, [sp, #28]
 80048ca:	e7d7      	b.n	800487c <_dtoa_r+0x254>
 80048cc:	3101      	adds	r1, #1
 80048ce:	0052      	lsls	r2, r2, #1
 80048d0:	e7d8      	b.n	8004884 <_dtoa_r+0x25c>
 80048d2:	bf00      	nop
 80048d4:	f3af 8000 	nop.w
 80048d8:	636f4361 	.word	0x636f4361
 80048dc:	3fd287a7 	.word	0x3fd287a7
 80048e0:	8b60c8b3 	.word	0x8b60c8b3
 80048e4:	3fc68a28 	.word	0x3fc68a28
 80048e8:	509f79fb 	.word	0x509f79fb
 80048ec:	3fd34413 	.word	0x3fd34413
 80048f0:	08006645 	.word	0x08006645
 80048f4:	0800665c 	.word	0x0800665c
 80048f8:	7ff00000 	.word	0x7ff00000
 80048fc:	08006615 	.word	0x08006615
 8004900:	3ff80000 	.word	0x3ff80000
 8004904:	08006758 	.word	0x08006758
 8004908:	080066b4 	.word	0x080066b4
 800490c:	08006641 	.word	0x08006641
 8004910:	08006614 	.word	0x08006614
 8004914:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004918:	6018      	str	r0, [r3, #0]
 800491a:	9b07      	ldr	r3, [sp, #28]
 800491c:	2b0e      	cmp	r3, #14
 800491e:	f200 80a4 	bhi.w	8004a6a <_dtoa_r+0x442>
 8004922:	2c00      	cmp	r4, #0
 8004924:	f000 80a1 	beq.w	8004a6a <_dtoa_r+0x442>
 8004928:	2f00      	cmp	r7, #0
 800492a:	dd33      	ble.n	8004994 <_dtoa_r+0x36c>
 800492c:	4bad      	ldr	r3, [pc, #692]	@ (8004be4 <_dtoa_r+0x5bc>)
 800492e:	f007 020f 	and.w	r2, r7, #15
 8004932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004936:	ed93 7b00 	vldr	d7, [r3]
 800493a:	05f8      	lsls	r0, r7, #23
 800493c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004940:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004944:	d516      	bpl.n	8004974 <_dtoa_r+0x34c>
 8004946:	4ba8      	ldr	r3, [pc, #672]	@ (8004be8 <_dtoa_r+0x5c0>)
 8004948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800494c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004950:	f7fb ff7c 	bl	800084c <__aeabi_ddiv>
 8004954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004958:	f004 040f 	and.w	r4, r4, #15
 800495c:	2603      	movs	r6, #3
 800495e:	4da2      	ldr	r5, [pc, #648]	@ (8004be8 <_dtoa_r+0x5c0>)
 8004960:	b954      	cbnz	r4, 8004978 <_dtoa_r+0x350>
 8004962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800496a:	f7fb ff6f 	bl	800084c <__aeabi_ddiv>
 800496e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004972:	e028      	b.n	80049c6 <_dtoa_r+0x39e>
 8004974:	2602      	movs	r6, #2
 8004976:	e7f2      	b.n	800495e <_dtoa_r+0x336>
 8004978:	07e1      	lsls	r1, r4, #31
 800497a:	d508      	bpl.n	800498e <_dtoa_r+0x366>
 800497c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004980:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004984:	f7fb fe38 	bl	80005f8 <__aeabi_dmul>
 8004988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800498c:	3601      	adds	r6, #1
 800498e:	1064      	asrs	r4, r4, #1
 8004990:	3508      	adds	r5, #8
 8004992:	e7e5      	b.n	8004960 <_dtoa_r+0x338>
 8004994:	f000 80d2 	beq.w	8004b3c <_dtoa_r+0x514>
 8004998:	427c      	negs	r4, r7
 800499a:	4b92      	ldr	r3, [pc, #584]	@ (8004be4 <_dtoa_r+0x5bc>)
 800499c:	4d92      	ldr	r5, [pc, #584]	@ (8004be8 <_dtoa_r+0x5c0>)
 800499e:	f004 020f 	and.w	r2, r4, #15
 80049a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049ae:	f7fb fe23 	bl	80005f8 <__aeabi_dmul>
 80049b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049b6:	1124      	asrs	r4, r4, #4
 80049b8:	2300      	movs	r3, #0
 80049ba:	2602      	movs	r6, #2
 80049bc:	2c00      	cmp	r4, #0
 80049be:	f040 80b2 	bne.w	8004b26 <_dtoa_r+0x4fe>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d3      	bne.n	800496e <_dtoa_r+0x346>
 80049c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80049c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80b7 	beq.w	8004b40 <_dtoa_r+0x518>
 80049d2:	4b86      	ldr	r3, [pc, #536]	@ (8004bec <_dtoa_r+0x5c4>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	4620      	mov	r0, r4
 80049d8:	4629      	mov	r1, r5
 80049da:	f7fc f87f 	bl	8000adc <__aeabi_dcmplt>
 80049de:	2800      	cmp	r0, #0
 80049e0:	f000 80ae 	beq.w	8004b40 <_dtoa_r+0x518>
 80049e4:	9b07      	ldr	r3, [sp, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80aa 	beq.w	8004b40 <_dtoa_r+0x518>
 80049ec:	9b00      	ldr	r3, [sp, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	dd37      	ble.n	8004a62 <_dtoa_r+0x43a>
 80049f2:	1e7b      	subs	r3, r7, #1
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	4620      	mov	r0, r4
 80049f8:	4b7d      	ldr	r3, [pc, #500]	@ (8004bf0 <_dtoa_r+0x5c8>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	4629      	mov	r1, r5
 80049fe:	f7fb fdfb 	bl	80005f8 <__aeabi_dmul>
 8004a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a06:	9c00      	ldr	r4, [sp, #0]
 8004a08:	3601      	adds	r6, #1
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7fb fd8a 	bl	8000524 <__aeabi_i2d>
 8004a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a14:	f7fb fdf0 	bl	80005f8 <__aeabi_dmul>
 8004a18:	4b76      	ldr	r3, [pc, #472]	@ (8004bf4 <_dtoa_r+0x5cc>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f7fb fc36 	bl	800028c <__adddf3>
 8004a20:	4605      	mov	r5, r0
 8004a22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004a26:	2c00      	cmp	r4, #0
 8004a28:	f040 808d 	bne.w	8004b46 <_dtoa_r+0x51e>
 8004a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a30:	4b71      	ldr	r3, [pc, #452]	@ (8004bf8 <_dtoa_r+0x5d0>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	f7fb fc28 	bl	8000288 <__aeabi_dsub>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a40:	462a      	mov	r2, r5
 8004a42:	4633      	mov	r3, r6
 8004a44:	f7fc f868 	bl	8000b18 <__aeabi_dcmpgt>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	f040 828b 	bne.w	8004f64 <_dtoa_r+0x93c>
 8004a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a52:	462a      	mov	r2, r5
 8004a54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a58:	f7fc f840 	bl	8000adc <__aeabi_dcmplt>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	f040 8128 	bne.w	8004cb2 <_dtoa_r+0x68a>
 8004a62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f2c0 815a 	blt.w	8004d26 <_dtoa_r+0x6fe>
 8004a72:	2f0e      	cmp	r7, #14
 8004a74:	f300 8157 	bgt.w	8004d26 <_dtoa_r+0x6fe>
 8004a78:	4b5a      	ldr	r3, [pc, #360]	@ (8004be4 <_dtoa_r+0x5bc>)
 8004a7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a7e:	ed93 7b00 	vldr	d7, [r3]
 8004a82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	ed8d 7b00 	vstr	d7, [sp]
 8004a8a:	da03      	bge.n	8004a94 <_dtoa_r+0x46c>
 8004a8c:	9b07      	ldr	r3, [sp, #28]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f340 8101 	ble.w	8004c96 <_dtoa_r+0x66e>
 8004a94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a98:	4656      	mov	r6, sl
 8004a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f7fb fed3 	bl	800084c <__aeabi_ddiv>
 8004aa6:	f7fc f857 	bl	8000b58 <__aeabi_d2iz>
 8004aaa:	4680      	mov	r8, r0
 8004aac:	f7fb fd3a 	bl	8000524 <__aeabi_i2d>
 8004ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ab4:	f7fb fda0 	bl	80005f8 <__aeabi_dmul>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4620      	mov	r0, r4
 8004abe:	4629      	mov	r1, r5
 8004ac0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004ac4:	f7fb fbe0 	bl	8000288 <__aeabi_dsub>
 8004ac8:	f806 4b01 	strb.w	r4, [r6], #1
 8004acc:	9d07      	ldr	r5, [sp, #28]
 8004ace:	eba6 040a 	sub.w	r4, r6, sl
 8004ad2:	42a5      	cmp	r5, r4
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	f040 8117 	bne.w	8004d0a <_dtoa_r+0x6e2>
 8004adc:	f7fb fbd6 	bl	800028c <__adddf3>
 8004ae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	460d      	mov	r5, r1
 8004ae8:	f7fc f816 	bl	8000b18 <__aeabi_dcmpgt>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	f040 80f9 	bne.w	8004ce4 <_dtoa_r+0x6bc>
 8004af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004af6:	4620      	mov	r0, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	f7fb ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004afe:	b118      	cbz	r0, 8004b08 <_dtoa_r+0x4e0>
 8004b00:	f018 0f01 	tst.w	r8, #1
 8004b04:	f040 80ee 	bne.w	8004ce4 <_dtoa_r+0x6bc>
 8004b08:	4649      	mov	r1, r9
 8004b0a:	4658      	mov	r0, fp
 8004b0c:	f000 fc90 	bl	8005430 <_Bfree>
 8004b10:	2300      	movs	r3, #0
 8004b12:	7033      	strb	r3, [r6, #0]
 8004b14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004b16:	3701      	adds	r7, #1
 8004b18:	601f      	str	r7, [r3, #0]
 8004b1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 831d 	beq.w	800515c <_dtoa_r+0xb34>
 8004b22:	601e      	str	r6, [r3, #0]
 8004b24:	e31a      	b.n	800515c <_dtoa_r+0xb34>
 8004b26:	07e2      	lsls	r2, r4, #31
 8004b28:	d505      	bpl.n	8004b36 <_dtoa_r+0x50e>
 8004b2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b2e:	f7fb fd63 	bl	80005f8 <__aeabi_dmul>
 8004b32:	3601      	adds	r6, #1
 8004b34:	2301      	movs	r3, #1
 8004b36:	1064      	asrs	r4, r4, #1
 8004b38:	3508      	adds	r5, #8
 8004b3a:	e73f      	b.n	80049bc <_dtoa_r+0x394>
 8004b3c:	2602      	movs	r6, #2
 8004b3e:	e742      	b.n	80049c6 <_dtoa_r+0x39e>
 8004b40:	9c07      	ldr	r4, [sp, #28]
 8004b42:	9704      	str	r7, [sp, #16]
 8004b44:	e761      	b.n	8004a0a <_dtoa_r+0x3e2>
 8004b46:	4b27      	ldr	r3, [pc, #156]	@ (8004be4 <_dtoa_r+0x5bc>)
 8004b48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b52:	4454      	add	r4, sl
 8004b54:	2900      	cmp	r1, #0
 8004b56:	d053      	beq.n	8004c00 <_dtoa_r+0x5d8>
 8004b58:	4928      	ldr	r1, [pc, #160]	@ (8004bfc <_dtoa_r+0x5d4>)
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f7fb fe76 	bl	800084c <__aeabi_ddiv>
 8004b60:	4633      	mov	r3, r6
 8004b62:	462a      	mov	r2, r5
 8004b64:	f7fb fb90 	bl	8000288 <__aeabi_dsub>
 8004b68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b6c:	4656      	mov	r6, sl
 8004b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b72:	f7fb fff1 	bl	8000b58 <__aeabi_d2iz>
 8004b76:	4605      	mov	r5, r0
 8004b78:	f7fb fcd4 	bl	8000524 <__aeabi_i2d>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b84:	f7fb fb80 	bl	8000288 <__aeabi_dsub>
 8004b88:	3530      	adds	r5, #48	@ 0x30
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b92:	f806 5b01 	strb.w	r5, [r6], #1
 8004b96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b9a:	f7fb ff9f 	bl	8000adc <__aeabi_dcmplt>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d171      	bne.n	8004c86 <_dtoa_r+0x65e>
 8004ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ba6:	4911      	ldr	r1, [pc, #68]	@ (8004bec <_dtoa_r+0x5c4>)
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7fb fb6d 	bl	8000288 <__aeabi_dsub>
 8004bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004bb2:	f7fb ff93 	bl	8000adc <__aeabi_dcmplt>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f040 8095 	bne.w	8004ce6 <_dtoa_r+0x6be>
 8004bbc:	42a6      	cmp	r6, r4
 8004bbe:	f43f af50 	beq.w	8004a62 <_dtoa_r+0x43a>
 8004bc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <_dtoa_r+0x5c8>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f7fb fd15 	bl	80005f8 <__aeabi_dmul>
 8004bce:	4b08      	ldr	r3, [pc, #32]	@ (8004bf0 <_dtoa_r+0x5c8>)
 8004bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bda:	f7fb fd0d 	bl	80005f8 <__aeabi_dmul>
 8004bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004be2:	e7c4      	b.n	8004b6e <_dtoa_r+0x546>
 8004be4:	08006758 	.word	0x08006758
 8004be8:	08006730 	.word	0x08006730
 8004bec:	3ff00000 	.word	0x3ff00000
 8004bf0:	40240000 	.word	0x40240000
 8004bf4:	401c0000 	.word	0x401c0000
 8004bf8:	40140000 	.word	0x40140000
 8004bfc:	3fe00000 	.word	0x3fe00000
 8004c00:	4631      	mov	r1, r6
 8004c02:	4628      	mov	r0, r5
 8004c04:	f7fb fcf8 	bl	80005f8 <__aeabi_dmul>
 8004c08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004c0e:	4656      	mov	r6, sl
 8004c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c14:	f7fb ffa0 	bl	8000b58 <__aeabi_d2iz>
 8004c18:	4605      	mov	r5, r0
 8004c1a:	f7fb fc83 	bl	8000524 <__aeabi_i2d>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c26:	f7fb fb2f 	bl	8000288 <__aeabi_dsub>
 8004c2a:	3530      	adds	r5, #48	@ 0x30
 8004c2c:	f806 5b01 	strb.w	r5, [r6], #1
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	42a6      	cmp	r6, r4
 8004c36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	d124      	bne.n	8004c8a <_dtoa_r+0x662>
 8004c40:	4bac      	ldr	r3, [pc, #688]	@ (8004ef4 <_dtoa_r+0x8cc>)
 8004c42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c46:	f7fb fb21 	bl	800028c <__adddf3>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c52:	f7fb ff61 	bl	8000b18 <__aeabi_dcmpgt>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d145      	bne.n	8004ce6 <_dtoa_r+0x6be>
 8004c5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c5e:	49a5      	ldr	r1, [pc, #660]	@ (8004ef4 <_dtoa_r+0x8cc>)
 8004c60:	2000      	movs	r0, #0
 8004c62:	f7fb fb11 	bl	8000288 <__aeabi_dsub>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c6e:	f7fb ff35 	bl	8000adc <__aeabi_dcmplt>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	f43f aef5 	beq.w	8004a62 <_dtoa_r+0x43a>
 8004c78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004c7a:	1e73      	subs	r3, r6, #1
 8004c7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c82:	2b30      	cmp	r3, #48	@ 0x30
 8004c84:	d0f8      	beq.n	8004c78 <_dtoa_r+0x650>
 8004c86:	9f04      	ldr	r7, [sp, #16]
 8004c88:	e73e      	b.n	8004b08 <_dtoa_r+0x4e0>
 8004c8a:	4b9b      	ldr	r3, [pc, #620]	@ (8004ef8 <_dtoa_r+0x8d0>)
 8004c8c:	f7fb fcb4 	bl	80005f8 <__aeabi_dmul>
 8004c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c94:	e7bc      	b.n	8004c10 <_dtoa_r+0x5e8>
 8004c96:	d10c      	bne.n	8004cb2 <_dtoa_r+0x68a>
 8004c98:	4b98      	ldr	r3, [pc, #608]	@ (8004efc <_dtoa_r+0x8d4>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ca0:	f7fb fcaa 	bl	80005f8 <__aeabi_dmul>
 8004ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ca8:	f7fb ff2c 	bl	8000b04 <__aeabi_dcmpge>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f000 8157 	beq.w	8004f60 <_dtoa_r+0x938>
 8004cb2:	2400      	movs	r4, #0
 8004cb4:	4625      	mov	r5, r4
 8004cb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	9304      	str	r3, [sp, #16]
 8004cbc:	4656      	mov	r6, sl
 8004cbe:	2700      	movs	r7, #0
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4658      	mov	r0, fp
 8004cc4:	f000 fbb4 	bl	8005430 <_Bfree>
 8004cc8:	2d00      	cmp	r5, #0
 8004cca:	d0dc      	beq.n	8004c86 <_dtoa_r+0x65e>
 8004ccc:	b12f      	cbz	r7, 8004cda <_dtoa_r+0x6b2>
 8004cce:	42af      	cmp	r7, r5
 8004cd0:	d003      	beq.n	8004cda <_dtoa_r+0x6b2>
 8004cd2:	4639      	mov	r1, r7
 8004cd4:	4658      	mov	r0, fp
 8004cd6:	f000 fbab 	bl	8005430 <_Bfree>
 8004cda:	4629      	mov	r1, r5
 8004cdc:	4658      	mov	r0, fp
 8004cde:	f000 fba7 	bl	8005430 <_Bfree>
 8004ce2:	e7d0      	b.n	8004c86 <_dtoa_r+0x65e>
 8004ce4:	9704      	str	r7, [sp, #16]
 8004ce6:	4633      	mov	r3, r6
 8004ce8:	461e      	mov	r6, r3
 8004cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cee:	2a39      	cmp	r2, #57	@ 0x39
 8004cf0:	d107      	bne.n	8004d02 <_dtoa_r+0x6da>
 8004cf2:	459a      	cmp	sl, r3
 8004cf4:	d1f8      	bne.n	8004ce8 <_dtoa_r+0x6c0>
 8004cf6:	9a04      	ldr	r2, [sp, #16]
 8004cf8:	3201      	adds	r2, #1
 8004cfa:	9204      	str	r2, [sp, #16]
 8004cfc:	2230      	movs	r2, #48	@ 0x30
 8004cfe:	f88a 2000 	strb.w	r2, [sl]
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	3201      	adds	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e7bd      	b.n	8004c86 <_dtoa_r+0x65e>
 8004d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8004ef8 <_dtoa_r+0x8d0>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f7fb fc73 	bl	80005f8 <__aeabi_dmul>
 8004d12:	2200      	movs	r2, #0
 8004d14:	2300      	movs	r3, #0
 8004d16:	4604      	mov	r4, r0
 8004d18:	460d      	mov	r5, r1
 8004d1a:	f7fb fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f43f aebb 	beq.w	8004a9a <_dtoa_r+0x472>
 8004d24:	e6f0      	b.n	8004b08 <_dtoa_r+0x4e0>
 8004d26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	f000 80db 	beq.w	8004ee4 <_dtoa_r+0x8bc>
 8004d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d30:	2a01      	cmp	r2, #1
 8004d32:	f300 80bf 	bgt.w	8004eb4 <_dtoa_r+0x88c>
 8004d36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004d38:	2a00      	cmp	r2, #0
 8004d3a:	f000 80b7 	beq.w	8004eac <_dtoa_r+0x884>
 8004d3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d44:	4646      	mov	r6, r8
 8004d46:	9a08      	ldr	r2, [sp, #32]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	441a      	add	r2, r3
 8004d4c:	4658      	mov	r0, fp
 8004d4e:	4498      	add	r8, r3
 8004d50:	9208      	str	r2, [sp, #32]
 8004d52:	f000 fc21 	bl	8005598 <__i2b>
 8004d56:	4605      	mov	r5, r0
 8004d58:	b15e      	cbz	r6, 8004d72 <_dtoa_r+0x74a>
 8004d5a:	9b08      	ldr	r3, [sp, #32]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	dd08      	ble.n	8004d72 <_dtoa_r+0x74a>
 8004d60:	42b3      	cmp	r3, r6
 8004d62:	9a08      	ldr	r2, [sp, #32]
 8004d64:	bfa8      	it	ge
 8004d66:	4633      	movge	r3, r6
 8004d68:	eba8 0803 	sub.w	r8, r8, r3
 8004d6c:	1af6      	subs	r6, r6, r3
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	9308      	str	r3, [sp, #32]
 8004d72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d74:	b1f3      	cbz	r3, 8004db4 <_dtoa_r+0x78c>
 8004d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80b7 	beq.w	8004eec <_dtoa_r+0x8c4>
 8004d7e:	b18c      	cbz	r4, 8004da4 <_dtoa_r+0x77c>
 8004d80:	4629      	mov	r1, r5
 8004d82:	4622      	mov	r2, r4
 8004d84:	4658      	mov	r0, fp
 8004d86:	f000 fcc7 	bl	8005718 <__pow5mult>
 8004d8a:	464a      	mov	r2, r9
 8004d8c:	4601      	mov	r1, r0
 8004d8e:	4605      	mov	r5, r0
 8004d90:	4658      	mov	r0, fp
 8004d92:	f000 fc17 	bl	80055c4 <__multiply>
 8004d96:	4649      	mov	r1, r9
 8004d98:	9004      	str	r0, [sp, #16]
 8004d9a:	4658      	mov	r0, fp
 8004d9c:	f000 fb48 	bl	8005430 <_Bfree>
 8004da0:	9b04      	ldr	r3, [sp, #16]
 8004da2:	4699      	mov	r9, r3
 8004da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004da6:	1b1a      	subs	r2, r3, r4
 8004da8:	d004      	beq.n	8004db4 <_dtoa_r+0x78c>
 8004daa:	4649      	mov	r1, r9
 8004dac:	4658      	mov	r0, fp
 8004dae:	f000 fcb3 	bl	8005718 <__pow5mult>
 8004db2:	4681      	mov	r9, r0
 8004db4:	2101      	movs	r1, #1
 8004db6:	4658      	mov	r0, fp
 8004db8:	f000 fbee 	bl	8005598 <__i2b>
 8004dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 81cf 	beq.w	8005164 <_dtoa_r+0xb3c>
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4601      	mov	r1, r0
 8004dca:	4658      	mov	r0, fp
 8004dcc:	f000 fca4 	bl	8005718 <__pow5mult>
 8004dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	f300 8095 	bgt.w	8004f04 <_dtoa_r+0x8dc>
 8004dda:	9b02      	ldr	r3, [sp, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f040 8087 	bne.w	8004ef0 <_dtoa_r+0x8c8>
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f040 8089 	bne.w	8004f00 <_dtoa_r+0x8d8>
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004df4:	0d1b      	lsrs	r3, r3, #20
 8004df6:	051b      	lsls	r3, r3, #20
 8004df8:	b12b      	cbz	r3, 8004e06 <_dtoa_r+0x7de>
 8004dfa:	9b08      	ldr	r3, [sp, #32]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	9308      	str	r3, [sp, #32]
 8004e00:	f108 0801 	add.w	r8, r8, #1
 8004e04:	2301      	movs	r3, #1
 8004e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 81b0 	beq.w	8005170 <_dtoa_r+0xb48>
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e16:	6918      	ldr	r0, [r3, #16]
 8004e18:	f000 fb72 	bl	8005500 <__hi0bits>
 8004e1c:	f1c0 0020 	rsb	r0, r0, #32
 8004e20:	9b08      	ldr	r3, [sp, #32]
 8004e22:	4418      	add	r0, r3
 8004e24:	f010 001f 	ands.w	r0, r0, #31
 8004e28:	d077      	beq.n	8004f1a <_dtoa_r+0x8f2>
 8004e2a:	f1c0 0320 	rsb	r3, r0, #32
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	dd6b      	ble.n	8004f0a <_dtoa_r+0x8e2>
 8004e32:	9b08      	ldr	r3, [sp, #32]
 8004e34:	f1c0 001c 	rsb	r0, r0, #28
 8004e38:	4403      	add	r3, r0
 8004e3a:	4480      	add	r8, r0
 8004e3c:	4406      	add	r6, r0
 8004e3e:	9308      	str	r3, [sp, #32]
 8004e40:	f1b8 0f00 	cmp.w	r8, #0
 8004e44:	dd05      	ble.n	8004e52 <_dtoa_r+0x82a>
 8004e46:	4649      	mov	r1, r9
 8004e48:	4642      	mov	r2, r8
 8004e4a:	4658      	mov	r0, fp
 8004e4c:	f000 fcbe 	bl	80057cc <__lshift>
 8004e50:	4681      	mov	r9, r0
 8004e52:	9b08      	ldr	r3, [sp, #32]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	dd05      	ble.n	8004e64 <_dtoa_r+0x83c>
 8004e58:	4621      	mov	r1, r4
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4658      	mov	r0, fp
 8004e5e:	f000 fcb5 	bl	80057cc <__lshift>
 8004e62:	4604      	mov	r4, r0
 8004e64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d059      	beq.n	8004f1e <_dtoa_r+0x8f6>
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4648      	mov	r0, r9
 8004e6e:	f000 fd19 	bl	80058a4 <__mcmp>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	da53      	bge.n	8004f1e <_dtoa_r+0x8f6>
 8004e76:	1e7b      	subs	r3, r7, #1
 8004e78:	9304      	str	r3, [sp, #16]
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	220a      	movs	r2, #10
 8004e80:	4658      	mov	r0, fp
 8004e82:	f000 faf7 	bl	8005474 <__multadd>
 8004e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e88:	4681      	mov	r9, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 8172 	beq.w	8005174 <_dtoa_r+0xb4c>
 8004e90:	2300      	movs	r3, #0
 8004e92:	4629      	mov	r1, r5
 8004e94:	220a      	movs	r2, #10
 8004e96:	4658      	mov	r0, fp
 8004e98:	f000 faec 	bl	8005474 <__multadd>
 8004e9c:	9b00      	ldr	r3, [sp, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	dc67      	bgt.n	8004f74 <_dtoa_r+0x94c>
 8004ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	dc41      	bgt.n	8004f2e <_dtoa_r+0x906>
 8004eaa:	e063      	b.n	8004f74 <_dtoa_r+0x94c>
 8004eac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004eae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004eb2:	e746      	b.n	8004d42 <_dtoa_r+0x71a>
 8004eb4:	9b07      	ldr	r3, [sp, #28]
 8004eb6:	1e5c      	subs	r4, r3, #1
 8004eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	bfbf      	itttt	lt
 8004ebe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004ec0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004ec2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004ec4:	1ae3      	sublt	r3, r4, r3
 8004ec6:	bfb4      	ite	lt
 8004ec8:	18d2      	addlt	r2, r2, r3
 8004eca:	1b1c      	subge	r4, r3, r4
 8004ecc:	9b07      	ldr	r3, [sp, #28]
 8004ece:	bfbc      	itt	lt
 8004ed0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004ed2:	2400      	movlt	r4, #0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bfb5      	itete	lt
 8004ed8:	eba8 0603 	sublt.w	r6, r8, r3
 8004edc:	9b07      	ldrge	r3, [sp, #28]
 8004ede:	2300      	movlt	r3, #0
 8004ee0:	4646      	movge	r6, r8
 8004ee2:	e730      	b.n	8004d46 <_dtoa_r+0x71e>
 8004ee4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ee6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ee8:	4646      	mov	r6, r8
 8004eea:	e735      	b.n	8004d58 <_dtoa_r+0x730>
 8004eec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004eee:	e75c      	b.n	8004daa <_dtoa_r+0x782>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e788      	b.n	8004e06 <_dtoa_r+0x7de>
 8004ef4:	3fe00000 	.word	0x3fe00000
 8004ef8:	40240000 	.word	0x40240000
 8004efc:	40140000 	.word	0x40140000
 8004f00:	9b02      	ldr	r3, [sp, #8]
 8004f02:	e780      	b.n	8004e06 <_dtoa_r+0x7de>
 8004f04:	2300      	movs	r3, #0
 8004f06:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f08:	e782      	b.n	8004e10 <_dtoa_r+0x7e8>
 8004f0a:	d099      	beq.n	8004e40 <_dtoa_r+0x818>
 8004f0c:	9a08      	ldr	r2, [sp, #32]
 8004f0e:	331c      	adds	r3, #28
 8004f10:	441a      	add	r2, r3
 8004f12:	4498      	add	r8, r3
 8004f14:	441e      	add	r6, r3
 8004f16:	9208      	str	r2, [sp, #32]
 8004f18:	e792      	b.n	8004e40 <_dtoa_r+0x818>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	e7f6      	b.n	8004f0c <_dtoa_r+0x8e4>
 8004f1e:	9b07      	ldr	r3, [sp, #28]
 8004f20:	9704      	str	r7, [sp, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	dc20      	bgt.n	8004f68 <_dtoa_r+0x940>
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	dd1e      	ble.n	8004f6c <_dtoa_r+0x944>
 8004f2e:	9b00      	ldr	r3, [sp, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f47f aec0 	bne.w	8004cb6 <_dtoa_r+0x68e>
 8004f36:	4621      	mov	r1, r4
 8004f38:	2205      	movs	r2, #5
 8004f3a:	4658      	mov	r0, fp
 8004f3c:	f000 fa9a 	bl	8005474 <__multadd>
 8004f40:	4601      	mov	r1, r0
 8004f42:	4604      	mov	r4, r0
 8004f44:	4648      	mov	r0, r9
 8004f46:	f000 fcad 	bl	80058a4 <__mcmp>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	f77f aeb3 	ble.w	8004cb6 <_dtoa_r+0x68e>
 8004f50:	4656      	mov	r6, sl
 8004f52:	2331      	movs	r3, #49	@ 0x31
 8004f54:	f806 3b01 	strb.w	r3, [r6], #1
 8004f58:	9b04      	ldr	r3, [sp, #16]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	9304      	str	r3, [sp, #16]
 8004f5e:	e6ae      	b.n	8004cbe <_dtoa_r+0x696>
 8004f60:	9c07      	ldr	r4, [sp, #28]
 8004f62:	9704      	str	r7, [sp, #16]
 8004f64:	4625      	mov	r5, r4
 8004f66:	e7f3      	b.n	8004f50 <_dtoa_r+0x928>
 8004f68:	9b07      	ldr	r3, [sp, #28]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 8104 	beq.w	800517c <_dtoa_r+0xb54>
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	dd05      	ble.n	8004f84 <_dtoa_r+0x95c>
 8004f78:	4629      	mov	r1, r5
 8004f7a:	4632      	mov	r2, r6
 8004f7c:	4658      	mov	r0, fp
 8004f7e:	f000 fc25 	bl	80057cc <__lshift>
 8004f82:	4605      	mov	r5, r0
 8004f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d05a      	beq.n	8005040 <_dtoa_r+0xa18>
 8004f8a:	6869      	ldr	r1, [r5, #4]
 8004f8c:	4658      	mov	r0, fp
 8004f8e:	f000 fa0f 	bl	80053b0 <_Balloc>
 8004f92:	4606      	mov	r6, r0
 8004f94:	b928      	cbnz	r0, 8004fa2 <_dtoa_r+0x97a>
 8004f96:	4b84      	ldr	r3, [pc, #528]	@ (80051a8 <_dtoa_r+0xb80>)
 8004f98:	4602      	mov	r2, r0
 8004f9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f9e:	f7ff bb5a 	b.w	8004656 <_dtoa_r+0x2e>
 8004fa2:	692a      	ldr	r2, [r5, #16]
 8004fa4:	3202      	adds	r2, #2
 8004fa6:	0092      	lsls	r2, r2, #2
 8004fa8:	f105 010c 	add.w	r1, r5, #12
 8004fac:	300c      	adds	r0, #12
 8004fae:	f000 ffaf 	bl	8005f10 <memcpy>
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	4658      	mov	r0, fp
 8004fb8:	f000 fc08 	bl	80057cc <__lshift>
 8004fbc:	f10a 0301 	add.w	r3, sl, #1
 8004fc0:	9307      	str	r3, [sp, #28]
 8004fc2:	9b00      	ldr	r3, [sp, #0]
 8004fc4:	4453      	add	r3, sl
 8004fc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fc8:	9b02      	ldr	r3, [sp, #8]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	462f      	mov	r7, r5
 8004fd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	9b07      	ldr	r3, [sp, #28]
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	4648      	mov	r0, r9
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	f7ff fa98 	bl	8004512 <quorem>
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	9002      	str	r0, [sp, #8]
 8004fe6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004fea:	4648      	mov	r0, r9
 8004fec:	f000 fc5a 	bl	80058a4 <__mcmp>
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	9008      	str	r0, [sp, #32]
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4658      	mov	r0, fp
 8004ff8:	f000 fc70 	bl	80058dc <__mdiff>
 8004ffc:	68c2      	ldr	r2, [r0, #12]
 8004ffe:	4606      	mov	r6, r0
 8005000:	bb02      	cbnz	r2, 8005044 <_dtoa_r+0xa1c>
 8005002:	4601      	mov	r1, r0
 8005004:	4648      	mov	r0, r9
 8005006:	f000 fc4d 	bl	80058a4 <__mcmp>
 800500a:	4602      	mov	r2, r0
 800500c:	4631      	mov	r1, r6
 800500e:	4658      	mov	r0, fp
 8005010:	920e      	str	r2, [sp, #56]	@ 0x38
 8005012:	f000 fa0d 	bl	8005430 <_Bfree>
 8005016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005018:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800501a:	9e07      	ldr	r6, [sp, #28]
 800501c:	ea43 0102 	orr.w	r1, r3, r2
 8005020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005022:	4319      	orrs	r1, r3
 8005024:	d110      	bne.n	8005048 <_dtoa_r+0xa20>
 8005026:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800502a:	d029      	beq.n	8005080 <_dtoa_r+0xa58>
 800502c:	9b08      	ldr	r3, [sp, #32]
 800502e:	2b00      	cmp	r3, #0
 8005030:	dd02      	ble.n	8005038 <_dtoa_r+0xa10>
 8005032:	9b02      	ldr	r3, [sp, #8]
 8005034:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005038:	9b00      	ldr	r3, [sp, #0]
 800503a:	f883 8000 	strb.w	r8, [r3]
 800503e:	e63f      	b.n	8004cc0 <_dtoa_r+0x698>
 8005040:	4628      	mov	r0, r5
 8005042:	e7bb      	b.n	8004fbc <_dtoa_r+0x994>
 8005044:	2201      	movs	r2, #1
 8005046:	e7e1      	b.n	800500c <_dtoa_r+0x9e4>
 8005048:	9b08      	ldr	r3, [sp, #32]
 800504a:	2b00      	cmp	r3, #0
 800504c:	db04      	blt.n	8005058 <_dtoa_r+0xa30>
 800504e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005050:	430b      	orrs	r3, r1
 8005052:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005054:	430b      	orrs	r3, r1
 8005056:	d120      	bne.n	800509a <_dtoa_r+0xa72>
 8005058:	2a00      	cmp	r2, #0
 800505a:	dded      	ble.n	8005038 <_dtoa_r+0xa10>
 800505c:	4649      	mov	r1, r9
 800505e:	2201      	movs	r2, #1
 8005060:	4658      	mov	r0, fp
 8005062:	f000 fbb3 	bl	80057cc <__lshift>
 8005066:	4621      	mov	r1, r4
 8005068:	4681      	mov	r9, r0
 800506a:	f000 fc1b 	bl	80058a4 <__mcmp>
 800506e:	2800      	cmp	r0, #0
 8005070:	dc03      	bgt.n	800507a <_dtoa_r+0xa52>
 8005072:	d1e1      	bne.n	8005038 <_dtoa_r+0xa10>
 8005074:	f018 0f01 	tst.w	r8, #1
 8005078:	d0de      	beq.n	8005038 <_dtoa_r+0xa10>
 800507a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800507e:	d1d8      	bne.n	8005032 <_dtoa_r+0xa0a>
 8005080:	9a00      	ldr	r2, [sp, #0]
 8005082:	2339      	movs	r3, #57	@ 0x39
 8005084:	7013      	strb	r3, [r2, #0]
 8005086:	4633      	mov	r3, r6
 8005088:	461e      	mov	r6, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005090:	2a39      	cmp	r2, #57	@ 0x39
 8005092:	d052      	beq.n	800513a <_dtoa_r+0xb12>
 8005094:	3201      	adds	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e612      	b.n	8004cc0 <_dtoa_r+0x698>
 800509a:	2a00      	cmp	r2, #0
 800509c:	dd07      	ble.n	80050ae <_dtoa_r+0xa86>
 800509e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80050a2:	d0ed      	beq.n	8005080 <_dtoa_r+0xa58>
 80050a4:	9a00      	ldr	r2, [sp, #0]
 80050a6:	f108 0301 	add.w	r3, r8, #1
 80050aa:	7013      	strb	r3, [r2, #0]
 80050ac:	e608      	b.n	8004cc0 <_dtoa_r+0x698>
 80050ae:	9b07      	ldr	r3, [sp, #28]
 80050b0:	9a07      	ldr	r2, [sp, #28]
 80050b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80050b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d028      	beq.n	800510e <_dtoa_r+0xae6>
 80050bc:	4649      	mov	r1, r9
 80050be:	2300      	movs	r3, #0
 80050c0:	220a      	movs	r2, #10
 80050c2:	4658      	mov	r0, fp
 80050c4:	f000 f9d6 	bl	8005474 <__multadd>
 80050c8:	42af      	cmp	r7, r5
 80050ca:	4681      	mov	r9, r0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	f04f 020a 	mov.w	r2, #10
 80050d4:	4639      	mov	r1, r7
 80050d6:	4658      	mov	r0, fp
 80050d8:	d107      	bne.n	80050ea <_dtoa_r+0xac2>
 80050da:	f000 f9cb 	bl	8005474 <__multadd>
 80050de:	4607      	mov	r7, r0
 80050e0:	4605      	mov	r5, r0
 80050e2:	9b07      	ldr	r3, [sp, #28]
 80050e4:	3301      	adds	r3, #1
 80050e6:	9307      	str	r3, [sp, #28]
 80050e8:	e774      	b.n	8004fd4 <_dtoa_r+0x9ac>
 80050ea:	f000 f9c3 	bl	8005474 <__multadd>
 80050ee:	4629      	mov	r1, r5
 80050f0:	4607      	mov	r7, r0
 80050f2:	2300      	movs	r3, #0
 80050f4:	220a      	movs	r2, #10
 80050f6:	4658      	mov	r0, fp
 80050f8:	f000 f9bc 	bl	8005474 <__multadd>
 80050fc:	4605      	mov	r5, r0
 80050fe:	e7f0      	b.n	80050e2 <_dtoa_r+0xaba>
 8005100:	9b00      	ldr	r3, [sp, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfcc      	ite	gt
 8005106:	461e      	movgt	r6, r3
 8005108:	2601      	movle	r6, #1
 800510a:	4456      	add	r6, sl
 800510c:	2700      	movs	r7, #0
 800510e:	4649      	mov	r1, r9
 8005110:	2201      	movs	r2, #1
 8005112:	4658      	mov	r0, fp
 8005114:	f000 fb5a 	bl	80057cc <__lshift>
 8005118:	4621      	mov	r1, r4
 800511a:	4681      	mov	r9, r0
 800511c:	f000 fbc2 	bl	80058a4 <__mcmp>
 8005120:	2800      	cmp	r0, #0
 8005122:	dcb0      	bgt.n	8005086 <_dtoa_r+0xa5e>
 8005124:	d102      	bne.n	800512c <_dtoa_r+0xb04>
 8005126:	f018 0f01 	tst.w	r8, #1
 800512a:	d1ac      	bne.n	8005086 <_dtoa_r+0xa5e>
 800512c:	4633      	mov	r3, r6
 800512e:	461e      	mov	r6, r3
 8005130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005134:	2a30      	cmp	r2, #48	@ 0x30
 8005136:	d0fa      	beq.n	800512e <_dtoa_r+0xb06>
 8005138:	e5c2      	b.n	8004cc0 <_dtoa_r+0x698>
 800513a:	459a      	cmp	sl, r3
 800513c:	d1a4      	bne.n	8005088 <_dtoa_r+0xa60>
 800513e:	9b04      	ldr	r3, [sp, #16]
 8005140:	3301      	adds	r3, #1
 8005142:	9304      	str	r3, [sp, #16]
 8005144:	2331      	movs	r3, #49	@ 0x31
 8005146:	f88a 3000 	strb.w	r3, [sl]
 800514a:	e5b9      	b.n	8004cc0 <_dtoa_r+0x698>
 800514c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800514e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80051ac <_dtoa_r+0xb84>
 8005152:	b11b      	cbz	r3, 800515c <_dtoa_r+0xb34>
 8005154:	f10a 0308 	add.w	r3, sl, #8
 8005158:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	4650      	mov	r0, sl
 800515e:	b019      	add	sp, #100	@ 0x64
 8005160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005166:	2b01      	cmp	r3, #1
 8005168:	f77f ae37 	ble.w	8004dda <_dtoa_r+0x7b2>
 800516c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800516e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005170:	2001      	movs	r0, #1
 8005172:	e655      	b.n	8004e20 <_dtoa_r+0x7f8>
 8005174:	9b00      	ldr	r3, [sp, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f77f aed6 	ble.w	8004f28 <_dtoa_r+0x900>
 800517c:	4656      	mov	r6, sl
 800517e:	4621      	mov	r1, r4
 8005180:	4648      	mov	r0, r9
 8005182:	f7ff f9c6 	bl	8004512 <quorem>
 8005186:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800518a:	f806 8b01 	strb.w	r8, [r6], #1
 800518e:	9b00      	ldr	r3, [sp, #0]
 8005190:	eba6 020a 	sub.w	r2, r6, sl
 8005194:	4293      	cmp	r3, r2
 8005196:	ddb3      	ble.n	8005100 <_dtoa_r+0xad8>
 8005198:	4649      	mov	r1, r9
 800519a:	2300      	movs	r3, #0
 800519c:	220a      	movs	r2, #10
 800519e:	4658      	mov	r0, fp
 80051a0:	f000 f968 	bl	8005474 <__multadd>
 80051a4:	4681      	mov	r9, r0
 80051a6:	e7ea      	b.n	800517e <_dtoa_r+0xb56>
 80051a8:	080066b4 	.word	0x080066b4
 80051ac:	08006638 	.word	0x08006638

080051b0 <_free_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4605      	mov	r5, r0
 80051b4:	2900      	cmp	r1, #0
 80051b6:	d041      	beq.n	800523c <_free_r+0x8c>
 80051b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051bc:	1f0c      	subs	r4, r1, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bfb8      	it	lt
 80051c2:	18e4      	addlt	r4, r4, r3
 80051c4:	f000 f8e8 	bl	8005398 <__malloc_lock>
 80051c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005240 <_free_r+0x90>)
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	b933      	cbnz	r3, 80051dc <_free_r+0x2c>
 80051ce:	6063      	str	r3, [r4, #4]
 80051d0:	6014      	str	r4, [r2, #0]
 80051d2:	4628      	mov	r0, r5
 80051d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d8:	f000 b8e4 	b.w	80053a4 <__malloc_unlock>
 80051dc:	42a3      	cmp	r3, r4
 80051de:	d908      	bls.n	80051f2 <_free_r+0x42>
 80051e0:	6820      	ldr	r0, [r4, #0]
 80051e2:	1821      	adds	r1, r4, r0
 80051e4:	428b      	cmp	r3, r1
 80051e6:	bf01      	itttt	eq
 80051e8:	6819      	ldreq	r1, [r3, #0]
 80051ea:	685b      	ldreq	r3, [r3, #4]
 80051ec:	1809      	addeq	r1, r1, r0
 80051ee:	6021      	streq	r1, [r4, #0]
 80051f0:	e7ed      	b.n	80051ce <_free_r+0x1e>
 80051f2:	461a      	mov	r2, r3
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	b10b      	cbz	r3, 80051fc <_free_r+0x4c>
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	d9fa      	bls.n	80051f2 <_free_r+0x42>
 80051fc:	6811      	ldr	r1, [r2, #0]
 80051fe:	1850      	adds	r0, r2, r1
 8005200:	42a0      	cmp	r0, r4
 8005202:	d10b      	bne.n	800521c <_free_r+0x6c>
 8005204:	6820      	ldr	r0, [r4, #0]
 8005206:	4401      	add	r1, r0
 8005208:	1850      	adds	r0, r2, r1
 800520a:	4283      	cmp	r3, r0
 800520c:	6011      	str	r1, [r2, #0]
 800520e:	d1e0      	bne.n	80051d2 <_free_r+0x22>
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	6053      	str	r3, [r2, #4]
 8005216:	4408      	add	r0, r1
 8005218:	6010      	str	r0, [r2, #0]
 800521a:	e7da      	b.n	80051d2 <_free_r+0x22>
 800521c:	d902      	bls.n	8005224 <_free_r+0x74>
 800521e:	230c      	movs	r3, #12
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	e7d6      	b.n	80051d2 <_free_r+0x22>
 8005224:	6820      	ldr	r0, [r4, #0]
 8005226:	1821      	adds	r1, r4, r0
 8005228:	428b      	cmp	r3, r1
 800522a:	bf04      	itt	eq
 800522c:	6819      	ldreq	r1, [r3, #0]
 800522e:	685b      	ldreq	r3, [r3, #4]
 8005230:	6063      	str	r3, [r4, #4]
 8005232:	bf04      	itt	eq
 8005234:	1809      	addeq	r1, r1, r0
 8005236:	6021      	streq	r1, [r4, #0]
 8005238:	6054      	str	r4, [r2, #4]
 800523a:	e7ca      	b.n	80051d2 <_free_r+0x22>
 800523c:	bd38      	pop	{r3, r4, r5, pc}
 800523e:	bf00      	nop
 8005240:	200003f4 	.word	0x200003f4

08005244 <malloc>:
 8005244:	4b02      	ldr	r3, [pc, #8]	@ (8005250 <malloc+0xc>)
 8005246:	4601      	mov	r1, r0
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	f000 b825 	b.w	8005298 <_malloc_r>
 800524e:	bf00      	nop
 8005250:	20000018 	.word	0x20000018

08005254 <sbrk_aligned>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4e0f      	ldr	r6, [pc, #60]	@ (8005294 <sbrk_aligned+0x40>)
 8005258:	460c      	mov	r4, r1
 800525a:	6831      	ldr	r1, [r6, #0]
 800525c:	4605      	mov	r5, r0
 800525e:	b911      	cbnz	r1, 8005266 <sbrk_aligned+0x12>
 8005260:	f000 fe46 	bl	8005ef0 <_sbrk_r>
 8005264:	6030      	str	r0, [r6, #0]
 8005266:	4621      	mov	r1, r4
 8005268:	4628      	mov	r0, r5
 800526a:	f000 fe41 	bl	8005ef0 <_sbrk_r>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	d103      	bne.n	800527a <sbrk_aligned+0x26>
 8005272:	f04f 34ff 	mov.w	r4, #4294967295
 8005276:	4620      	mov	r0, r4
 8005278:	bd70      	pop	{r4, r5, r6, pc}
 800527a:	1cc4      	adds	r4, r0, #3
 800527c:	f024 0403 	bic.w	r4, r4, #3
 8005280:	42a0      	cmp	r0, r4
 8005282:	d0f8      	beq.n	8005276 <sbrk_aligned+0x22>
 8005284:	1a21      	subs	r1, r4, r0
 8005286:	4628      	mov	r0, r5
 8005288:	f000 fe32 	bl	8005ef0 <_sbrk_r>
 800528c:	3001      	adds	r0, #1
 800528e:	d1f2      	bne.n	8005276 <sbrk_aligned+0x22>
 8005290:	e7ef      	b.n	8005272 <sbrk_aligned+0x1e>
 8005292:	bf00      	nop
 8005294:	200003f0 	.word	0x200003f0

08005298 <_malloc_r>:
 8005298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800529c:	1ccd      	adds	r5, r1, #3
 800529e:	f025 0503 	bic.w	r5, r5, #3
 80052a2:	3508      	adds	r5, #8
 80052a4:	2d0c      	cmp	r5, #12
 80052a6:	bf38      	it	cc
 80052a8:	250c      	movcc	r5, #12
 80052aa:	2d00      	cmp	r5, #0
 80052ac:	4606      	mov	r6, r0
 80052ae:	db01      	blt.n	80052b4 <_malloc_r+0x1c>
 80052b0:	42a9      	cmp	r1, r5
 80052b2:	d904      	bls.n	80052be <_malloc_r+0x26>
 80052b4:	230c      	movs	r3, #12
 80052b6:	6033      	str	r3, [r6, #0]
 80052b8:	2000      	movs	r0, #0
 80052ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005394 <_malloc_r+0xfc>
 80052c2:	f000 f869 	bl	8005398 <__malloc_lock>
 80052c6:	f8d8 3000 	ldr.w	r3, [r8]
 80052ca:	461c      	mov	r4, r3
 80052cc:	bb44      	cbnz	r4, 8005320 <_malloc_r+0x88>
 80052ce:	4629      	mov	r1, r5
 80052d0:	4630      	mov	r0, r6
 80052d2:	f7ff ffbf 	bl	8005254 <sbrk_aligned>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	4604      	mov	r4, r0
 80052da:	d158      	bne.n	800538e <_malloc_r+0xf6>
 80052dc:	f8d8 4000 	ldr.w	r4, [r8]
 80052e0:	4627      	mov	r7, r4
 80052e2:	2f00      	cmp	r7, #0
 80052e4:	d143      	bne.n	800536e <_malloc_r+0xd6>
 80052e6:	2c00      	cmp	r4, #0
 80052e8:	d04b      	beq.n	8005382 <_malloc_r+0xea>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	4639      	mov	r1, r7
 80052ee:	4630      	mov	r0, r6
 80052f0:	eb04 0903 	add.w	r9, r4, r3
 80052f4:	f000 fdfc 	bl	8005ef0 <_sbrk_r>
 80052f8:	4581      	cmp	r9, r0
 80052fa:	d142      	bne.n	8005382 <_malloc_r+0xea>
 80052fc:	6821      	ldr	r1, [r4, #0]
 80052fe:	1a6d      	subs	r5, r5, r1
 8005300:	4629      	mov	r1, r5
 8005302:	4630      	mov	r0, r6
 8005304:	f7ff ffa6 	bl	8005254 <sbrk_aligned>
 8005308:	3001      	adds	r0, #1
 800530a:	d03a      	beq.n	8005382 <_malloc_r+0xea>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	442b      	add	r3, r5
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	f8d8 3000 	ldr.w	r3, [r8]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	bb62      	cbnz	r2, 8005374 <_malloc_r+0xdc>
 800531a:	f8c8 7000 	str.w	r7, [r8]
 800531e:	e00f      	b.n	8005340 <_malloc_r+0xa8>
 8005320:	6822      	ldr	r2, [r4, #0]
 8005322:	1b52      	subs	r2, r2, r5
 8005324:	d420      	bmi.n	8005368 <_malloc_r+0xd0>
 8005326:	2a0b      	cmp	r2, #11
 8005328:	d917      	bls.n	800535a <_malloc_r+0xc2>
 800532a:	1961      	adds	r1, r4, r5
 800532c:	42a3      	cmp	r3, r4
 800532e:	6025      	str	r5, [r4, #0]
 8005330:	bf18      	it	ne
 8005332:	6059      	strne	r1, [r3, #4]
 8005334:	6863      	ldr	r3, [r4, #4]
 8005336:	bf08      	it	eq
 8005338:	f8c8 1000 	streq.w	r1, [r8]
 800533c:	5162      	str	r2, [r4, r5]
 800533e:	604b      	str	r3, [r1, #4]
 8005340:	4630      	mov	r0, r6
 8005342:	f000 f82f 	bl	80053a4 <__malloc_unlock>
 8005346:	f104 000b 	add.w	r0, r4, #11
 800534a:	1d23      	adds	r3, r4, #4
 800534c:	f020 0007 	bic.w	r0, r0, #7
 8005350:	1ac2      	subs	r2, r0, r3
 8005352:	bf1c      	itt	ne
 8005354:	1a1b      	subne	r3, r3, r0
 8005356:	50a3      	strne	r3, [r4, r2]
 8005358:	e7af      	b.n	80052ba <_malloc_r+0x22>
 800535a:	6862      	ldr	r2, [r4, #4]
 800535c:	42a3      	cmp	r3, r4
 800535e:	bf0c      	ite	eq
 8005360:	f8c8 2000 	streq.w	r2, [r8]
 8005364:	605a      	strne	r2, [r3, #4]
 8005366:	e7eb      	b.n	8005340 <_malloc_r+0xa8>
 8005368:	4623      	mov	r3, r4
 800536a:	6864      	ldr	r4, [r4, #4]
 800536c:	e7ae      	b.n	80052cc <_malloc_r+0x34>
 800536e:	463c      	mov	r4, r7
 8005370:	687f      	ldr	r7, [r7, #4]
 8005372:	e7b6      	b.n	80052e2 <_malloc_r+0x4a>
 8005374:	461a      	mov	r2, r3
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	42a3      	cmp	r3, r4
 800537a:	d1fb      	bne.n	8005374 <_malloc_r+0xdc>
 800537c:	2300      	movs	r3, #0
 800537e:	6053      	str	r3, [r2, #4]
 8005380:	e7de      	b.n	8005340 <_malloc_r+0xa8>
 8005382:	230c      	movs	r3, #12
 8005384:	6033      	str	r3, [r6, #0]
 8005386:	4630      	mov	r0, r6
 8005388:	f000 f80c 	bl	80053a4 <__malloc_unlock>
 800538c:	e794      	b.n	80052b8 <_malloc_r+0x20>
 800538e:	6005      	str	r5, [r0, #0]
 8005390:	e7d6      	b.n	8005340 <_malloc_r+0xa8>
 8005392:	bf00      	nop
 8005394:	200003f4 	.word	0x200003f4

08005398 <__malloc_lock>:
 8005398:	4801      	ldr	r0, [pc, #4]	@ (80053a0 <__malloc_lock+0x8>)
 800539a:	f7ff b8b8 	b.w	800450e <__retarget_lock_acquire_recursive>
 800539e:	bf00      	nop
 80053a0:	200003ec 	.word	0x200003ec

080053a4 <__malloc_unlock>:
 80053a4:	4801      	ldr	r0, [pc, #4]	@ (80053ac <__malloc_unlock+0x8>)
 80053a6:	f7ff b8b3 	b.w	8004510 <__retarget_lock_release_recursive>
 80053aa:	bf00      	nop
 80053ac:	200003ec 	.word	0x200003ec

080053b0 <_Balloc>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	69c6      	ldr	r6, [r0, #28]
 80053b4:	4604      	mov	r4, r0
 80053b6:	460d      	mov	r5, r1
 80053b8:	b976      	cbnz	r6, 80053d8 <_Balloc+0x28>
 80053ba:	2010      	movs	r0, #16
 80053bc:	f7ff ff42 	bl	8005244 <malloc>
 80053c0:	4602      	mov	r2, r0
 80053c2:	61e0      	str	r0, [r4, #28]
 80053c4:	b920      	cbnz	r0, 80053d0 <_Balloc+0x20>
 80053c6:	4b18      	ldr	r3, [pc, #96]	@ (8005428 <_Balloc+0x78>)
 80053c8:	4818      	ldr	r0, [pc, #96]	@ (800542c <_Balloc+0x7c>)
 80053ca:	216b      	movs	r1, #107	@ 0x6b
 80053cc:	f000 fdae 	bl	8005f2c <__assert_func>
 80053d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053d4:	6006      	str	r6, [r0, #0]
 80053d6:	60c6      	str	r6, [r0, #12]
 80053d8:	69e6      	ldr	r6, [r4, #28]
 80053da:	68f3      	ldr	r3, [r6, #12]
 80053dc:	b183      	cbz	r3, 8005400 <_Balloc+0x50>
 80053de:	69e3      	ldr	r3, [r4, #28]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053e6:	b9b8      	cbnz	r0, 8005418 <_Balloc+0x68>
 80053e8:	2101      	movs	r1, #1
 80053ea:	fa01 f605 	lsl.w	r6, r1, r5
 80053ee:	1d72      	adds	r2, r6, #5
 80053f0:	0092      	lsls	r2, r2, #2
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 fdb8 	bl	8005f68 <_calloc_r>
 80053f8:	b160      	cbz	r0, 8005414 <_Balloc+0x64>
 80053fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053fe:	e00e      	b.n	800541e <_Balloc+0x6e>
 8005400:	2221      	movs	r2, #33	@ 0x21
 8005402:	2104      	movs	r1, #4
 8005404:	4620      	mov	r0, r4
 8005406:	f000 fdaf 	bl	8005f68 <_calloc_r>
 800540a:	69e3      	ldr	r3, [r4, #28]
 800540c:	60f0      	str	r0, [r6, #12]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e4      	bne.n	80053de <_Balloc+0x2e>
 8005414:	2000      	movs	r0, #0
 8005416:	bd70      	pop	{r4, r5, r6, pc}
 8005418:	6802      	ldr	r2, [r0, #0]
 800541a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800541e:	2300      	movs	r3, #0
 8005420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005424:	e7f7      	b.n	8005416 <_Balloc+0x66>
 8005426:	bf00      	nop
 8005428:	08006645 	.word	0x08006645
 800542c:	080066c5 	.word	0x080066c5

08005430 <_Bfree>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	69c6      	ldr	r6, [r0, #28]
 8005434:	4605      	mov	r5, r0
 8005436:	460c      	mov	r4, r1
 8005438:	b976      	cbnz	r6, 8005458 <_Bfree+0x28>
 800543a:	2010      	movs	r0, #16
 800543c:	f7ff ff02 	bl	8005244 <malloc>
 8005440:	4602      	mov	r2, r0
 8005442:	61e8      	str	r0, [r5, #28]
 8005444:	b920      	cbnz	r0, 8005450 <_Bfree+0x20>
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <_Bfree+0x3c>)
 8005448:	4809      	ldr	r0, [pc, #36]	@ (8005470 <_Bfree+0x40>)
 800544a:	218f      	movs	r1, #143	@ 0x8f
 800544c:	f000 fd6e 	bl	8005f2c <__assert_func>
 8005450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005454:	6006      	str	r6, [r0, #0]
 8005456:	60c6      	str	r6, [r0, #12]
 8005458:	b13c      	cbz	r4, 800546a <_Bfree+0x3a>
 800545a:	69eb      	ldr	r3, [r5, #28]
 800545c:	6862      	ldr	r2, [r4, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005464:	6021      	str	r1, [r4, #0]
 8005466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	08006645 	.word	0x08006645
 8005470:	080066c5 	.word	0x080066c5

08005474 <__multadd>:
 8005474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005478:	690d      	ldr	r5, [r1, #16]
 800547a:	4607      	mov	r7, r0
 800547c:	460c      	mov	r4, r1
 800547e:	461e      	mov	r6, r3
 8005480:	f101 0c14 	add.w	ip, r1, #20
 8005484:	2000      	movs	r0, #0
 8005486:	f8dc 3000 	ldr.w	r3, [ip]
 800548a:	b299      	uxth	r1, r3
 800548c:	fb02 6101 	mla	r1, r2, r1, r6
 8005490:	0c1e      	lsrs	r6, r3, #16
 8005492:	0c0b      	lsrs	r3, r1, #16
 8005494:	fb02 3306 	mla	r3, r2, r6, r3
 8005498:	b289      	uxth	r1, r1
 800549a:	3001      	adds	r0, #1
 800549c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054a0:	4285      	cmp	r5, r0
 80054a2:	f84c 1b04 	str.w	r1, [ip], #4
 80054a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054aa:	dcec      	bgt.n	8005486 <__multadd+0x12>
 80054ac:	b30e      	cbz	r6, 80054f2 <__multadd+0x7e>
 80054ae:	68a3      	ldr	r3, [r4, #8]
 80054b0:	42ab      	cmp	r3, r5
 80054b2:	dc19      	bgt.n	80054e8 <__multadd+0x74>
 80054b4:	6861      	ldr	r1, [r4, #4]
 80054b6:	4638      	mov	r0, r7
 80054b8:	3101      	adds	r1, #1
 80054ba:	f7ff ff79 	bl	80053b0 <_Balloc>
 80054be:	4680      	mov	r8, r0
 80054c0:	b928      	cbnz	r0, 80054ce <__multadd+0x5a>
 80054c2:	4602      	mov	r2, r0
 80054c4:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <__multadd+0x84>)
 80054c6:	480d      	ldr	r0, [pc, #52]	@ (80054fc <__multadd+0x88>)
 80054c8:	21ba      	movs	r1, #186	@ 0xba
 80054ca:	f000 fd2f 	bl	8005f2c <__assert_func>
 80054ce:	6922      	ldr	r2, [r4, #16]
 80054d0:	3202      	adds	r2, #2
 80054d2:	f104 010c 	add.w	r1, r4, #12
 80054d6:	0092      	lsls	r2, r2, #2
 80054d8:	300c      	adds	r0, #12
 80054da:	f000 fd19 	bl	8005f10 <memcpy>
 80054de:	4621      	mov	r1, r4
 80054e0:	4638      	mov	r0, r7
 80054e2:	f7ff ffa5 	bl	8005430 <_Bfree>
 80054e6:	4644      	mov	r4, r8
 80054e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054ec:	3501      	adds	r5, #1
 80054ee:	615e      	str	r6, [r3, #20]
 80054f0:	6125      	str	r5, [r4, #16]
 80054f2:	4620      	mov	r0, r4
 80054f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f8:	080066b4 	.word	0x080066b4
 80054fc:	080066c5 	.word	0x080066c5

08005500 <__hi0bits>:
 8005500:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005504:	4603      	mov	r3, r0
 8005506:	bf36      	itet	cc
 8005508:	0403      	lslcc	r3, r0, #16
 800550a:	2000      	movcs	r0, #0
 800550c:	2010      	movcc	r0, #16
 800550e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005512:	bf3c      	itt	cc
 8005514:	021b      	lslcc	r3, r3, #8
 8005516:	3008      	addcc	r0, #8
 8005518:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800551c:	bf3c      	itt	cc
 800551e:	011b      	lslcc	r3, r3, #4
 8005520:	3004      	addcc	r0, #4
 8005522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005526:	bf3c      	itt	cc
 8005528:	009b      	lslcc	r3, r3, #2
 800552a:	3002      	addcc	r0, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	db05      	blt.n	800553c <__hi0bits+0x3c>
 8005530:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005534:	f100 0001 	add.w	r0, r0, #1
 8005538:	bf08      	it	eq
 800553a:	2020      	moveq	r0, #32
 800553c:	4770      	bx	lr

0800553e <__lo0bits>:
 800553e:	6803      	ldr	r3, [r0, #0]
 8005540:	4602      	mov	r2, r0
 8005542:	f013 0007 	ands.w	r0, r3, #7
 8005546:	d00b      	beq.n	8005560 <__lo0bits+0x22>
 8005548:	07d9      	lsls	r1, r3, #31
 800554a:	d421      	bmi.n	8005590 <__lo0bits+0x52>
 800554c:	0798      	lsls	r0, r3, #30
 800554e:	bf49      	itett	mi
 8005550:	085b      	lsrmi	r3, r3, #1
 8005552:	089b      	lsrpl	r3, r3, #2
 8005554:	2001      	movmi	r0, #1
 8005556:	6013      	strmi	r3, [r2, #0]
 8005558:	bf5c      	itt	pl
 800555a:	6013      	strpl	r3, [r2, #0]
 800555c:	2002      	movpl	r0, #2
 800555e:	4770      	bx	lr
 8005560:	b299      	uxth	r1, r3
 8005562:	b909      	cbnz	r1, 8005568 <__lo0bits+0x2a>
 8005564:	0c1b      	lsrs	r3, r3, #16
 8005566:	2010      	movs	r0, #16
 8005568:	b2d9      	uxtb	r1, r3
 800556a:	b909      	cbnz	r1, 8005570 <__lo0bits+0x32>
 800556c:	3008      	adds	r0, #8
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	0719      	lsls	r1, r3, #28
 8005572:	bf04      	itt	eq
 8005574:	091b      	lsreq	r3, r3, #4
 8005576:	3004      	addeq	r0, #4
 8005578:	0799      	lsls	r1, r3, #30
 800557a:	bf04      	itt	eq
 800557c:	089b      	lsreq	r3, r3, #2
 800557e:	3002      	addeq	r0, #2
 8005580:	07d9      	lsls	r1, r3, #31
 8005582:	d403      	bmi.n	800558c <__lo0bits+0x4e>
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	f100 0001 	add.w	r0, r0, #1
 800558a:	d003      	beq.n	8005594 <__lo0bits+0x56>
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	4770      	bx	lr
 8005590:	2000      	movs	r0, #0
 8005592:	4770      	bx	lr
 8005594:	2020      	movs	r0, #32
 8005596:	4770      	bx	lr

08005598 <__i2b>:
 8005598:	b510      	push	{r4, lr}
 800559a:	460c      	mov	r4, r1
 800559c:	2101      	movs	r1, #1
 800559e:	f7ff ff07 	bl	80053b0 <_Balloc>
 80055a2:	4602      	mov	r2, r0
 80055a4:	b928      	cbnz	r0, 80055b2 <__i2b+0x1a>
 80055a6:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <__i2b+0x24>)
 80055a8:	4805      	ldr	r0, [pc, #20]	@ (80055c0 <__i2b+0x28>)
 80055aa:	f240 1145 	movw	r1, #325	@ 0x145
 80055ae:	f000 fcbd 	bl	8005f2c <__assert_func>
 80055b2:	2301      	movs	r3, #1
 80055b4:	6144      	str	r4, [r0, #20]
 80055b6:	6103      	str	r3, [r0, #16]
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	bf00      	nop
 80055bc:	080066b4 	.word	0x080066b4
 80055c0:	080066c5 	.word	0x080066c5

080055c4 <__multiply>:
 80055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	4614      	mov	r4, r2
 80055ca:	690a      	ldr	r2, [r1, #16]
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	bfa8      	it	ge
 80055d2:	4623      	movge	r3, r4
 80055d4:	460f      	mov	r7, r1
 80055d6:	bfa4      	itt	ge
 80055d8:	460c      	movge	r4, r1
 80055da:	461f      	movge	r7, r3
 80055dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80055e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80055e4:	68a3      	ldr	r3, [r4, #8]
 80055e6:	6861      	ldr	r1, [r4, #4]
 80055e8:	eb0a 0609 	add.w	r6, sl, r9
 80055ec:	42b3      	cmp	r3, r6
 80055ee:	b085      	sub	sp, #20
 80055f0:	bfb8      	it	lt
 80055f2:	3101      	addlt	r1, #1
 80055f4:	f7ff fedc 	bl	80053b0 <_Balloc>
 80055f8:	b930      	cbnz	r0, 8005608 <__multiply+0x44>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4b44      	ldr	r3, [pc, #272]	@ (8005710 <__multiply+0x14c>)
 80055fe:	4845      	ldr	r0, [pc, #276]	@ (8005714 <__multiply+0x150>)
 8005600:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005604:	f000 fc92 	bl	8005f2c <__assert_func>
 8005608:	f100 0514 	add.w	r5, r0, #20
 800560c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005610:	462b      	mov	r3, r5
 8005612:	2200      	movs	r2, #0
 8005614:	4543      	cmp	r3, r8
 8005616:	d321      	bcc.n	800565c <__multiply+0x98>
 8005618:	f107 0114 	add.w	r1, r7, #20
 800561c:	f104 0214 	add.w	r2, r4, #20
 8005620:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005624:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005628:	9302      	str	r3, [sp, #8]
 800562a:	1b13      	subs	r3, r2, r4
 800562c:	3b15      	subs	r3, #21
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	3304      	adds	r3, #4
 8005634:	f104 0715 	add.w	r7, r4, #21
 8005638:	42ba      	cmp	r2, r7
 800563a:	bf38      	it	cc
 800563c:	2304      	movcc	r3, #4
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	9b02      	ldr	r3, [sp, #8]
 8005642:	9103      	str	r1, [sp, #12]
 8005644:	428b      	cmp	r3, r1
 8005646:	d80c      	bhi.n	8005662 <__multiply+0x9e>
 8005648:	2e00      	cmp	r6, #0
 800564a:	dd03      	ble.n	8005654 <__multiply+0x90>
 800564c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005650:	2b00      	cmp	r3, #0
 8005652:	d05b      	beq.n	800570c <__multiply+0x148>
 8005654:	6106      	str	r6, [r0, #16]
 8005656:	b005      	add	sp, #20
 8005658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565c:	f843 2b04 	str.w	r2, [r3], #4
 8005660:	e7d8      	b.n	8005614 <__multiply+0x50>
 8005662:	f8b1 a000 	ldrh.w	sl, [r1]
 8005666:	f1ba 0f00 	cmp.w	sl, #0
 800566a:	d024      	beq.n	80056b6 <__multiply+0xf2>
 800566c:	f104 0e14 	add.w	lr, r4, #20
 8005670:	46a9      	mov	r9, r5
 8005672:	f04f 0c00 	mov.w	ip, #0
 8005676:	f85e 7b04 	ldr.w	r7, [lr], #4
 800567a:	f8d9 3000 	ldr.w	r3, [r9]
 800567e:	fa1f fb87 	uxth.w	fp, r7
 8005682:	b29b      	uxth	r3, r3
 8005684:	fb0a 330b 	mla	r3, sl, fp, r3
 8005688:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800568c:	f8d9 7000 	ldr.w	r7, [r9]
 8005690:	4463      	add	r3, ip
 8005692:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005696:	fb0a c70b 	mla	r7, sl, fp, ip
 800569a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800569e:	b29b      	uxth	r3, r3
 80056a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056a4:	4572      	cmp	r2, lr
 80056a6:	f849 3b04 	str.w	r3, [r9], #4
 80056aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80056ae:	d8e2      	bhi.n	8005676 <__multiply+0xb2>
 80056b0:	9b01      	ldr	r3, [sp, #4]
 80056b2:	f845 c003 	str.w	ip, [r5, r3]
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80056bc:	3104      	adds	r1, #4
 80056be:	f1b9 0f00 	cmp.w	r9, #0
 80056c2:	d021      	beq.n	8005708 <__multiply+0x144>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	f104 0c14 	add.w	ip, r4, #20
 80056ca:	46ae      	mov	lr, r5
 80056cc:	f04f 0a00 	mov.w	sl, #0
 80056d0:	f8bc b000 	ldrh.w	fp, [ip]
 80056d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80056d8:	fb09 770b 	mla	r7, r9, fp, r7
 80056dc:	4457      	add	r7, sl
 80056de:	b29b      	uxth	r3, r3
 80056e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056e4:	f84e 3b04 	str.w	r3, [lr], #4
 80056e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056f0:	f8be 3000 	ldrh.w	r3, [lr]
 80056f4:	fb09 330a 	mla	r3, r9, sl, r3
 80056f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80056fc:	4562      	cmp	r2, ip
 80056fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005702:	d8e5      	bhi.n	80056d0 <__multiply+0x10c>
 8005704:	9f01      	ldr	r7, [sp, #4]
 8005706:	51eb      	str	r3, [r5, r7]
 8005708:	3504      	adds	r5, #4
 800570a:	e799      	b.n	8005640 <__multiply+0x7c>
 800570c:	3e01      	subs	r6, #1
 800570e:	e79b      	b.n	8005648 <__multiply+0x84>
 8005710:	080066b4 	.word	0x080066b4
 8005714:	080066c5 	.word	0x080066c5

08005718 <__pow5mult>:
 8005718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800571c:	4615      	mov	r5, r2
 800571e:	f012 0203 	ands.w	r2, r2, #3
 8005722:	4607      	mov	r7, r0
 8005724:	460e      	mov	r6, r1
 8005726:	d007      	beq.n	8005738 <__pow5mult+0x20>
 8005728:	4c25      	ldr	r4, [pc, #148]	@ (80057c0 <__pow5mult+0xa8>)
 800572a:	3a01      	subs	r2, #1
 800572c:	2300      	movs	r3, #0
 800572e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005732:	f7ff fe9f 	bl	8005474 <__multadd>
 8005736:	4606      	mov	r6, r0
 8005738:	10ad      	asrs	r5, r5, #2
 800573a:	d03d      	beq.n	80057b8 <__pow5mult+0xa0>
 800573c:	69fc      	ldr	r4, [r7, #28]
 800573e:	b97c      	cbnz	r4, 8005760 <__pow5mult+0x48>
 8005740:	2010      	movs	r0, #16
 8005742:	f7ff fd7f 	bl	8005244 <malloc>
 8005746:	4602      	mov	r2, r0
 8005748:	61f8      	str	r0, [r7, #28]
 800574a:	b928      	cbnz	r0, 8005758 <__pow5mult+0x40>
 800574c:	4b1d      	ldr	r3, [pc, #116]	@ (80057c4 <__pow5mult+0xac>)
 800574e:	481e      	ldr	r0, [pc, #120]	@ (80057c8 <__pow5mult+0xb0>)
 8005750:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005754:	f000 fbea 	bl	8005f2c <__assert_func>
 8005758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800575c:	6004      	str	r4, [r0, #0]
 800575e:	60c4      	str	r4, [r0, #12]
 8005760:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005768:	b94c      	cbnz	r4, 800577e <__pow5mult+0x66>
 800576a:	f240 2171 	movw	r1, #625	@ 0x271
 800576e:	4638      	mov	r0, r7
 8005770:	f7ff ff12 	bl	8005598 <__i2b>
 8005774:	2300      	movs	r3, #0
 8005776:	f8c8 0008 	str.w	r0, [r8, #8]
 800577a:	4604      	mov	r4, r0
 800577c:	6003      	str	r3, [r0, #0]
 800577e:	f04f 0900 	mov.w	r9, #0
 8005782:	07eb      	lsls	r3, r5, #31
 8005784:	d50a      	bpl.n	800579c <__pow5mult+0x84>
 8005786:	4631      	mov	r1, r6
 8005788:	4622      	mov	r2, r4
 800578a:	4638      	mov	r0, r7
 800578c:	f7ff ff1a 	bl	80055c4 <__multiply>
 8005790:	4631      	mov	r1, r6
 8005792:	4680      	mov	r8, r0
 8005794:	4638      	mov	r0, r7
 8005796:	f7ff fe4b 	bl	8005430 <_Bfree>
 800579a:	4646      	mov	r6, r8
 800579c:	106d      	asrs	r5, r5, #1
 800579e:	d00b      	beq.n	80057b8 <__pow5mult+0xa0>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	b938      	cbnz	r0, 80057b4 <__pow5mult+0x9c>
 80057a4:	4622      	mov	r2, r4
 80057a6:	4621      	mov	r1, r4
 80057a8:	4638      	mov	r0, r7
 80057aa:	f7ff ff0b 	bl	80055c4 <__multiply>
 80057ae:	6020      	str	r0, [r4, #0]
 80057b0:	f8c0 9000 	str.w	r9, [r0]
 80057b4:	4604      	mov	r4, r0
 80057b6:	e7e4      	b.n	8005782 <__pow5mult+0x6a>
 80057b8:	4630      	mov	r0, r6
 80057ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057be:	bf00      	nop
 80057c0:	08006720 	.word	0x08006720
 80057c4:	08006645 	.word	0x08006645
 80057c8:	080066c5 	.word	0x080066c5

080057cc <__lshift>:
 80057cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d0:	460c      	mov	r4, r1
 80057d2:	6849      	ldr	r1, [r1, #4]
 80057d4:	6923      	ldr	r3, [r4, #16]
 80057d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057da:	68a3      	ldr	r3, [r4, #8]
 80057dc:	4607      	mov	r7, r0
 80057de:	4691      	mov	r9, r2
 80057e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057e4:	f108 0601 	add.w	r6, r8, #1
 80057e8:	42b3      	cmp	r3, r6
 80057ea:	db0b      	blt.n	8005804 <__lshift+0x38>
 80057ec:	4638      	mov	r0, r7
 80057ee:	f7ff fddf 	bl	80053b0 <_Balloc>
 80057f2:	4605      	mov	r5, r0
 80057f4:	b948      	cbnz	r0, 800580a <__lshift+0x3e>
 80057f6:	4602      	mov	r2, r0
 80057f8:	4b28      	ldr	r3, [pc, #160]	@ (800589c <__lshift+0xd0>)
 80057fa:	4829      	ldr	r0, [pc, #164]	@ (80058a0 <__lshift+0xd4>)
 80057fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005800:	f000 fb94 	bl	8005f2c <__assert_func>
 8005804:	3101      	adds	r1, #1
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	e7ee      	b.n	80057e8 <__lshift+0x1c>
 800580a:	2300      	movs	r3, #0
 800580c:	f100 0114 	add.w	r1, r0, #20
 8005810:	f100 0210 	add.w	r2, r0, #16
 8005814:	4618      	mov	r0, r3
 8005816:	4553      	cmp	r3, sl
 8005818:	db33      	blt.n	8005882 <__lshift+0xb6>
 800581a:	6920      	ldr	r0, [r4, #16]
 800581c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005820:	f104 0314 	add.w	r3, r4, #20
 8005824:	f019 091f 	ands.w	r9, r9, #31
 8005828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800582c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005830:	d02b      	beq.n	800588a <__lshift+0xbe>
 8005832:	f1c9 0e20 	rsb	lr, r9, #32
 8005836:	468a      	mov	sl, r1
 8005838:	2200      	movs	r2, #0
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	fa00 f009 	lsl.w	r0, r0, r9
 8005840:	4310      	orrs	r0, r2
 8005842:	f84a 0b04 	str.w	r0, [sl], #4
 8005846:	f853 2b04 	ldr.w	r2, [r3], #4
 800584a:	459c      	cmp	ip, r3
 800584c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005850:	d8f3      	bhi.n	800583a <__lshift+0x6e>
 8005852:	ebac 0304 	sub.w	r3, ip, r4
 8005856:	3b15      	subs	r3, #21
 8005858:	f023 0303 	bic.w	r3, r3, #3
 800585c:	3304      	adds	r3, #4
 800585e:	f104 0015 	add.w	r0, r4, #21
 8005862:	4584      	cmp	ip, r0
 8005864:	bf38      	it	cc
 8005866:	2304      	movcc	r3, #4
 8005868:	50ca      	str	r2, [r1, r3]
 800586a:	b10a      	cbz	r2, 8005870 <__lshift+0xa4>
 800586c:	f108 0602 	add.w	r6, r8, #2
 8005870:	3e01      	subs	r6, #1
 8005872:	4638      	mov	r0, r7
 8005874:	612e      	str	r6, [r5, #16]
 8005876:	4621      	mov	r1, r4
 8005878:	f7ff fdda 	bl	8005430 <_Bfree>
 800587c:	4628      	mov	r0, r5
 800587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005882:	f842 0f04 	str.w	r0, [r2, #4]!
 8005886:	3301      	adds	r3, #1
 8005888:	e7c5      	b.n	8005816 <__lshift+0x4a>
 800588a:	3904      	subs	r1, #4
 800588c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005890:	f841 2f04 	str.w	r2, [r1, #4]!
 8005894:	459c      	cmp	ip, r3
 8005896:	d8f9      	bhi.n	800588c <__lshift+0xc0>
 8005898:	e7ea      	b.n	8005870 <__lshift+0xa4>
 800589a:	bf00      	nop
 800589c:	080066b4 	.word	0x080066b4
 80058a0:	080066c5 	.word	0x080066c5

080058a4 <__mcmp>:
 80058a4:	690a      	ldr	r2, [r1, #16]
 80058a6:	4603      	mov	r3, r0
 80058a8:	6900      	ldr	r0, [r0, #16]
 80058aa:	1a80      	subs	r0, r0, r2
 80058ac:	b530      	push	{r4, r5, lr}
 80058ae:	d10e      	bne.n	80058ce <__mcmp+0x2a>
 80058b0:	3314      	adds	r3, #20
 80058b2:	3114      	adds	r1, #20
 80058b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80058b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80058bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80058c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80058c4:	4295      	cmp	r5, r2
 80058c6:	d003      	beq.n	80058d0 <__mcmp+0x2c>
 80058c8:	d205      	bcs.n	80058d6 <__mcmp+0x32>
 80058ca:	f04f 30ff 	mov.w	r0, #4294967295
 80058ce:	bd30      	pop	{r4, r5, pc}
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d3f3      	bcc.n	80058bc <__mcmp+0x18>
 80058d4:	e7fb      	b.n	80058ce <__mcmp+0x2a>
 80058d6:	2001      	movs	r0, #1
 80058d8:	e7f9      	b.n	80058ce <__mcmp+0x2a>
	...

080058dc <__mdiff>:
 80058dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	4689      	mov	r9, r1
 80058e2:	4606      	mov	r6, r0
 80058e4:	4611      	mov	r1, r2
 80058e6:	4648      	mov	r0, r9
 80058e8:	4614      	mov	r4, r2
 80058ea:	f7ff ffdb 	bl	80058a4 <__mcmp>
 80058ee:	1e05      	subs	r5, r0, #0
 80058f0:	d112      	bne.n	8005918 <__mdiff+0x3c>
 80058f2:	4629      	mov	r1, r5
 80058f4:	4630      	mov	r0, r6
 80058f6:	f7ff fd5b 	bl	80053b0 <_Balloc>
 80058fa:	4602      	mov	r2, r0
 80058fc:	b928      	cbnz	r0, 800590a <__mdiff+0x2e>
 80058fe:	4b3f      	ldr	r3, [pc, #252]	@ (80059fc <__mdiff+0x120>)
 8005900:	f240 2137 	movw	r1, #567	@ 0x237
 8005904:	483e      	ldr	r0, [pc, #248]	@ (8005a00 <__mdiff+0x124>)
 8005906:	f000 fb11 	bl	8005f2c <__assert_func>
 800590a:	2301      	movs	r3, #1
 800590c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005910:	4610      	mov	r0, r2
 8005912:	b003      	add	sp, #12
 8005914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005918:	bfbc      	itt	lt
 800591a:	464b      	movlt	r3, r9
 800591c:	46a1      	movlt	r9, r4
 800591e:	4630      	mov	r0, r6
 8005920:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005924:	bfba      	itte	lt
 8005926:	461c      	movlt	r4, r3
 8005928:	2501      	movlt	r5, #1
 800592a:	2500      	movge	r5, #0
 800592c:	f7ff fd40 	bl	80053b0 <_Balloc>
 8005930:	4602      	mov	r2, r0
 8005932:	b918      	cbnz	r0, 800593c <__mdiff+0x60>
 8005934:	4b31      	ldr	r3, [pc, #196]	@ (80059fc <__mdiff+0x120>)
 8005936:	f240 2145 	movw	r1, #581	@ 0x245
 800593a:	e7e3      	b.n	8005904 <__mdiff+0x28>
 800593c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005940:	6926      	ldr	r6, [r4, #16]
 8005942:	60c5      	str	r5, [r0, #12]
 8005944:	f109 0310 	add.w	r3, r9, #16
 8005948:	f109 0514 	add.w	r5, r9, #20
 800594c:	f104 0e14 	add.w	lr, r4, #20
 8005950:	f100 0b14 	add.w	fp, r0, #20
 8005954:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005958:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	46d9      	mov	r9, fp
 8005960:	f04f 0c00 	mov.w	ip, #0
 8005964:	9b01      	ldr	r3, [sp, #4]
 8005966:	f85e 0b04 	ldr.w	r0, [lr], #4
 800596a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	fa1f f38a 	uxth.w	r3, sl
 8005974:	4619      	mov	r1, r3
 8005976:	b283      	uxth	r3, r0
 8005978:	1acb      	subs	r3, r1, r3
 800597a:	0c00      	lsrs	r0, r0, #16
 800597c:	4463      	add	r3, ip
 800597e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005982:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005986:	b29b      	uxth	r3, r3
 8005988:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800598c:	4576      	cmp	r6, lr
 800598e:	f849 3b04 	str.w	r3, [r9], #4
 8005992:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005996:	d8e5      	bhi.n	8005964 <__mdiff+0x88>
 8005998:	1b33      	subs	r3, r6, r4
 800599a:	3b15      	subs	r3, #21
 800599c:	f023 0303 	bic.w	r3, r3, #3
 80059a0:	3415      	adds	r4, #21
 80059a2:	3304      	adds	r3, #4
 80059a4:	42a6      	cmp	r6, r4
 80059a6:	bf38      	it	cc
 80059a8:	2304      	movcc	r3, #4
 80059aa:	441d      	add	r5, r3
 80059ac:	445b      	add	r3, fp
 80059ae:	461e      	mov	r6, r3
 80059b0:	462c      	mov	r4, r5
 80059b2:	4544      	cmp	r4, r8
 80059b4:	d30e      	bcc.n	80059d4 <__mdiff+0xf8>
 80059b6:	f108 0103 	add.w	r1, r8, #3
 80059ba:	1b49      	subs	r1, r1, r5
 80059bc:	f021 0103 	bic.w	r1, r1, #3
 80059c0:	3d03      	subs	r5, #3
 80059c2:	45a8      	cmp	r8, r5
 80059c4:	bf38      	it	cc
 80059c6:	2100      	movcc	r1, #0
 80059c8:	440b      	add	r3, r1
 80059ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059ce:	b191      	cbz	r1, 80059f6 <__mdiff+0x11a>
 80059d0:	6117      	str	r7, [r2, #16]
 80059d2:	e79d      	b.n	8005910 <__mdiff+0x34>
 80059d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80059d8:	46e6      	mov	lr, ip
 80059da:	0c08      	lsrs	r0, r1, #16
 80059dc:	fa1c fc81 	uxtah	ip, ip, r1
 80059e0:	4471      	add	r1, lr
 80059e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80059e6:	b289      	uxth	r1, r1
 80059e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80059ec:	f846 1b04 	str.w	r1, [r6], #4
 80059f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059f4:	e7dd      	b.n	80059b2 <__mdiff+0xd6>
 80059f6:	3f01      	subs	r7, #1
 80059f8:	e7e7      	b.n	80059ca <__mdiff+0xee>
 80059fa:	bf00      	nop
 80059fc:	080066b4 	.word	0x080066b4
 8005a00:	080066c5 	.word	0x080066c5

08005a04 <__d2b>:
 8005a04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a08:	460f      	mov	r7, r1
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	ec59 8b10 	vmov	r8, r9, d0
 8005a10:	4616      	mov	r6, r2
 8005a12:	f7ff fccd 	bl	80053b0 <_Balloc>
 8005a16:	4604      	mov	r4, r0
 8005a18:	b930      	cbnz	r0, 8005a28 <__d2b+0x24>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	4b23      	ldr	r3, [pc, #140]	@ (8005aac <__d2b+0xa8>)
 8005a1e:	4824      	ldr	r0, [pc, #144]	@ (8005ab0 <__d2b+0xac>)
 8005a20:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a24:	f000 fa82 	bl	8005f2c <__assert_func>
 8005a28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a30:	b10d      	cbz	r5, 8005a36 <__d2b+0x32>
 8005a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	f1b8 0300 	subs.w	r3, r8, #0
 8005a3c:	d023      	beq.n	8005a86 <__d2b+0x82>
 8005a3e:	4668      	mov	r0, sp
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	f7ff fd7c 	bl	800553e <__lo0bits>
 8005a46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a4a:	b1d0      	cbz	r0, 8005a82 <__d2b+0x7e>
 8005a4c:	f1c0 0320 	rsb	r3, r0, #32
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	430b      	orrs	r3, r1
 8005a56:	40c2      	lsrs	r2, r0
 8005a58:	6163      	str	r3, [r4, #20]
 8005a5a:	9201      	str	r2, [sp, #4]
 8005a5c:	9b01      	ldr	r3, [sp, #4]
 8005a5e:	61a3      	str	r3, [r4, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf0c      	ite	eq
 8005a64:	2201      	moveq	r2, #1
 8005a66:	2202      	movne	r2, #2
 8005a68:	6122      	str	r2, [r4, #16]
 8005a6a:	b1a5      	cbz	r5, 8005a96 <__d2b+0x92>
 8005a6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a70:	4405      	add	r5, r0
 8005a72:	603d      	str	r5, [r7, #0]
 8005a74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a78:	6030      	str	r0, [r6, #0]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	b003      	add	sp, #12
 8005a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a82:	6161      	str	r1, [r4, #20]
 8005a84:	e7ea      	b.n	8005a5c <__d2b+0x58>
 8005a86:	a801      	add	r0, sp, #4
 8005a88:	f7ff fd59 	bl	800553e <__lo0bits>
 8005a8c:	9b01      	ldr	r3, [sp, #4]
 8005a8e:	6163      	str	r3, [r4, #20]
 8005a90:	3020      	adds	r0, #32
 8005a92:	2201      	movs	r2, #1
 8005a94:	e7e8      	b.n	8005a68 <__d2b+0x64>
 8005a96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005a9e:	6038      	str	r0, [r7, #0]
 8005aa0:	6918      	ldr	r0, [r3, #16]
 8005aa2:	f7ff fd2d 	bl	8005500 <__hi0bits>
 8005aa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005aaa:	e7e5      	b.n	8005a78 <__d2b+0x74>
 8005aac:	080066b4 	.word	0x080066b4
 8005ab0:	080066c5 	.word	0x080066c5

08005ab4 <__ssputs_r>:
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	688e      	ldr	r6, [r1, #8]
 8005aba:	461f      	mov	r7, r3
 8005abc:	42be      	cmp	r6, r7
 8005abe:	680b      	ldr	r3, [r1, #0]
 8005ac0:	4682      	mov	sl, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	4690      	mov	r8, r2
 8005ac6:	d82d      	bhi.n	8005b24 <__ssputs_r+0x70>
 8005ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005acc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ad0:	d026      	beq.n	8005b20 <__ssputs_r+0x6c>
 8005ad2:	6965      	ldr	r5, [r4, #20]
 8005ad4:	6909      	ldr	r1, [r1, #16]
 8005ad6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ada:	eba3 0901 	sub.w	r9, r3, r1
 8005ade:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ae2:	1c7b      	adds	r3, r7, #1
 8005ae4:	444b      	add	r3, r9
 8005ae6:	106d      	asrs	r5, r5, #1
 8005ae8:	429d      	cmp	r5, r3
 8005aea:	bf38      	it	cc
 8005aec:	461d      	movcc	r5, r3
 8005aee:	0553      	lsls	r3, r2, #21
 8005af0:	d527      	bpl.n	8005b42 <__ssputs_r+0x8e>
 8005af2:	4629      	mov	r1, r5
 8005af4:	f7ff fbd0 	bl	8005298 <_malloc_r>
 8005af8:	4606      	mov	r6, r0
 8005afa:	b360      	cbz	r0, 8005b56 <__ssputs_r+0xa2>
 8005afc:	6921      	ldr	r1, [r4, #16]
 8005afe:	464a      	mov	r2, r9
 8005b00:	f000 fa06 	bl	8005f10 <memcpy>
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	6126      	str	r6, [r4, #16]
 8005b12:	6165      	str	r5, [r4, #20]
 8005b14:	444e      	add	r6, r9
 8005b16:	eba5 0509 	sub.w	r5, r5, r9
 8005b1a:	6026      	str	r6, [r4, #0]
 8005b1c:	60a5      	str	r5, [r4, #8]
 8005b1e:	463e      	mov	r6, r7
 8005b20:	42be      	cmp	r6, r7
 8005b22:	d900      	bls.n	8005b26 <__ssputs_r+0x72>
 8005b24:	463e      	mov	r6, r7
 8005b26:	6820      	ldr	r0, [r4, #0]
 8005b28:	4632      	mov	r2, r6
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	f000 f9c6 	bl	8005ebc <memmove>
 8005b30:	68a3      	ldr	r3, [r4, #8]
 8005b32:	1b9b      	subs	r3, r3, r6
 8005b34:	60a3      	str	r3, [r4, #8]
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	4433      	add	r3, r6
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b42:	462a      	mov	r2, r5
 8005b44:	f000 fa36 	bl	8005fb4 <_realloc_r>
 8005b48:	4606      	mov	r6, r0
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d1e0      	bne.n	8005b10 <__ssputs_r+0x5c>
 8005b4e:	6921      	ldr	r1, [r4, #16]
 8005b50:	4650      	mov	r0, sl
 8005b52:	f7ff fb2d 	bl	80051b0 <_free_r>
 8005b56:	230c      	movs	r3, #12
 8005b58:	f8ca 3000 	str.w	r3, [sl]
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	e7e9      	b.n	8005b3e <__ssputs_r+0x8a>
	...

08005b6c <_svfiprintf_r>:
 8005b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b70:	4698      	mov	r8, r3
 8005b72:	898b      	ldrh	r3, [r1, #12]
 8005b74:	061b      	lsls	r3, r3, #24
 8005b76:	b09d      	sub	sp, #116	@ 0x74
 8005b78:	4607      	mov	r7, r0
 8005b7a:	460d      	mov	r5, r1
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	d510      	bpl.n	8005ba2 <_svfiprintf_r+0x36>
 8005b80:	690b      	ldr	r3, [r1, #16]
 8005b82:	b973      	cbnz	r3, 8005ba2 <_svfiprintf_r+0x36>
 8005b84:	2140      	movs	r1, #64	@ 0x40
 8005b86:	f7ff fb87 	bl	8005298 <_malloc_r>
 8005b8a:	6028      	str	r0, [r5, #0]
 8005b8c:	6128      	str	r0, [r5, #16]
 8005b8e:	b930      	cbnz	r0, 8005b9e <_svfiprintf_r+0x32>
 8005b90:	230c      	movs	r3, #12
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	b01d      	add	sp, #116	@ 0x74
 8005b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9e:	2340      	movs	r3, #64	@ 0x40
 8005ba0:	616b      	str	r3, [r5, #20]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba6:	2320      	movs	r3, #32
 8005ba8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bac:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb0:	2330      	movs	r3, #48	@ 0x30
 8005bb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d50 <_svfiprintf_r+0x1e4>
 8005bb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bba:	f04f 0901 	mov.w	r9, #1
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	469a      	mov	sl, r3
 8005bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc6:	b10a      	cbz	r2, 8005bcc <_svfiprintf_r+0x60>
 8005bc8:	2a25      	cmp	r2, #37	@ 0x25
 8005bca:	d1f9      	bne.n	8005bc0 <_svfiprintf_r+0x54>
 8005bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd0:	d00b      	beq.n	8005bea <_svfiprintf_r+0x7e>
 8005bd2:	465b      	mov	r3, fp
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f7ff ff6b 	bl	8005ab4 <__ssputs_r>
 8005bde:	3001      	adds	r0, #1
 8005be0:	f000 80a7 	beq.w	8005d32 <_svfiprintf_r+0x1c6>
 8005be4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005be6:	445a      	add	r2, fp
 8005be8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bea:	f89a 3000 	ldrb.w	r3, [sl]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 809f 	beq.w	8005d32 <_svfiprintf_r+0x1c6>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bfe:	f10a 0a01 	add.w	sl, sl, #1
 8005c02:	9304      	str	r3, [sp, #16]
 8005c04:	9307      	str	r3, [sp, #28]
 8005c06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c0c:	4654      	mov	r4, sl
 8005c0e:	2205      	movs	r2, #5
 8005c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c14:	484e      	ldr	r0, [pc, #312]	@ (8005d50 <_svfiprintf_r+0x1e4>)
 8005c16:	f7fa fadb 	bl	80001d0 <memchr>
 8005c1a:	9a04      	ldr	r2, [sp, #16]
 8005c1c:	b9d8      	cbnz	r0, 8005c56 <_svfiprintf_r+0xea>
 8005c1e:	06d0      	lsls	r0, r2, #27
 8005c20:	bf44      	itt	mi
 8005c22:	2320      	movmi	r3, #32
 8005c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c28:	0711      	lsls	r1, r2, #28
 8005c2a:	bf44      	itt	mi
 8005c2c:	232b      	movmi	r3, #43	@ 0x2b
 8005c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c32:	f89a 3000 	ldrb.w	r3, [sl]
 8005c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c38:	d015      	beq.n	8005c66 <_svfiprintf_r+0xfa>
 8005c3a:	9a07      	ldr	r2, [sp, #28]
 8005c3c:	4654      	mov	r4, sl
 8005c3e:	2000      	movs	r0, #0
 8005c40:	f04f 0c0a 	mov.w	ip, #10
 8005c44:	4621      	mov	r1, r4
 8005c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4a:	3b30      	subs	r3, #48	@ 0x30
 8005c4c:	2b09      	cmp	r3, #9
 8005c4e:	d94b      	bls.n	8005ce8 <_svfiprintf_r+0x17c>
 8005c50:	b1b0      	cbz	r0, 8005c80 <_svfiprintf_r+0x114>
 8005c52:	9207      	str	r2, [sp, #28]
 8005c54:	e014      	b.n	8005c80 <_svfiprintf_r+0x114>
 8005c56:	eba0 0308 	sub.w	r3, r0, r8
 8005c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	9304      	str	r3, [sp, #16]
 8005c62:	46a2      	mov	sl, r4
 8005c64:	e7d2      	b.n	8005c0c <_svfiprintf_r+0xa0>
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	1d19      	adds	r1, r3, #4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	9103      	str	r1, [sp, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bfbb      	ittet	lt
 8005c72:	425b      	neglt	r3, r3
 8005c74:	f042 0202 	orrlt.w	r2, r2, #2
 8005c78:	9307      	strge	r3, [sp, #28]
 8005c7a:	9307      	strlt	r3, [sp, #28]
 8005c7c:	bfb8      	it	lt
 8005c7e:	9204      	strlt	r2, [sp, #16]
 8005c80:	7823      	ldrb	r3, [r4, #0]
 8005c82:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c84:	d10a      	bne.n	8005c9c <_svfiprintf_r+0x130>
 8005c86:	7863      	ldrb	r3, [r4, #1]
 8005c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c8a:	d132      	bne.n	8005cf2 <_svfiprintf_r+0x186>
 8005c8c:	9b03      	ldr	r3, [sp, #12]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	9203      	str	r2, [sp, #12]
 8005c94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c98:	3402      	adds	r4, #2
 8005c9a:	9305      	str	r3, [sp, #20]
 8005c9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d60 <_svfiprintf_r+0x1f4>
 8005ca0:	7821      	ldrb	r1, [r4, #0]
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	4650      	mov	r0, sl
 8005ca6:	f7fa fa93 	bl	80001d0 <memchr>
 8005caa:	b138      	cbz	r0, 8005cbc <_svfiprintf_r+0x150>
 8005cac:	9b04      	ldr	r3, [sp, #16]
 8005cae:	eba0 000a 	sub.w	r0, r0, sl
 8005cb2:	2240      	movs	r2, #64	@ 0x40
 8005cb4:	4082      	lsls	r2, r0
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	3401      	adds	r4, #1
 8005cba:	9304      	str	r3, [sp, #16]
 8005cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc0:	4824      	ldr	r0, [pc, #144]	@ (8005d54 <_svfiprintf_r+0x1e8>)
 8005cc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cc6:	2206      	movs	r2, #6
 8005cc8:	f7fa fa82 	bl	80001d0 <memchr>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d036      	beq.n	8005d3e <_svfiprintf_r+0x1d2>
 8005cd0:	4b21      	ldr	r3, [pc, #132]	@ (8005d58 <_svfiprintf_r+0x1ec>)
 8005cd2:	bb1b      	cbnz	r3, 8005d1c <_svfiprintf_r+0x1b0>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	3307      	adds	r3, #7
 8005cd8:	f023 0307 	bic.w	r3, r3, #7
 8005cdc:	3308      	adds	r3, #8
 8005cde:	9303      	str	r3, [sp, #12]
 8005ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce2:	4433      	add	r3, r6
 8005ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ce6:	e76a      	b.n	8005bbe <_svfiprintf_r+0x52>
 8005ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cec:	460c      	mov	r4, r1
 8005cee:	2001      	movs	r0, #1
 8005cf0:	e7a8      	b.n	8005c44 <_svfiprintf_r+0xd8>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	3401      	adds	r4, #1
 8005cf6:	9305      	str	r3, [sp, #20]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f04f 0c0a 	mov.w	ip, #10
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d04:	3a30      	subs	r2, #48	@ 0x30
 8005d06:	2a09      	cmp	r2, #9
 8005d08:	d903      	bls.n	8005d12 <_svfiprintf_r+0x1a6>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0c6      	beq.n	8005c9c <_svfiprintf_r+0x130>
 8005d0e:	9105      	str	r1, [sp, #20]
 8005d10:	e7c4      	b.n	8005c9c <_svfiprintf_r+0x130>
 8005d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d16:	4604      	mov	r4, r0
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e7f0      	b.n	8005cfe <_svfiprintf_r+0x192>
 8005d1c:	ab03      	add	r3, sp, #12
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	462a      	mov	r2, r5
 8005d22:	4b0e      	ldr	r3, [pc, #56]	@ (8005d5c <_svfiprintf_r+0x1f0>)
 8005d24:	a904      	add	r1, sp, #16
 8005d26:	4638      	mov	r0, r7
 8005d28:	f7fd fe96 	bl	8003a58 <_printf_float>
 8005d2c:	1c42      	adds	r2, r0, #1
 8005d2e:	4606      	mov	r6, r0
 8005d30:	d1d6      	bne.n	8005ce0 <_svfiprintf_r+0x174>
 8005d32:	89ab      	ldrh	r3, [r5, #12]
 8005d34:	065b      	lsls	r3, r3, #25
 8005d36:	f53f af2d 	bmi.w	8005b94 <_svfiprintf_r+0x28>
 8005d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d3c:	e72c      	b.n	8005b98 <_svfiprintf_r+0x2c>
 8005d3e:	ab03      	add	r3, sp, #12
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	462a      	mov	r2, r5
 8005d44:	4b05      	ldr	r3, [pc, #20]	@ (8005d5c <_svfiprintf_r+0x1f0>)
 8005d46:	a904      	add	r1, sp, #16
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f7fe f91d 	bl	8003f88 <_printf_i>
 8005d4e:	e7ed      	b.n	8005d2c <_svfiprintf_r+0x1c0>
 8005d50:	08006820 	.word	0x08006820
 8005d54:	0800682a 	.word	0x0800682a
 8005d58:	08003a59 	.word	0x08003a59
 8005d5c:	08005ab5 	.word	0x08005ab5
 8005d60:	08006826 	.word	0x08006826

08005d64 <__sflush_r>:
 8005d64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	0716      	lsls	r6, r2, #28
 8005d6e:	4605      	mov	r5, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	d454      	bmi.n	8005e1e <__sflush_r+0xba>
 8005d74:	684b      	ldr	r3, [r1, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dc02      	bgt.n	8005d80 <__sflush_r+0x1c>
 8005d7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dd48      	ble.n	8005e12 <__sflush_r+0xae>
 8005d80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	d045      	beq.n	8005e12 <__sflush_r+0xae>
 8005d86:	2300      	movs	r3, #0
 8005d88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d8c:	682f      	ldr	r7, [r5, #0]
 8005d8e:	6a21      	ldr	r1, [r4, #32]
 8005d90:	602b      	str	r3, [r5, #0]
 8005d92:	d030      	beq.n	8005df6 <__sflush_r+0x92>
 8005d94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	0759      	lsls	r1, r3, #29
 8005d9a:	d505      	bpl.n	8005da8 <__sflush_r+0x44>
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	1ad2      	subs	r2, r2, r3
 8005da0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005da2:	b10b      	cbz	r3, 8005da8 <__sflush_r+0x44>
 8005da4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005da6:	1ad2      	subs	r2, r2, r3
 8005da8:	2300      	movs	r3, #0
 8005daa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dac:	6a21      	ldr	r1, [r4, #32]
 8005dae:	4628      	mov	r0, r5
 8005db0:	47b0      	blx	r6
 8005db2:	1c43      	adds	r3, r0, #1
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	d106      	bne.n	8005dc6 <__sflush_r+0x62>
 8005db8:	6829      	ldr	r1, [r5, #0]
 8005dba:	291d      	cmp	r1, #29
 8005dbc:	d82b      	bhi.n	8005e16 <__sflush_r+0xb2>
 8005dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005e68 <__sflush_r+0x104>)
 8005dc0:	410a      	asrs	r2, r1
 8005dc2:	07d6      	lsls	r6, r2, #31
 8005dc4:	d427      	bmi.n	8005e16 <__sflush_r+0xb2>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	6062      	str	r2, [r4, #4]
 8005dca:	04d9      	lsls	r1, r3, #19
 8005dcc:	6922      	ldr	r2, [r4, #16]
 8005dce:	6022      	str	r2, [r4, #0]
 8005dd0:	d504      	bpl.n	8005ddc <__sflush_r+0x78>
 8005dd2:	1c42      	adds	r2, r0, #1
 8005dd4:	d101      	bne.n	8005dda <__sflush_r+0x76>
 8005dd6:	682b      	ldr	r3, [r5, #0]
 8005dd8:	b903      	cbnz	r3, 8005ddc <__sflush_r+0x78>
 8005dda:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dde:	602f      	str	r7, [r5, #0]
 8005de0:	b1b9      	cbz	r1, 8005e12 <__sflush_r+0xae>
 8005de2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005de6:	4299      	cmp	r1, r3
 8005de8:	d002      	beq.n	8005df0 <__sflush_r+0x8c>
 8005dea:	4628      	mov	r0, r5
 8005dec:	f7ff f9e0 	bl	80051b0 <_free_r>
 8005df0:	2300      	movs	r3, #0
 8005df2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005df4:	e00d      	b.n	8005e12 <__sflush_r+0xae>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b0      	blx	r6
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	1c50      	adds	r0, r2, #1
 8005e00:	d1c9      	bne.n	8005d96 <__sflush_r+0x32>
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0c6      	beq.n	8005d96 <__sflush_r+0x32>
 8005e08:	2b1d      	cmp	r3, #29
 8005e0a:	d001      	beq.n	8005e10 <__sflush_r+0xac>
 8005e0c:	2b16      	cmp	r3, #22
 8005e0e:	d11e      	bne.n	8005e4e <__sflush_r+0xea>
 8005e10:	602f      	str	r7, [r5, #0]
 8005e12:	2000      	movs	r0, #0
 8005e14:	e022      	b.n	8005e5c <__sflush_r+0xf8>
 8005e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e1a:	b21b      	sxth	r3, r3
 8005e1c:	e01b      	b.n	8005e56 <__sflush_r+0xf2>
 8005e1e:	690f      	ldr	r7, [r1, #16]
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	d0f6      	beq.n	8005e12 <__sflush_r+0xae>
 8005e24:	0793      	lsls	r3, r2, #30
 8005e26:	680e      	ldr	r6, [r1, #0]
 8005e28:	bf08      	it	eq
 8005e2a:	694b      	ldreq	r3, [r1, #20]
 8005e2c:	600f      	str	r7, [r1, #0]
 8005e2e:	bf18      	it	ne
 8005e30:	2300      	movne	r3, #0
 8005e32:	eba6 0807 	sub.w	r8, r6, r7
 8005e36:	608b      	str	r3, [r1, #8]
 8005e38:	f1b8 0f00 	cmp.w	r8, #0
 8005e3c:	dde9      	ble.n	8005e12 <__sflush_r+0xae>
 8005e3e:	6a21      	ldr	r1, [r4, #32]
 8005e40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e42:	4643      	mov	r3, r8
 8005e44:	463a      	mov	r2, r7
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b0      	blx	r6
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	dc08      	bgt.n	8005e60 <__sflush_r+0xfc>
 8005e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e56:	81a3      	strh	r3, [r4, #12]
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e60:	4407      	add	r7, r0
 8005e62:	eba8 0800 	sub.w	r8, r8, r0
 8005e66:	e7e7      	b.n	8005e38 <__sflush_r+0xd4>
 8005e68:	dfbffffe 	.word	0xdfbffffe

08005e6c <_fflush_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	690b      	ldr	r3, [r1, #16]
 8005e70:	4605      	mov	r5, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	b913      	cbnz	r3, 8005e7c <_fflush_r+0x10>
 8005e76:	2500      	movs	r5, #0
 8005e78:	4628      	mov	r0, r5
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	b118      	cbz	r0, 8005e86 <_fflush_r+0x1a>
 8005e7e:	6a03      	ldr	r3, [r0, #32]
 8005e80:	b90b      	cbnz	r3, 8005e86 <_fflush_r+0x1a>
 8005e82:	f7fe fa2d 	bl	80042e0 <__sinit>
 8005e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f3      	beq.n	8005e76 <_fflush_r+0xa>
 8005e8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e90:	07d0      	lsls	r0, r2, #31
 8005e92:	d404      	bmi.n	8005e9e <_fflush_r+0x32>
 8005e94:	0599      	lsls	r1, r3, #22
 8005e96:	d402      	bmi.n	8005e9e <_fflush_r+0x32>
 8005e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e9a:	f7fe fb38 	bl	800450e <__retarget_lock_acquire_recursive>
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	f7ff ff5f 	bl	8005d64 <__sflush_r>
 8005ea6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ea8:	07da      	lsls	r2, r3, #31
 8005eaa:	4605      	mov	r5, r0
 8005eac:	d4e4      	bmi.n	8005e78 <_fflush_r+0xc>
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	059b      	lsls	r3, r3, #22
 8005eb2:	d4e1      	bmi.n	8005e78 <_fflush_r+0xc>
 8005eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eb6:	f7fe fb2b 	bl	8004510 <__retarget_lock_release_recursive>
 8005eba:	e7dd      	b.n	8005e78 <_fflush_r+0xc>

08005ebc <memmove>:
 8005ebc:	4288      	cmp	r0, r1
 8005ebe:	b510      	push	{r4, lr}
 8005ec0:	eb01 0402 	add.w	r4, r1, r2
 8005ec4:	d902      	bls.n	8005ecc <memmove+0x10>
 8005ec6:	4284      	cmp	r4, r0
 8005ec8:	4623      	mov	r3, r4
 8005eca:	d807      	bhi.n	8005edc <memmove+0x20>
 8005ecc:	1e43      	subs	r3, r0, #1
 8005ece:	42a1      	cmp	r1, r4
 8005ed0:	d008      	beq.n	8005ee4 <memmove+0x28>
 8005ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eda:	e7f8      	b.n	8005ece <memmove+0x12>
 8005edc:	4402      	add	r2, r0
 8005ede:	4601      	mov	r1, r0
 8005ee0:	428a      	cmp	r2, r1
 8005ee2:	d100      	bne.n	8005ee6 <memmove+0x2a>
 8005ee4:	bd10      	pop	{r4, pc}
 8005ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eee:	e7f7      	b.n	8005ee0 <memmove+0x24>

08005ef0 <_sbrk_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d06      	ldr	r5, [pc, #24]	@ (8005f0c <_sbrk_r+0x1c>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fb fb0a 	bl	8001514 <_sbrk>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_sbrk_r+0x1a>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_sbrk_r+0x1a>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	200003e8 	.word	0x200003e8

08005f10 <memcpy>:
 8005f10:	440a      	add	r2, r1
 8005f12:	4291      	cmp	r1, r2
 8005f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f18:	d100      	bne.n	8005f1c <memcpy+0xc>
 8005f1a:	4770      	bx	lr
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f26:	4291      	cmp	r1, r2
 8005f28:	d1f9      	bne.n	8005f1e <memcpy+0xe>
 8005f2a:	bd10      	pop	{r4, pc}

08005f2c <__assert_func>:
 8005f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f2e:	4614      	mov	r4, r2
 8005f30:	461a      	mov	r2, r3
 8005f32:	4b09      	ldr	r3, [pc, #36]	@ (8005f58 <__assert_func+0x2c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4605      	mov	r5, r0
 8005f38:	68d8      	ldr	r0, [r3, #12]
 8005f3a:	b954      	cbnz	r4, 8005f52 <__assert_func+0x26>
 8005f3c:	4b07      	ldr	r3, [pc, #28]	@ (8005f5c <__assert_func+0x30>)
 8005f3e:	461c      	mov	r4, r3
 8005f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f44:	9100      	str	r1, [sp, #0]
 8005f46:	462b      	mov	r3, r5
 8005f48:	4905      	ldr	r1, [pc, #20]	@ (8005f60 <__assert_func+0x34>)
 8005f4a:	f000 f86f 	bl	800602c <fiprintf>
 8005f4e:	f000 f87f 	bl	8006050 <abort>
 8005f52:	4b04      	ldr	r3, [pc, #16]	@ (8005f64 <__assert_func+0x38>)
 8005f54:	e7f4      	b.n	8005f40 <__assert_func+0x14>
 8005f56:	bf00      	nop
 8005f58:	20000018 	.word	0x20000018
 8005f5c:	08006876 	.word	0x08006876
 8005f60:	08006848 	.word	0x08006848
 8005f64:	0800683b 	.word	0x0800683b

08005f68 <_calloc_r>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	fba1 5402 	umull	r5, r4, r1, r2
 8005f6e:	b93c      	cbnz	r4, 8005f80 <_calloc_r+0x18>
 8005f70:	4629      	mov	r1, r5
 8005f72:	f7ff f991 	bl	8005298 <_malloc_r>
 8005f76:	4606      	mov	r6, r0
 8005f78:	b928      	cbnz	r0, 8005f86 <_calloc_r+0x1e>
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	220c      	movs	r2, #12
 8005f82:	6002      	str	r2, [r0, #0]
 8005f84:	e7f9      	b.n	8005f7a <_calloc_r+0x12>
 8005f86:	462a      	mov	r2, r5
 8005f88:	4621      	mov	r1, r4
 8005f8a:	f7fe fa42 	bl	8004412 <memset>
 8005f8e:	e7f5      	b.n	8005f7c <_calloc_r+0x14>

08005f90 <__ascii_mbtowc>:
 8005f90:	b082      	sub	sp, #8
 8005f92:	b901      	cbnz	r1, 8005f96 <__ascii_mbtowc+0x6>
 8005f94:	a901      	add	r1, sp, #4
 8005f96:	b142      	cbz	r2, 8005faa <__ascii_mbtowc+0x1a>
 8005f98:	b14b      	cbz	r3, 8005fae <__ascii_mbtowc+0x1e>
 8005f9a:	7813      	ldrb	r3, [r2, #0]
 8005f9c:	600b      	str	r3, [r1, #0]
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	1e10      	subs	r0, r2, #0
 8005fa2:	bf18      	it	ne
 8005fa4:	2001      	movne	r0, #1
 8005fa6:	b002      	add	sp, #8
 8005fa8:	4770      	bx	lr
 8005faa:	4610      	mov	r0, r2
 8005fac:	e7fb      	b.n	8005fa6 <__ascii_mbtowc+0x16>
 8005fae:	f06f 0001 	mvn.w	r0, #1
 8005fb2:	e7f8      	b.n	8005fa6 <__ascii_mbtowc+0x16>

08005fb4 <_realloc_r>:
 8005fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb8:	4680      	mov	r8, r0
 8005fba:	4615      	mov	r5, r2
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	b921      	cbnz	r1, 8005fca <_realloc_r+0x16>
 8005fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	f7ff b967 	b.w	8005298 <_malloc_r>
 8005fca:	b92a      	cbnz	r2, 8005fd8 <_realloc_r+0x24>
 8005fcc:	f7ff f8f0 	bl	80051b0 <_free_r>
 8005fd0:	2400      	movs	r4, #0
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd8:	f000 f841 	bl	800605e <_malloc_usable_size_r>
 8005fdc:	4285      	cmp	r5, r0
 8005fde:	4606      	mov	r6, r0
 8005fe0:	d802      	bhi.n	8005fe8 <_realloc_r+0x34>
 8005fe2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005fe6:	d8f4      	bhi.n	8005fd2 <_realloc_r+0x1e>
 8005fe8:	4629      	mov	r1, r5
 8005fea:	4640      	mov	r0, r8
 8005fec:	f7ff f954 	bl	8005298 <_malloc_r>
 8005ff0:	4607      	mov	r7, r0
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d0ec      	beq.n	8005fd0 <_realloc_r+0x1c>
 8005ff6:	42b5      	cmp	r5, r6
 8005ff8:	462a      	mov	r2, r5
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	bf28      	it	cs
 8005ffe:	4632      	movcs	r2, r6
 8006000:	f7ff ff86 	bl	8005f10 <memcpy>
 8006004:	4621      	mov	r1, r4
 8006006:	4640      	mov	r0, r8
 8006008:	f7ff f8d2 	bl	80051b0 <_free_r>
 800600c:	463c      	mov	r4, r7
 800600e:	e7e0      	b.n	8005fd2 <_realloc_r+0x1e>

08006010 <__ascii_wctomb>:
 8006010:	4603      	mov	r3, r0
 8006012:	4608      	mov	r0, r1
 8006014:	b141      	cbz	r1, 8006028 <__ascii_wctomb+0x18>
 8006016:	2aff      	cmp	r2, #255	@ 0xff
 8006018:	d904      	bls.n	8006024 <__ascii_wctomb+0x14>
 800601a:	228a      	movs	r2, #138	@ 0x8a
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	f04f 30ff 	mov.w	r0, #4294967295
 8006022:	4770      	bx	lr
 8006024:	700a      	strb	r2, [r1, #0]
 8006026:	2001      	movs	r0, #1
 8006028:	4770      	bx	lr
	...

0800602c <fiprintf>:
 800602c:	b40e      	push	{r1, r2, r3}
 800602e:	b503      	push	{r0, r1, lr}
 8006030:	4601      	mov	r1, r0
 8006032:	ab03      	add	r3, sp, #12
 8006034:	4805      	ldr	r0, [pc, #20]	@ (800604c <fiprintf+0x20>)
 8006036:	f853 2b04 	ldr.w	r2, [r3], #4
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	f000 f83f 	bl	80060c0 <_vfiprintf_r>
 8006042:	b002      	add	sp, #8
 8006044:	f85d eb04 	ldr.w	lr, [sp], #4
 8006048:	b003      	add	sp, #12
 800604a:	4770      	bx	lr
 800604c:	20000018 	.word	0x20000018

08006050 <abort>:
 8006050:	b508      	push	{r3, lr}
 8006052:	2006      	movs	r0, #6
 8006054:	f000 fa08 	bl	8006468 <raise>
 8006058:	2001      	movs	r0, #1
 800605a:	f7fb f9e3 	bl	8001424 <_exit>

0800605e <_malloc_usable_size_r>:
 800605e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006062:	1f18      	subs	r0, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	bfbc      	itt	lt
 8006068:	580b      	ldrlt	r3, [r1, r0]
 800606a:	18c0      	addlt	r0, r0, r3
 800606c:	4770      	bx	lr

0800606e <__sfputc_r>:
 800606e:	6893      	ldr	r3, [r2, #8]
 8006070:	3b01      	subs	r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	b410      	push	{r4}
 8006076:	6093      	str	r3, [r2, #8]
 8006078:	da08      	bge.n	800608c <__sfputc_r+0x1e>
 800607a:	6994      	ldr	r4, [r2, #24]
 800607c:	42a3      	cmp	r3, r4
 800607e:	db01      	blt.n	8006084 <__sfputc_r+0x16>
 8006080:	290a      	cmp	r1, #10
 8006082:	d103      	bne.n	800608c <__sfputc_r+0x1e>
 8006084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006088:	f000 b932 	b.w	80062f0 <__swbuf_r>
 800608c:	6813      	ldr	r3, [r2, #0]
 800608e:	1c58      	adds	r0, r3, #1
 8006090:	6010      	str	r0, [r2, #0]
 8006092:	7019      	strb	r1, [r3, #0]
 8006094:	4608      	mov	r0, r1
 8006096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800609a:	4770      	bx	lr

0800609c <__sfputs_r>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	4606      	mov	r6, r0
 80060a0:	460f      	mov	r7, r1
 80060a2:	4614      	mov	r4, r2
 80060a4:	18d5      	adds	r5, r2, r3
 80060a6:	42ac      	cmp	r4, r5
 80060a8:	d101      	bne.n	80060ae <__sfputs_r+0x12>
 80060aa:	2000      	movs	r0, #0
 80060ac:	e007      	b.n	80060be <__sfputs_r+0x22>
 80060ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b2:	463a      	mov	r2, r7
 80060b4:	4630      	mov	r0, r6
 80060b6:	f7ff ffda 	bl	800606e <__sfputc_r>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d1f3      	bne.n	80060a6 <__sfputs_r+0xa>
 80060be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060c0 <_vfiprintf_r>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	460d      	mov	r5, r1
 80060c6:	b09d      	sub	sp, #116	@ 0x74
 80060c8:	4614      	mov	r4, r2
 80060ca:	4698      	mov	r8, r3
 80060cc:	4606      	mov	r6, r0
 80060ce:	b118      	cbz	r0, 80060d8 <_vfiprintf_r+0x18>
 80060d0:	6a03      	ldr	r3, [r0, #32]
 80060d2:	b90b      	cbnz	r3, 80060d8 <_vfiprintf_r+0x18>
 80060d4:	f7fe f904 	bl	80042e0 <__sinit>
 80060d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060da:	07d9      	lsls	r1, r3, #31
 80060dc:	d405      	bmi.n	80060ea <_vfiprintf_r+0x2a>
 80060de:	89ab      	ldrh	r3, [r5, #12]
 80060e0:	059a      	lsls	r2, r3, #22
 80060e2:	d402      	bmi.n	80060ea <_vfiprintf_r+0x2a>
 80060e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060e6:	f7fe fa12 	bl	800450e <__retarget_lock_acquire_recursive>
 80060ea:	89ab      	ldrh	r3, [r5, #12]
 80060ec:	071b      	lsls	r3, r3, #28
 80060ee:	d501      	bpl.n	80060f4 <_vfiprintf_r+0x34>
 80060f0:	692b      	ldr	r3, [r5, #16]
 80060f2:	b99b      	cbnz	r3, 800611c <_vfiprintf_r+0x5c>
 80060f4:	4629      	mov	r1, r5
 80060f6:	4630      	mov	r0, r6
 80060f8:	f000 f938 	bl	800636c <__swsetup_r>
 80060fc:	b170      	cbz	r0, 800611c <_vfiprintf_r+0x5c>
 80060fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006100:	07dc      	lsls	r4, r3, #31
 8006102:	d504      	bpl.n	800610e <_vfiprintf_r+0x4e>
 8006104:	f04f 30ff 	mov.w	r0, #4294967295
 8006108:	b01d      	add	sp, #116	@ 0x74
 800610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610e:	89ab      	ldrh	r3, [r5, #12]
 8006110:	0598      	lsls	r0, r3, #22
 8006112:	d4f7      	bmi.n	8006104 <_vfiprintf_r+0x44>
 8006114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006116:	f7fe f9fb 	bl	8004510 <__retarget_lock_release_recursive>
 800611a:	e7f3      	b.n	8006104 <_vfiprintf_r+0x44>
 800611c:	2300      	movs	r3, #0
 800611e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006120:	2320      	movs	r3, #32
 8006122:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006126:	f8cd 800c 	str.w	r8, [sp, #12]
 800612a:	2330      	movs	r3, #48	@ 0x30
 800612c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062dc <_vfiprintf_r+0x21c>
 8006130:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006134:	f04f 0901 	mov.w	r9, #1
 8006138:	4623      	mov	r3, r4
 800613a:	469a      	mov	sl, r3
 800613c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006140:	b10a      	cbz	r2, 8006146 <_vfiprintf_r+0x86>
 8006142:	2a25      	cmp	r2, #37	@ 0x25
 8006144:	d1f9      	bne.n	800613a <_vfiprintf_r+0x7a>
 8006146:	ebba 0b04 	subs.w	fp, sl, r4
 800614a:	d00b      	beq.n	8006164 <_vfiprintf_r+0xa4>
 800614c:	465b      	mov	r3, fp
 800614e:	4622      	mov	r2, r4
 8006150:	4629      	mov	r1, r5
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff ffa2 	bl	800609c <__sfputs_r>
 8006158:	3001      	adds	r0, #1
 800615a:	f000 80a7 	beq.w	80062ac <_vfiprintf_r+0x1ec>
 800615e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006160:	445a      	add	r2, fp
 8006162:	9209      	str	r2, [sp, #36]	@ 0x24
 8006164:	f89a 3000 	ldrb.w	r3, [sl]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 809f 	beq.w	80062ac <_vfiprintf_r+0x1ec>
 800616e:	2300      	movs	r3, #0
 8006170:	f04f 32ff 	mov.w	r2, #4294967295
 8006174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006178:	f10a 0a01 	add.w	sl, sl, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006184:	931a      	str	r3, [sp, #104]	@ 0x68
 8006186:	4654      	mov	r4, sl
 8006188:	2205      	movs	r2, #5
 800618a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800618e:	4853      	ldr	r0, [pc, #332]	@ (80062dc <_vfiprintf_r+0x21c>)
 8006190:	f7fa f81e 	bl	80001d0 <memchr>
 8006194:	9a04      	ldr	r2, [sp, #16]
 8006196:	b9d8      	cbnz	r0, 80061d0 <_vfiprintf_r+0x110>
 8006198:	06d1      	lsls	r1, r2, #27
 800619a:	bf44      	itt	mi
 800619c:	2320      	movmi	r3, #32
 800619e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061a2:	0713      	lsls	r3, r2, #28
 80061a4:	bf44      	itt	mi
 80061a6:	232b      	movmi	r3, #43	@ 0x2b
 80061a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061ac:	f89a 3000 	ldrb.w	r3, [sl]
 80061b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80061b2:	d015      	beq.n	80061e0 <_vfiprintf_r+0x120>
 80061b4:	9a07      	ldr	r2, [sp, #28]
 80061b6:	4654      	mov	r4, sl
 80061b8:	2000      	movs	r0, #0
 80061ba:	f04f 0c0a 	mov.w	ip, #10
 80061be:	4621      	mov	r1, r4
 80061c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061c4:	3b30      	subs	r3, #48	@ 0x30
 80061c6:	2b09      	cmp	r3, #9
 80061c8:	d94b      	bls.n	8006262 <_vfiprintf_r+0x1a2>
 80061ca:	b1b0      	cbz	r0, 80061fa <_vfiprintf_r+0x13a>
 80061cc:	9207      	str	r2, [sp, #28]
 80061ce:	e014      	b.n	80061fa <_vfiprintf_r+0x13a>
 80061d0:	eba0 0308 	sub.w	r3, r0, r8
 80061d4:	fa09 f303 	lsl.w	r3, r9, r3
 80061d8:	4313      	orrs	r3, r2
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	46a2      	mov	sl, r4
 80061de:	e7d2      	b.n	8006186 <_vfiprintf_r+0xc6>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	1d19      	adds	r1, r3, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	9103      	str	r1, [sp, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bfbb      	ittet	lt
 80061ec:	425b      	neglt	r3, r3
 80061ee:	f042 0202 	orrlt.w	r2, r2, #2
 80061f2:	9307      	strge	r3, [sp, #28]
 80061f4:	9307      	strlt	r3, [sp, #28]
 80061f6:	bfb8      	it	lt
 80061f8:	9204      	strlt	r2, [sp, #16]
 80061fa:	7823      	ldrb	r3, [r4, #0]
 80061fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80061fe:	d10a      	bne.n	8006216 <_vfiprintf_r+0x156>
 8006200:	7863      	ldrb	r3, [r4, #1]
 8006202:	2b2a      	cmp	r3, #42	@ 0x2a
 8006204:	d132      	bne.n	800626c <_vfiprintf_r+0x1ac>
 8006206:	9b03      	ldr	r3, [sp, #12]
 8006208:	1d1a      	adds	r2, r3, #4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	9203      	str	r2, [sp, #12]
 800620e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006212:	3402      	adds	r4, #2
 8006214:	9305      	str	r3, [sp, #20]
 8006216:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062ec <_vfiprintf_r+0x22c>
 800621a:	7821      	ldrb	r1, [r4, #0]
 800621c:	2203      	movs	r2, #3
 800621e:	4650      	mov	r0, sl
 8006220:	f7f9 ffd6 	bl	80001d0 <memchr>
 8006224:	b138      	cbz	r0, 8006236 <_vfiprintf_r+0x176>
 8006226:	9b04      	ldr	r3, [sp, #16]
 8006228:	eba0 000a 	sub.w	r0, r0, sl
 800622c:	2240      	movs	r2, #64	@ 0x40
 800622e:	4082      	lsls	r2, r0
 8006230:	4313      	orrs	r3, r2
 8006232:	3401      	adds	r4, #1
 8006234:	9304      	str	r3, [sp, #16]
 8006236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623a:	4829      	ldr	r0, [pc, #164]	@ (80062e0 <_vfiprintf_r+0x220>)
 800623c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006240:	2206      	movs	r2, #6
 8006242:	f7f9 ffc5 	bl	80001d0 <memchr>
 8006246:	2800      	cmp	r0, #0
 8006248:	d03f      	beq.n	80062ca <_vfiprintf_r+0x20a>
 800624a:	4b26      	ldr	r3, [pc, #152]	@ (80062e4 <_vfiprintf_r+0x224>)
 800624c:	bb1b      	cbnz	r3, 8006296 <_vfiprintf_r+0x1d6>
 800624e:	9b03      	ldr	r3, [sp, #12]
 8006250:	3307      	adds	r3, #7
 8006252:	f023 0307 	bic.w	r3, r3, #7
 8006256:	3308      	adds	r3, #8
 8006258:	9303      	str	r3, [sp, #12]
 800625a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800625c:	443b      	add	r3, r7
 800625e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006260:	e76a      	b.n	8006138 <_vfiprintf_r+0x78>
 8006262:	fb0c 3202 	mla	r2, ip, r2, r3
 8006266:	460c      	mov	r4, r1
 8006268:	2001      	movs	r0, #1
 800626a:	e7a8      	b.n	80061be <_vfiprintf_r+0xfe>
 800626c:	2300      	movs	r3, #0
 800626e:	3401      	adds	r4, #1
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	4619      	mov	r1, r3
 8006274:	f04f 0c0a 	mov.w	ip, #10
 8006278:	4620      	mov	r0, r4
 800627a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800627e:	3a30      	subs	r2, #48	@ 0x30
 8006280:	2a09      	cmp	r2, #9
 8006282:	d903      	bls.n	800628c <_vfiprintf_r+0x1cc>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0c6      	beq.n	8006216 <_vfiprintf_r+0x156>
 8006288:	9105      	str	r1, [sp, #20]
 800628a:	e7c4      	b.n	8006216 <_vfiprintf_r+0x156>
 800628c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006290:	4604      	mov	r4, r0
 8006292:	2301      	movs	r3, #1
 8006294:	e7f0      	b.n	8006278 <_vfiprintf_r+0x1b8>
 8006296:	ab03      	add	r3, sp, #12
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	462a      	mov	r2, r5
 800629c:	4b12      	ldr	r3, [pc, #72]	@ (80062e8 <_vfiprintf_r+0x228>)
 800629e:	a904      	add	r1, sp, #16
 80062a0:	4630      	mov	r0, r6
 80062a2:	f7fd fbd9 	bl	8003a58 <_printf_float>
 80062a6:	4607      	mov	r7, r0
 80062a8:	1c78      	adds	r0, r7, #1
 80062aa:	d1d6      	bne.n	800625a <_vfiprintf_r+0x19a>
 80062ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062ae:	07d9      	lsls	r1, r3, #31
 80062b0:	d405      	bmi.n	80062be <_vfiprintf_r+0x1fe>
 80062b2:	89ab      	ldrh	r3, [r5, #12]
 80062b4:	059a      	lsls	r2, r3, #22
 80062b6:	d402      	bmi.n	80062be <_vfiprintf_r+0x1fe>
 80062b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062ba:	f7fe f929 	bl	8004510 <__retarget_lock_release_recursive>
 80062be:	89ab      	ldrh	r3, [r5, #12]
 80062c0:	065b      	lsls	r3, r3, #25
 80062c2:	f53f af1f 	bmi.w	8006104 <_vfiprintf_r+0x44>
 80062c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062c8:	e71e      	b.n	8006108 <_vfiprintf_r+0x48>
 80062ca:	ab03      	add	r3, sp, #12
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	462a      	mov	r2, r5
 80062d0:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <_vfiprintf_r+0x228>)
 80062d2:	a904      	add	r1, sp, #16
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7fd fe57 	bl	8003f88 <_printf_i>
 80062da:	e7e4      	b.n	80062a6 <_vfiprintf_r+0x1e6>
 80062dc:	08006820 	.word	0x08006820
 80062e0:	0800682a 	.word	0x0800682a
 80062e4:	08003a59 	.word	0x08003a59
 80062e8:	0800609d 	.word	0x0800609d
 80062ec:	08006826 	.word	0x08006826

080062f0 <__swbuf_r>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	460e      	mov	r6, r1
 80062f4:	4614      	mov	r4, r2
 80062f6:	4605      	mov	r5, r0
 80062f8:	b118      	cbz	r0, 8006302 <__swbuf_r+0x12>
 80062fa:	6a03      	ldr	r3, [r0, #32]
 80062fc:	b90b      	cbnz	r3, 8006302 <__swbuf_r+0x12>
 80062fe:	f7fd ffef 	bl	80042e0 <__sinit>
 8006302:	69a3      	ldr	r3, [r4, #24]
 8006304:	60a3      	str	r3, [r4, #8]
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	071a      	lsls	r2, r3, #28
 800630a:	d501      	bpl.n	8006310 <__swbuf_r+0x20>
 800630c:	6923      	ldr	r3, [r4, #16]
 800630e:	b943      	cbnz	r3, 8006322 <__swbuf_r+0x32>
 8006310:	4621      	mov	r1, r4
 8006312:	4628      	mov	r0, r5
 8006314:	f000 f82a 	bl	800636c <__swsetup_r>
 8006318:	b118      	cbz	r0, 8006322 <__swbuf_r+0x32>
 800631a:	f04f 37ff 	mov.w	r7, #4294967295
 800631e:	4638      	mov	r0, r7
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	6922      	ldr	r2, [r4, #16]
 8006326:	1a98      	subs	r0, r3, r2
 8006328:	6963      	ldr	r3, [r4, #20]
 800632a:	b2f6      	uxtb	r6, r6
 800632c:	4283      	cmp	r3, r0
 800632e:	4637      	mov	r7, r6
 8006330:	dc05      	bgt.n	800633e <__swbuf_r+0x4e>
 8006332:	4621      	mov	r1, r4
 8006334:	4628      	mov	r0, r5
 8006336:	f7ff fd99 	bl	8005e6c <_fflush_r>
 800633a:	2800      	cmp	r0, #0
 800633c:	d1ed      	bne.n	800631a <__swbuf_r+0x2a>
 800633e:	68a3      	ldr	r3, [r4, #8]
 8006340:	3b01      	subs	r3, #1
 8006342:	60a3      	str	r3, [r4, #8]
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	6022      	str	r2, [r4, #0]
 800634a:	701e      	strb	r6, [r3, #0]
 800634c:	6962      	ldr	r2, [r4, #20]
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	429a      	cmp	r2, r3
 8006352:	d004      	beq.n	800635e <__swbuf_r+0x6e>
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	07db      	lsls	r3, r3, #31
 8006358:	d5e1      	bpl.n	800631e <__swbuf_r+0x2e>
 800635a:	2e0a      	cmp	r6, #10
 800635c:	d1df      	bne.n	800631e <__swbuf_r+0x2e>
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f7ff fd83 	bl	8005e6c <_fflush_r>
 8006366:	2800      	cmp	r0, #0
 8006368:	d0d9      	beq.n	800631e <__swbuf_r+0x2e>
 800636a:	e7d6      	b.n	800631a <__swbuf_r+0x2a>

0800636c <__swsetup_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4b29      	ldr	r3, [pc, #164]	@ (8006414 <__swsetup_r+0xa8>)
 8006370:	4605      	mov	r5, r0
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	460c      	mov	r4, r1
 8006376:	b118      	cbz	r0, 8006380 <__swsetup_r+0x14>
 8006378:	6a03      	ldr	r3, [r0, #32]
 800637a:	b90b      	cbnz	r3, 8006380 <__swsetup_r+0x14>
 800637c:	f7fd ffb0 	bl	80042e0 <__sinit>
 8006380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006384:	0719      	lsls	r1, r3, #28
 8006386:	d422      	bmi.n	80063ce <__swsetup_r+0x62>
 8006388:	06da      	lsls	r2, r3, #27
 800638a:	d407      	bmi.n	800639c <__swsetup_r+0x30>
 800638c:	2209      	movs	r2, #9
 800638e:	602a      	str	r2, [r5, #0]
 8006390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	f04f 30ff 	mov.w	r0, #4294967295
 800639a:	e033      	b.n	8006404 <__swsetup_r+0x98>
 800639c:	0758      	lsls	r0, r3, #29
 800639e:	d512      	bpl.n	80063c6 <__swsetup_r+0x5a>
 80063a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063a2:	b141      	cbz	r1, 80063b6 <__swsetup_r+0x4a>
 80063a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063a8:	4299      	cmp	r1, r3
 80063aa:	d002      	beq.n	80063b2 <__swsetup_r+0x46>
 80063ac:	4628      	mov	r0, r5
 80063ae:	f7fe feff 	bl	80051b0 <_free_r>
 80063b2:	2300      	movs	r3, #0
 80063b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	2300      	movs	r3, #0
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f043 0308 	orr.w	r3, r3, #8
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	b94b      	cbnz	r3, 80063e6 <__swsetup_r+0x7a>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063dc:	d003      	beq.n	80063e6 <__swsetup_r+0x7a>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f883 	bl	80064ec <__smakebuf_r>
 80063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ea:	f013 0201 	ands.w	r2, r3, #1
 80063ee:	d00a      	beq.n	8006406 <__swsetup_r+0x9a>
 80063f0:	2200      	movs	r2, #0
 80063f2:	60a2      	str	r2, [r4, #8]
 80063f4:	6962      	ldr	r2, [r4, #20]
 80063f6:	4252      	negs	r2, r2
 80063f8:	61a2      	str	r2, [r4, #24]
 80063fa:	6922      	ldr	r2, [r4, #16]
 80063fc:	b942      	cbnz	r2, 8006410 <__swsetup_r+0xa4>
 80063fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006402:	d1c5      	bne.n	8006390 <__swsetup_r+0x24>
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	0799      	lsls	r1, r3, #30
 8006408:	bf58      	it	pl
 800640a:	6962      	ldrpl	r2, [r4, #20]
 800640c:	60a2      	str	r2, [r4, #8]
 800640e:	e7f4      	b.n	80063fa <__swsetup_r+0x8e>
 8006410:	2000      	movs	r0, #0
 8006412:	e7f7      	b.n	8006404 <__swsetup_r+0x98>
 8006414:	20000018 	.word	0x20000018

08006418 <_raise_r>:
 8006418:	291f      	cmp	r1, #31
 800641a:	b538      	push	{r3, r4, r5, lr}
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	d904      	bls.n	800642c <_raise_r+0x14>
 8006422:	2316      	movs	r3, #22
 8006424:	6003      	str	r3, [r0, #0]
 8006426:	f04f 30ff 	mov.w	r0, #4294967295
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800642e:	b112      	cbz	r2, 8006436 <_raise_r+0x1e>
 8006430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006434:	b94b      	cbnz	r3, 800644a <_raise_r+0x32>
 8006436:	4628      	mov	r0, r5
 8006438:	f000 f830 	bl	800649c <_getpid_r>
 800643c:	4622      	mov	r2, r4
 800643e:	4601      	mov	r1, r0
 8006440:	4628      	mov	r0, r5
 8006442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006446:	f000 b817 	b.w	8006478 <_kill_r>
 800644a:	2b01      	cmp	r3, #1
 800644c:	d00a      	beq.n	8006464 <_raise_r+0x4c>
 800644e:	1c59      	adds	r1, r3, #1
 8006450:	d103      	bne.n	800645a <_raise_r+0x42>
 8006452:	2316      	movs	r3, #22
 8006454:	6003      	str	r3, [r0, #0]
 8006456:	2001      	movs	r0, #1
 8006458:	e7e7      	b.n	800642a <_raise_r+0x12>
 800645a:	2100      	movs	r1, #0
 800645c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006460:	4620      	mov	r0, r4
 8006462:	4798      	blx	r3
 8006464:	2000      	movs	r0, #0
 8006466:	e7e0      	b.n	800642a <_raise_r+0x12>

08006468 <raise>:
 8006468:	4b02      	ldr	r3, [pc, #8]	@ (8006474 <raise+0xc>)
 800646a:	4601      	mov	r1, r0
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	f7ff bfd3 	b.w	8006418 <_raise_r>
 8006472:	bf00      	nop
 8006474:	20000018 	.word	0x20000018

08006478 <_kill_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d07      	ldr	r5, [pc, #28]	@ (8006498 <_kill_r+0x20>)
 800647c:	2300      	movs	r3, #0
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	f7fa ffbd 	bl	8001404 <_kill>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	d102      	bne.n	8006494 <_kill_r+0x1c>
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	b103      	cbz	r3, 8006494 <_kill_r+0x1c>
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	bf00      	nop
 8006498:	200003e8 	.word	0x200003e8

0800649c <_getpid_r>:
 800649c:	f7fa bfaa 	b.w	80013f4 <_getpid>

080064a0 <__swhatbuf_r>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	460c      	mov	r4, r1
 80064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a8:	2900      	cmp	r1, #0
 80064aa:	b096      	sub	sp, #88	@ 0x58
 80064ac:	4615      	mov	r5, r2
 80064ae:	461e      	mov	r6, r3
 80064b0:	da0d      	bge.n	80064ce <__swhatbuf_r+0x2e>
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064b8:	f04f 0100 	mov.w	r1, #0
 80064bc:	bf14      	ite	ne
 80064be:	2340      	movne	r3, #64	@ 0x40
 80064c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064c4:	2000      	movs	r0, #0
 80064c6:	6031      	str	r1, [r6, #0]
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	b016      	add	sp, #88	@ 0x58
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	466a      	mov	r2, sp
 80064d0:	f000 f848 	bl	8006564 <_fstat_r>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	dbec      	blt.n	80064b2 <__swhatbuf_r+0x12>
 80064d8:	9901      	ldr	r1, [sp, #4]
 80064da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064e2:	4259      	negs	r1, r3
 80064e4:	4159      	adcs	r1, r3
 80064e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064ea:	e7eb      	b.n	80064c4 <__swhatbuf_r+0x24>

080064ec <__smakebuf_r>:
 80064ec:	898b      	ldrh	r3, [r1, #12]
 80064ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f0:	079d      	lsls	r5, r3, #30
 80064f2:	4606      	mov	r6, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	d507      	bpl.n	8006508 <__smakebuf_r+0x1c>
 80064f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	6123      	str	r3, [r4, #16]
 8006500:	2301      	movs	r3, #1
 8006502:	6163      	str	r3, [r4, #20]
 8006504:	b003      	add	sp, #12
 8006506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006508:	ab01      	add	r3, sp, #4
 800650a:	466a      	mov	r2, sp
 800650c:	f7ff ffc8 	bl	80064a0 <__swhatbuf_r>
 8006510:	9f00      	ldr	r7, [sp, #0]
 8006512:	4605      	mov	r5, r0
 8006514:	4639      	mov	r1, r7
 8006516:	4630      	mov	r0, r6
 8006518:	f7fe febe 	bl	8005298 <_malloc_r>
 800651c:	b948      	cbnz	r0, 8006532 <__smakebuf_r+0x46>
 800651e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006522:	059a      	lsls	r2, r3, #22
 8006524:	d4ee      	bmi.n	8006504 <__smakebuf_r+0x18>
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	f043 0302 	orr.w	r3, r3, #2
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	e7e2      	b.n	80064f8 <__smakebuf_r+0xc>
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	6020      	str	r0, [r4, #0]
 8006536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800653a:	81a3      	strh	r3, [r4, #12]
 800653c:	9b01      	ldr	r3, [sp, #4]
 800653e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006542:	b15b      	cbz	r3, 800655c <__smakebuf_r+0x70>
 8006544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006548:	4630      	mov	r0, r6
 800654a:	f000 f81d 	bl	8006588 <_isatty_r>
 800654e:	b128      	cbz	r0, 800655c <__smakebuf_r+0x70>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	81a3      	strh	r3, [r4, #12]
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	431d      	orrs	r5, r3
 8006560:	81a5      	strh	r5, [r4, #12]
 8006562:	e7cf      	b.n	8006504 <__smakebuf_r+0x18>

08006564 <_fstat_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	@ (8006584 <_fstat_r+0x20>)
 8006568:	2300      	movs	r3, #0
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	602b      	str	r3, [r5, #0]
 8006572:	f7fa ffa7 	bl	80014c4 <_fstat>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	d102      	bne.n	8006580 <_fstat_r+0x1c>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	b103      	cbz	r3, 8006580 <_fstat_r+0x1c>
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	bd38      	pop	{r3, r4, r5, pc}
 8006582:	bf00      	nop
 8006584:	200003e8 	.word	0x200003e8

08006588 <_isatty_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	@ (80065a4 <_isatty_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fa ffa6 	bl	80014e4 <_isatty>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_isatty_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_isatty_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	200003e8 	.word	0x200003e8

080065a8 <_init>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr

080065b4 <_fini>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	bf00      	nop
 80065b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ba:	bc08      	pop	{r3}
 80065bc:	469e      	mov	lr, r3
 80065be:	4770      	bx	lr
